<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML入门笔记1</title>
    <url>/2021/07/03/39/</url>
    <content><![CDATA[<h1 id="html入门"><a href="#html入门" class="headerlink" title="html入门"></a>html入门</h1><p>HTML全名”超文本标记语言”（HyperText Markup Language）<br>英国物理学家蒂姆·伯纳斯-李（Tim Berners-Lee）发明。</p>
<p>首先写这一套，Emmet语法<code>!</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> 文档类型</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span> 语言 中文为zh-cn</span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span> 设置字符编码</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span>始终使用最新内核来渲染页面</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span> 禁用缩放，兼容手机</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="章节标签"><a href="#章节标签" class="headerlink" title="章节标签"></a>章节标签</h2><h3 id="h1-h6"><a href="#h1-h6" class="headerlink" title="h1~h6"></a>h1~h6</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><h3 id="article"><a href="#article" class="headerlink" title="article"></a>article</h3><p>section表示一个有主题的独立部分，通常用在文档里面表示一个章节，比如article可以包含多个section。section总是多个一起使用，一个页面不能只有一个section。<br>每个article，通常包括标题（h1 - h6元素）作为article元素的子元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第二章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="p"><a href="#p" class="headerlink" title="p"></a>p</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>表示一个文本段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>文章内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>页尾<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">网页通常用来放置侧边栏</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>主体内容<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">文章用来放置标注或评论</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>本段是文章的重点。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><p>全局属性是所有元素都可以使用的属性。</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>表示元素的唯一,必须是全局唯一。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>元素类名,类名可以相同，也可以多个.<br><br>css和js通过类选择器或DOM方法(document.getElementsByClassName)来选择和访问特定的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1 p2 p3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h3><p>允许用户编辑内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">鼠标点击，本句内容可修改。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3><p>布尔属性，表示当前的元素不在跟页面相关<code>&lt;p hidden&gt;本句不会显示在页面上。&lt;/p&gt;     </code></p>
<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>指定当前元素css样式，如<code>&lt;p style=&quot;color: red;&quot;&gt;hello&lt;/p&gt;</code></p>
<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>为元素添加说明，鼠标悬停显示属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;版权说明&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>本站内容使用创意共享许可证，可以自由使用。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="内容标签"><a href="#内容标签" class="headerlink" title="内容标签"></a>内容标签</h2><h3 id="ol-li-ordered-list-list-item"><a href="#ol-li-ordered-list-list-item" class="headerlink" title="ol+li(ordered list + list item)"></a>ol+li(ordered list + list item)</h3><p>有序列表</p>
<h3 id="ul-li-unordered-list-list-item"><a href="#ul-li-unordered-list-list-item" class="headerlink" title="ul+li(unordered list + list item)"></a>ul+li(unordered list + list item)</h3><p>无须列表</p>
<h3 id="dl-dt-dd-description-list-term-data"><a href="#dl-dt-dd-description-list-term-data" class="headerlink" title="dl+dt+dd(description list + term + data)"></a>dl+dt+dd(description list + term + data)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>济南<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>青岛<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自定义列表</p>
<h3 id="pre-preview"><a href="#pre-preview" class="headerlink" title="pre(preview)"></a>pre(preview)</h3><p>预定义格式文本，保留原来格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    床前明月光，疑是地上霜</span><br><span class="line">    举头望明月，低头思故乡</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="br-break"><a href="#br-break" class="headerlink" title="br(break)"></a>br(break)</h3><p>换行<code>&lt;br&gt;</code></p>
<h3 id="a-anchor"><a href="#a-anchor" class="headerlink" title="a(anchor)"></a>a(anchor)</h3><p>超链接到其他网页或同一页面的某一位置<br><br><code>&lt;a href=&quot;www.baidu.com&quot; target=_blank&gt;点击跳转到百度页面&lt;/a&gt;</code></p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>显示代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var x = 1</span><br><span class="line">console.log(1)</span><br></pre></td></tr></table></figure>

<h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>强调，表示语气</p>
<h3 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h3><p>强调，内容重要，一般为粗体</p>
<h3 id="q-quote"><a href="#q-quote" class="headerlink" title="q(quote)"></a>q(quote)</h3><p>行内引用</p>
<h3 id="blockquote"><a href="#blockquote" class="headerlink" title="blockquote"></a>blockquote</h3><p>块级引用</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML常用标签</title>
    <url>/2021/07/06/52/</url>
    <content><![CDATA[<h2 id="1-a"><a href="#1-a" class="headerlink" title="1. a"></a>1. a</h2><ol>
<li>href: <ul>
<li>网址: //google.com</li>
<li>路径: a/b/c.index</li>
<li>伪协议代码: javascript:;. mailto: 邮箱. tel: 手机号</li>
<li>id: href = #xxx</li>
</ul>
</li>
<li>target: 新窗口打开<ul>
<li>_blank: 新标签页打开</li>
<li>_top: 最顶层页面打开</li>
<li>_parent: 上一级页面打开</li>
<li>_self: 自身页面打开，默认为这个属性</li>
</ul>
</li>
<li>download: 下载</li>
<li>rel=noopener: 解决安全问题</li>
</ol>
<h2 id="2-iframe"><a href="#2-iframe" class="headerlink" title="2. iframe"></a>2. iframe</h2><p>内联框架元素, 它能够将另一个HTML页面嵌入到当前页面中。基本不用了</p>
<h2 id="3-table"><a href="#3-table" class="headerlink" title="3. table"></a>3. table</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">table &#123;</span><br><span class="line">    table-layout: auto/fixed;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>english<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>翻译<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>hyper<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>超级<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>reference<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>引用<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-img"><a href="#4-img" class="headerlink" title="4.img"></a>4.img</h2><p>发出get请求，展示图片。永远不能让图片变形！！！</p>
<ol>
<li>alt: 图片未加载，显示alt值</li>
<li>src: 图片源<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;xx&quot;</span> <span class="attr">src</span>=<span class="string">&quot;youxiu.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;pupian&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 两个事件</span></span></span><br><span class="line"><span class="javascript">    xx.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;图片加载成功&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    xx.error = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;图片记载失败&quot;</span>);</span></span><br><span class="line"><span class="javascript">        xx.src= <span class="string">&quot;404.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-form"><a href="#5-form" class="headerlink" title="5. form"></a>5. form</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 属性</span></span><br><span class="line"><span class="comment">autocomplete 自动填充 input需要加上name=“username”</span></span><br><span class="line"><span class="comment">targe=_blank 新打开标签页提交表单</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/a&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input必须有name --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 没写type的话默认type=&quot;submit&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input type=&quot;color/password/radio/checkbox/file/hidden&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span>文本区<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mon&quot;</span>&gt;</span>周一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Tue&quot;</span>&gt;</span>周二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Wed&quot;</span>&gt;</span>周二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  input事件 onchange/onfocus/onblur --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/2021/10/07/44/</url>
    <content><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul>
<li><p><strong>如果能直接拿到将结果</strong></p>
<p>那就是同步</p>
<p>比如你在医院挂号，你拿到号才会离开窗口</p>
<p>同步任务可能消耗 10 毫秒，也可能需要 3 秒</p>
<p>总之不拿到结果你是不会离开的，这就是同步</p>
</li>
<li><p><strong>如果不能直接拿到结果</strong></p>
<p>那就异步</p>
<p>比如你在餐厅门口等位，你拿到号后可以去干别的事比如逛街</p>
<p>你可以每 10 分钟取餐厅问一下排到自己了没（轮询）</p>
<p>也可以扫码用微信接受通知（回调）</p>
</li>
</ul>
<h2 id="异步举例"><a href="#异步举例" class="headerlink" title="异步举例"></a>异步举例</h2><ul>
<li><p><strong>以 AJAX 为例</strong></p>
<p><code>request.send()</code> 之后，并不能直接得到 response</p>
<p>用 <code>console.log(request.response)</code> 试试</p>
<p>必须等到 readyState 变为 4 后，浏览器才会<strong>回头调用</strong> <code>request.onreadystatechange</code> 函数</p>
<p>我们才能得到 <code>request.response</code></p>
<p>这就跟餐厅给你发微信提醒的过程类似</p>
</li>
<li><p><strong>回调 callback</strong></p>
<p>你写给自己用的函数，不是回调</p>
<p>你写给别人用的函数，就是回调</p>
<p><code>request.onreadystatechange</code> 就是写个浏览器调用的</p>
<p>意思是你（浏览器）回头调用一下这个函数</p>
</li>
<li><p>简单来理解就是：同步按你的代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJSON.onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/5.json&#x27;</span>);</span><br><span class="line">    request.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; request.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> object = <span class="built_in">JSON</span>.parse(request.response);</span><br><span class="line">            myName.textContent = object.name;</span><br><span class="line">	        <span class="built_in">console</span>.log(request.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send();</span><br><span class="line">    <span class="comment">// console.log(request.resopne)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.response);</span><br><span class="line">        <span class="comment">// 或者将 放在 request.onreadystatechange 函数中</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// request.send()执行完，再执行 request.onreadystatechange 函数</span></span><br><span class="line"><span class="comment">// 执行顺序为 response.open() =&gt; respone.send() =&gt; request.onreadystatechange</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/kis_wuyan/article/details/116231729">onreadystatechange 执行两次</a></p>
<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>写了却不调用，给别人调用的函数，就是回调。需自行意会</p>
<p>函数例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<ol>
<li>我调用 f1 没有？</li>
<li>我把 f1 传给 f2 （别人）了没有？</li>
<li>f2 调用 f1 了没有？</li>
</ol>
<p>答：1. 调用了。2.穿了。3.f2 调用了 f1。</p>
<p>那么，f1 是不是我写给 f2 调用的函数？ 是。</p>
<p>所以，f1 是回调。</p>
<hr>


<p>例子2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    fn(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<p>fn(‘hello’) 中的 fn 就是 f1 。</p>
<p>fn(’hello‘) 中的 ’hello’ 会被赋值给参数 x 。</p>
<p>所以 x 就是 ‘hello’。</p>
<h2 id="异步和回调的关系"><a href="#异步和回调的关系" class="headerlink" title="异步和回调的关系"></a>异步和回调的关系</h2><ul>
<li><p><strong>关联</strong></p>
<p>异步任务需要再得到结果时通知 JS 来拿结果</p>
<p>怎么通知？</p>
<p>可以让 JS 留一个函数地址给浏览器（电话号码）</p>
<p>异步任务完成时浏览器调用该函数即可（拨打电话）</p>
<p>同时把任务作为参数传给该函数（通知）</p>
<p>这个函数是我写给浏览器调用的，所以是回调函数</p>
</li>
<li><p><strong>区别</strong></p>
<p>异步任务需要用到回调函数来通知结果</p>
<p>但回调函数不一定只用在异步任务里</p>
<p>回调可以用到同步任务里</p>
<p><code>array.forEach(n=&gt;console.log(n))</code> 就是同步回调</p>
</li>
</ul>
<h2 id="判断同步异步"><a href="#判断同步异步" class="headerlink" title="判断同步异步"></a>判断同步异步</h2><p>如果一个函数的返回值处于</p>
<ul>
<li>setTimeout</li>
<li>AJAX（即 XMLHttpRequest）</li>
<li>AddEventListener</li>
</ul>
<p>这三个东西内部中，那么这个函数就是异步函数</p>
<p>还有其他 API 是异步的，遇到再说。</p>
<p>举例说明：</p>
<p>摇骰子, 随机打印出1-6 中的一个数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇骰子(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123; <span class="comment">// 箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// return undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<p><code> 摇骰子（）</code> 里没有写 return，那就是 return undefined</p>
<p>箭头函数里有 return，返回真正结果</p>
<p>所以这是一个异步函数/异步任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = 摇骰子();</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br></pre></td></tr></table></figure>

<p>如何拿到异步结果？</p>
<p>用回调，写个函数，然后把函数地址给他</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后要求 摇骰子函数 得到结果后 把结果作为参数 传给f1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 摇骰子(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span>) + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">摇骰子(f1); <span class="comment">// 结果</span></span><br></pre></td></tr></table></figure>

<p>简化为箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">摇骰子(f1);</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line">摇骰子(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 再简化为</span></span><br><span class="line">摇骰子(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// 如果参数个数不一致就不能这样简化，有个相关面试题</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 面试题</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"><span class="comment">// 结果为 [1, NaN, NaN]</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;1&#x27;, 0, arr) =&gt; 1</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;2&#x27;, 1, arr) =&gt; NaN</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;3&#x27;, 2, arr) =&gt; NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;3&#x27;</span>].map(<span class="function">(<span class="params">item, i , arr</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">parseInt</span>(item)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br><span class="line"><span class="comment">// 正确结果 [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写 永远使用箭头函数</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">parseInt</span>(item));</span><br></pre></td></tr></table></figure>



<h2 id="异步总结"><a href="#异步总结" class="headerlink" title="异步总结"></a>异步总结</h2><ul>
<li>异步任务不能拿到结果</li>
<li>于是我们传一个回调给异步任务</li>
<li>异步任务完成时调用回调</li>
<li>调用的时候把结果作为参数</li>
</ul>
<h2 id="异步任务两个结果，成功或失败"><a href="#异步任务两个结果，成功或失败" class="headerlink" title="异步任务两个结果，成功或失败"></a>异步任务两个结果，成功或失败</h2><h3 id="两个方法解决"><a href="#两个方法解决" class="headerlink" title="两个方法解决"></a>两个方法解决</h3><p><strong>方法一：回调接受两个参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>); <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()) <span class="comment">// 成功</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>方法二：两个回调</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/1.json&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;<span class="comment">/*成功回调*/</span>&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="comment">/*失败回调*/</span>&#125;)</span><br><span class="line">ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/1.json&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 接受一个对象，对象有两个 key 表示成功和失败</span></span><br></pre></td></tr></table></figure>



<h3 id="这些方法的不足"><a href="#这些方法的不足" class="headerlink" title="这些方法的不足"></a>这些方法的不足</h3><p>不管方法一还是方法二，都有问题</p>
<ol>
<li>不规范，名称五花八门，有人用 success + error，有人用 success + fail，done + fail</li>
<li>容易出现==回调地狱== ，代码变得看不懂</li>
<li>很难进行错无处理</li>
</ol>
<p><strong>回调地狱举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getUser( <span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    getGroups(user, <span class="function">(<span class="params">groups</span>) =&gt;</span> &#123;</span><br><span class="line">        groups.forEach( <span class="function">(<span class="params">g</span>) =&gt;</span> &#123;</span><br><span class="line">            g.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.ownerId === user.id)</span><br><span class="line">            .forEach(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 仅示例，这只是四层，二十层呢，代码会很难读</span></span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-25_22-12-10.png" alt="Snipaste_2021-09-25_22-12-10" width="800px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline"> 吐槽回调地狱 来源网络</center> 



<h3 id="如何解决回调问题，用-Promise"><a href="#如何解决回调问题，用-Promise" class="headerlink" title="如何解决回调问题，用 Promise"></a>如何解决回调问题，用 Promise</h3><p>有什么办法能解决这三个问题：</p>
<ul>
<li>会犯回调的名字或顺序</li>
<li>拒绝回调地狱，让代码可读性更强</li>
<li>很方便地捕获错误</li>
</ul>
<blockquote>
<p>1976年，Daniel P.Friedman 和 David Wis 俩人提出 Promise 思想</p>
<p>后人基于此发明了 Future、Delay、Deferred等</p>
<p>前端结合 Promise 和 JS，制定了 <a href="https://www.ituring.com.cn/article/66566">Promise/A+规范</a></p>
<p>该规范详细描述了 Promise 的原理和使用方法。</p>
</blockquote>
<h2 id="以-AJAX-的封装为例，来解释-Promise"><a href="#以-AJAX-的封装为例，来解释-Promise" class="headerlink" title="以 AJAX 的封装为例，来解释 Promise"></a>以 AJAX 的封装为例，来解释 Promise</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise MDN</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line">ajax = <span class="function">(<span class="params">method, url, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;success, fail&#125; = option; <span class="comment">// 析构赋值</span></span><br><span class="line">    <span class="comment">// const succes = option.success;</span></span><br><span class="line">    <span class="comment">// const fail = option.fail;</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(method, url);</span><br><span class="line">    request.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功就调用 success，失败 fail</span></span><br><span class="line">            <span class="keyword">if</span> (request.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">                success.call(<span class="literal">null</span>, request.response);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (request.status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">                fail.call(<span class="literal">null</span>, request, request.status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.rend();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">response</span>)</span>&#123;&#125;, <span class="comment">// function 缩写</span></span><br><span class="line">    <span class="comment">// success: function(response)&#123;&#125;</span></span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">request, status</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>Promise 写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先改一下调用姿势</span></span><br><span class="line">ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">response</span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">request, status</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 上面用到了两个回调，还使用了 success 和 fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成 Promise 写法</span></span><br><span class="line">ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;&#125;, <span class="function">(<span class="params">request, status</span>)=&gt;</span>&#123;&#125; )</span><br><span class="line"><span class="comment">// 虽然也是回调</span></span><br><span class="line"><span class="comment">// 但是不需要经济 success 和 fail 了</span></span><br><span class="line"><span class="comment">// then 的第一个参数就是 success</span></span><br><span class="line"><span class="comment">// then 的第二个参数就是 fail</span></span><br></pre></td></tr></table></figure>

<p>请问 ajax() 返回了个啥 ？</p>
<p>返回了一个含有 .then() 方法的对象呗。</p>
<p>那么再请问如何得到这个含有 .then() 的对象呢 ？</p>
<p>那就要改造 ajax 的源码了。</p>
<p><code>return new Promise((resolve, reject) =&gt; &#123;&#125;)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 ajax</span></span><br><span class="line">ajax = <span class="function">(<span class="params">method, url, option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;success, fail&#125; = option;</span><br><span class="line">        <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        request.open(methon, url);</span><br><span class="line">        request.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(request.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">                    <span class="comment">// 成功</span></span><br><span class="line">                    resolve.call(<span class="literal">null</span>, request.response);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">                    <span class="comment">// s</span></span><br><span class="line">                    reject.call(<span class="literal">null</span>, request);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.send();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>小结</strong></p>
<p>第一步：</p>
<ul>
<li><code>retrun new Promise((resolve, reject) =&gt; &#123;...&#125;)</code></li>
<li>任务成功则调用 <code>resolve(result)</code></li>
<li>任务失败则调用 <code>reject(error)</code></li>
<li>resolve 和 reject 会再去调用成功和失败函数</li>
</ul>
<p>第二步：</p>
<ul>
<li>使用 <code>.then(success, fail)</code>传入成功函数和失败函数</li>
</ul>
<hr>
<p>我们自己封装的 ajax 的缺点:</p>
<p>post 无法上传数据。request.send(这里可以上传数据)</p>
<p>不能设置请求头。request.setRequestHeader(key, value)</p>
<p>使用：</p>
<p> <a href="https://www.jquery123.com/jQuery.ajax/">Jquery.ajax</a></p>
<p><a href="http://www.axios-js.com/zh-cn/docs/">axios</a>(推荐)</p>
]]></content>
      <tags>
        <tag>-js -AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数</title>
    <url>/2021/09/12/56/</url>
    <content><![CDATA[<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>定义一个函数</p>
<ul>
<li><p>具名函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形式参数<span class="number">1</span>, 形式参数<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>匿名函数, 具名函数去掉函数名就是匿名函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也叫函数表达式</span></span><br></pre></td></tr></table></figure></li>
<li><p>箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f1 = <span class="function"><span class="params">x</span> =&gt;</span> x * x</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y <span class="comment">// 圆括号不能省</span></span><br><span class="line"><span class="keyword">let</span> f3 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123; <span class="keyword">return</span> x - y&#125; <span class="comment">// 花括号不能省</span></span><br><span class="line"><span class="keyword">let</span> f4 = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (&#123;<span class="attr">name</span>: x, <span class="attr">age</span>: y&#125;)</span><br><span class="line"><span class="comment">// 直接返回对象 需要加个圆括号</span></span><br></pre></td></tr></table></figure></li>
<li><p>构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;return x + y&#x27;</span>)</span><br><span class="line"><span class="comment">// 基本没人用, 但是能让你知道函数是谁构造的</span></span><br><span class="line"><span class="comment">// 所有函数都是 Function 构造的</span></span><br><span class="line"><span class="comment">// 包括 Object、Array、Function</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="函数的要素"><a href="#函数的要素" class="headerlink" title="函数的要素"></a>函数的要素</h2><p>每个函数都拥有这些</p>
<ul>
<li>调用时机</li>
<li>作用域</li>
<li>闭包</li>
<li>形式参数</li>
<li>返回值</li>
<li>调用栈</li>
<li>函数提升</li>
<li>arguments（除了箭头函数）</li>
<li>this（除了箭头函数）</li>
</ul>
<h3 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h3><p>时机不同, 结果不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="comment">// 打印结果为 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    setTimeoug( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果为 6个6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    setTimeoug( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果为 0, 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// 因为 JS　在　for 和 let 一起用的时候会加东西</span></span><br><span class="line"><span class="comment">// 每次循环会多创建一个 i</span></span><br></pre></td></tr></table></figure>



<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>每个函数都会创建一个作用域</p>
<p><a href="https://blog.fundebug.com/2019/03/15/understand-javascript-scope/">深入理解 JS 作用域和作用域链</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="keyword">let</span> a = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a 不存在</span></span><br><span class="line"><span class="comment">// 问: 是不是因为 fn 没执行导致</span></span><br><span class="line"><span class="comment">// 答: 就算 fn 执行了,也访问不到作用域里面的 a</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例2function f1()&#123;    let a = 1;        function f2()&#123;        let a = 2;         console.log(a);    &#125;        console.log(a);    a = 3;    f2();    console.log(a)&#125;f1()// 打印结果为 /*  1 	2	3*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例3function f1()&#123;    let a = 1;    function f2()&#123;        let a = 2;        function f3()&#123;            console.log(a)        &#125;        a = 22;        f3();    &#125;    console.log(a);    a = 100;    f2();&#125;f1();/* 打印机结果为122*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>如果多个作用域有同名变量 a</strong></p>
<p>那么查找 a 的声明式, 就向上取最近的作用域, 简称[就近原则]</p>
<p>查找 a 的过程与函数执行无关</p>
<p>但 a 的值与函数执行有关</p>
</blockquote>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><a href="https://zhuanlan.zhihu.com/p/22486908">JS中的闭包是什么</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;    <span class="keyword">let</span> a = <span class="number">1</span>;    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;        <span class="comment">//        let a = 2;        function f3()&#123;            console.log(a)        &#125;//               /*		如果一个函数用到外部的变量		那么这个函数加这个变量		就叫做 闭包		左边的 a 和 f3 组成了 闭包		*/                a = 22;        f3();    &#125;    console.log(a);    a = 100;    f2();&#125;f1();</span></span><br></pre></td></tr></table></figure>



<h3 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h3><p>形式参数意思式非实际参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>)</span>&#123;    <span class="keyword">return</span> x + y;&#125;<span class="comment">// 其中 x 和 y 就是形参,因为并不是时机的参数add(1, 2);// 调用 add 时,1 和 2 是实际参数,会被复制给 x y// 上面代码近似等于下面代码function add()&#123;    var x = arguments[0]    var y = arguments[1]    return x + y&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>每个函数都有返回值</p>
<p>函数执行完了后才会返回</p>
<p>只有函数有返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>); &#125;hi();<span class="comment">// 没写 return, 所以返回值是 undefinedfunction hi() &#123; return console.log(&#x27;hi&#x27;); &#125;hi()// 返回值为 console.log(&#x27;hi&#x27;) 的值,即 undefined</span></span><br></pre></td></tr></table></figure>



<h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>什么是调用栈</p>
<blockquote>
<p>JS 引擎在调用一个函数前</p>
<p>需要把函数所在的环境 push 到一个数组里</p>
<p>这个数组叫做调用栈</p>
<p>等函数执行完了, 就会把环境弹 (pop) 出来</p>
<p>然后 return 到之前的环境, 继续执行后续代码</p>
</blockquote>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-02_17-04-35.png" alt="Snipaste_2021-09-02_17-04-35"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">调用栈 图示</center> 



<p>爆栈, 如果调用栈中压入的帧过多, 程序就会奔溃</p>
<p>递归函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阶乘function f(n) &#123;    return n !== 1 ? n * f(n - 1) : 1&#125;// 理解递归f(4)= 4 * f(3)= 4 * (3 * f(2))= 4 * (3 * (2 * f(1)))= 4 * (3 * (1))= 4 * (6)= 24// 先递进, 后回归</span></span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-02_17-36-31.png" alt="Snipaste_2021-09-02_17-36-31" width='800px'></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">递归函数调用栈 图示</center> 



<p>调用栈最长有多少</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试调用栈长度function computeMaxCallStackSize() &#123;    try &#123;        return 1 + computeMaxCallStackSize();    &#125; catch(e) &#123;        // 报错说明 stack overflow 了        return 1    &#125;&#125;/*chrom 11409firefox 24740node 12536*/</span></span><br></pre></td></tr></table></figure>



<h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">// 不管把具名函数声明在哪里, 它都会跑到第一行</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/liuhe688/p/5891273.html">JS 变量提升和函数提升</a></p>
<p><a href="https://segmentfault.com/a/1190000038344251">前端面试必考-JS 变量提升和函数提升详解</a></p>
<h3 id="arguments-和-this"><a href="#arguments-和-this" class="headerlink" title="arguments 和 this"></a>arguments 和 this</h3><p>每个函数都有 arguments 和 this ，除了箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);    <span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125;fn()<span class="comment">// arguments 是包含所有参数的 伪数组// 如果不给任何条件 this 默认指向 window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;    <span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125;fn()fn.call(<span class="number">1</span>) <span class="comment">// 打印出的 数字 1 被自动转化成对象 1function fn()&#123;    &#x27;use strict&#x27;    console.log(this)&#125;fn.call(1) // 打印出 数字 1function fn()&#123;  console.log(this);  console.log(arguments)&#125;// 传入的第一个参数是 this, 其余的是 argumentsfn.call(1, 2, 4)/*打印结果Number (1)Arguments&#123;0: 2, 1: 4 ...&#125;*/</span></span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-02_21-14-03.png" alt="Snipaste_2021-09-02_21-14-03" width="600px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">arguments 和 this</center> 

<blockquote>
<p>this 是隐藏参数</p>
<p>arguments 是普通参数</p>
<p>this 是参数(个人结论)</p>
</blockquote>
<h4 id="假如没有-this"><a href="#假如没有-this" class="headerlink" title="假如没有 this"></a>假如没有 this</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;    <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;        <span class="built_in">console</span>.log(<span class="string">&#x27;hello, i am &#x27;</span> + person.name);    &#125;&#125;person.sayHi()<span class="comment">/* 分析可以用直接保存了对象地址的 变量 获取 &#x27;name&#x27;这种办法简称为 引用*/</span></span><br></pre></td></tr></table></figure>

<h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    <span class="built_in">console</span>.log(<span class="string">&#x27;hello, i am &#x27;</span> + <span class="comment">/* person*/</span>.name)&#125;<span class="keyword">let</span> person = &#123;    <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,    <span class="string">&#x27;sayHi&#x27;</span>: sayHi.&#125;<span class="comment">/*分析person 如果改名，sayHi 函数就挂了sayHi 函数甚至有可能在另一个文件里所以我们不希望 sayHi 函数里出现 person 引用*/</span></span><br></pre></td></tr></table></figure>

<h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perosn</span> </span>&#123;    <span class="function"><span class="title">constructot</span>(<span class="params">name</span>)</span>&#123;        <span class="built_in">this</span>.name = name        <span class="comment">// 这里的 this 是 new 强制指定的    &#125;    sayHi()&#123;        console.log(/*????*/)    &#125;&#125;/*分析这里只有类，还没创建对象，故不可能获取对象的引用那么如何拿到对象的 name ？*//*需要一种办法拿到对象这样才能获取对象的 name 属性*/</span></span><br></pre></td></tr></table></figure>

<h4 id="一种土方法，用参数"><a href="#一种土方法，用参数" class="headerlink" title="一种土方法，用参数"></a>一种土方法，用参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象let person = &#123;    name: &#x27;frank&#x27;,    sayHi(p) &#123;        console.log(&#x27;hello, i am &#x27; + p.name)    &#125;&#125;person.sayHi(person)// 类class Person &#123;    constructor(name)&#123; this.name = name &#125;    sayHi(p) &#123;        console.log(&#x27;hello, i am &#x27; + p.name)    &#125;&#125;let person = new Person(&#x27;frank&#x27;)person.sayHi(person)</span></span><br></pre></td></tr></table></figure>

<h4 id="JS-在每个函数里加了-this"><a href="#JS-在每个函数里加了-this" class="headerlink" title="JS 在每个函数里加了 this"></a>JS 在每个函数里加了 this</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 this 获取那个对象let person = &#123;    name: &#x27;frank&#x27;,    sayHi(/*this*/)&#123;        console.log(&#x27;hello, i am &#x27; + this.name)    &#125;&#125;person.sayHi()/*person.sahHi()相当于 person.sayHi(person)然后 person 被传给 this 了 (person 是个地址)这样每个函数都能用 this 获取一个未知对象的引用了*/// person.sayHi() 会隐式地把 person 作为 this 传给 sayHi// 方便 sayHi 获取 person 对应的对象</span></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>我们想让函数获取对象的引用</p>
<p>但是并不想通过变量名做到</p>
<p>Python 通过额外的 self 参数做到 </p>
<p>JS 通过额外的 this 做到:</p>
<p>person.sayHi() 会把person 自动传给 sayHi, sayHi 可以通过 this 引用 person</p>
</blockquote>
<p>其他</p>
<ul>
<li>注意 person.sayHi 和 person.sayHi() 的区别</li>
<li>注意 person.sayHi() 的短句 (person.sayHi)()</li>
</ul>
<h4 id="call-指定-this"><a href="#call-指定-this" class="headerlink" title="call 指定 this"></a>call 指定 this</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 哪个对let person = &#123;    name: &#x27;frank&#x27;,    sayHi(/*this*/)&#123;        console.log(&#x27;hello, i am &#x27; + this.name)    &#125;&#125;person.sayHi()Person.sayHi(person)// 省略形式的反而是对的// 两种调用方式person.sayHi()// 会自动把 person 传到函数里, 作为 thisperson.sayHi.call(person)person.sayHi.call(&#123;name: &#x27;evan&#x27;&#125;)// 需要手 动把 person 传到函数里,作为 this// 推荐使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1function add(x, y) &#123;    return x + y&#125;add.call(undefined, 1, 2) // 3/*为什么要多写一个 undefined因为第一个参数要作为 this但是代码里没有用 this所以只能用 undefined 占位其实用 null 也可以*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例2Array.prototype.forEach2 = function(fn)&#123;    for(let i = 0; i &lt; this.length; i++)&#123;        fn(this[i], i, this)    &#125;&#125;let arr1 = [2, 4, 5]// 两种调用方式arr1.forEach2.call(arr1, (item) = &gt; console.log(item))arr1.forEach2((item) = &gt; console.log(item))/* this 是什么由于大家使用 forEach2 的时候总是会用 arr.forEach2所以 arr1 就被自动传给 foreEach2 了*//* this 一定是数组吗不一定, 比如Array.prototype.forEach2.call(&#123;0: &#x27;a&#x27;, 1: &#x27;b&#x27;,length: 2&#125;)*/</span></span><br></pre></td></tr></table></figure>

<p><strong>this 的两种使用方法</strong></p>
<ul>
<li><p>隐式传递</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 等价于 fn.call(undefined, 1, 2)obj.child.fn(1) // 等价于 obj.child.fn.call(obj.child, 1)</span></span><br></pre></td></tr></table></figure></li>
<li><p>显示传递</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn.call(<span class="literal">undefined</span>, <span class="number">1</span>, <span class="number">2</span>)fn.apply(<span class="literal">undefined</span>, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 数组</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>**绑定 this **</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 .bind 可以让 this 不被改变function f1(p1, p2)&#123;    console.log(this, p1, p2)&#125;let f2 = f1.bind(&#123;name: &#x27;frank&#x27;&#125;)// 那么 f2 就是 f1 绑定 this 之后的新函数f2() // 等价于 f1.call(&#123;name: &#x27;frank&#x27;&#125;)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://segmentfault.com/a/1190000004580525">快速理解 JS 中 this 的用法与陷阱</a></p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><strong>没有 arguments 和 this</strong></p>
<p>里面的 this 就是外面的 this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// windowlet fn = () =&gt; console.log(this)fn() // window// 就算加了 call 也没用fn.call(&#123;name: &#x27;frank&#x27;&#125;) // window</span></span><br></pre></td></tr></table></figure>



<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-03_23-05-46.png" alt="Snipaste_2021-09-03_23-05-46" width="800px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">立即执行函数</center> 

<p>推荐 <a href="https://segmentfault.com/a/1190000003902899">JS 中的立即执行函数</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数的执行时机</title>
    <url>/2021/09/07/35/</url>
    <content><![CDATA[<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>代码为什么会打印 6 个 6</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在上面代码中，for 循环是同步代码，setTimeout 是异步代码，JS 按照从上到下的执行顺序执行同步代码，而异步代码被插入到任务队列中。</p>
<p>当执行完同步代码（for 循环），JS 会去执行异步代码（setTimeout）。</p>
<p>在每次 for 循环中，都将异步代码（setTimeout）放入任务队列中，所以任务队列中有 6 个 setTimeout 即有 6 个 <code>console.log(i)</code>。</p>
<p>在每次 for 循环中将 setTimeout 里的代码 <code>console.log(i)</code> 放入任务队列时，i 的值是不一样的，当 JS 引擎开始执行任务队列中代码时，会在当前作用域中找变量 i ，但当前 for 循环的作用域中没有对变量 i 的进行定义，这个时候会在创造该函数的作用域中寻找 i，找到的是 let i，这时的 i 时全局变量，并且值已经确定为 6。所以打印出 6 个 6。</p>
<p>执行流程：</p>
<p><code>for(i=0) ==&gt; for(i=1) ==&gt; for(i=2) ==&gt; for(i=3) ==&gt; for(i=4) ==&gt; for(i=5) ==&gt; for(i=6) ==&gt; console.log(6)x6</code></p>
<h3 id="解决方法一-let"><a href="#解决方法一-let" class="headerlink" title="解决方法一 let"></a>解决方法一 let</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ )&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>let 的作用域是块作用域，能作用到 for 循环的子块中。</p>
<p>let 的作用于是块作用域，所以 setTimeout 被放到 任务队列的同时，<strong>let 定义的 i 值 也会跟随 setTimeout 进入队列</strong>。所以每次循环后队列里的 setTimeout 里的 i 值是不一样的。而 var 定义的 i 是无法进入的。（浅显易懂）</p>
<p>for 循环头部的 let 不仅将 i 绑定到 for 循环中，事实上它将其重新绑定到循环体的每一次迭代中，确保上一次迭代结束的值被重新赋值。setTimeout 里面的函数属于一个新的域，通过 var 定义的变量或全局变量是无法传入到这个函数执行，通过使用 let 来声明块变量能作用于这个块，所以箭头函数就能使用 i 这个变量，所以每次的 i 值不一样。</p>
<h3 id="解决方法二-使用立即执行函数，即闭包"><a href="#解决方法二-使用立即执行函数，即闭包" class="headerlink" title="解决方法二 使用立即执行函数，即闭包"></a>解决方法二 使用立即执行函数，即闭包</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j);</span><br><span class="line">   		&#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 setTimeout 是异步执行，所以让它立即执行就可以了。</p>
<p>通过闭包，将 i 的变量驻留在内存中，当输出 j 时，引用的是外部函数的变量值 i，i 的值是根据循环来的，执行 setTimeout 时已经确定了里面的的输出了。</p>
<h3 id="解决方法三-setTimeout-第三个参数"><a href="#解决方法三-setTimeout-第三个参数" class="headerlink" title="解决方法三 setTimeout 第三个参数"></a>解决方法三 setTimeout 第三个参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将每次的 i 值传入作用域。</span></span><br></pre></td></tr></table></figure>



<h3 id="解决方法四-try-catch"><a href="#解决方法四-try-catch" class="headerlink" title="解决方法四 try catch"></a>解决方法四 try catch</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> i</span><br><span class="line">    &#125;<span class="keyword">catch</span>(i)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 i 作为异常抛出，传递给 setTimeout</span></span><br></pre></td></tr></table></figure>





<h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><p>首先，JS是单线程环境，代码从上到下依次执行。这种执行方这也被称作是“同步执行”。（同一时间 JS 只能执行一段代码，如果这段代码要执行很长时间，那么之后的代码只能尽情地等待它执行完才能执行）。</p>
<p>但 JS 中引进了异步机制。于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</p>
<p><strong>同步任务</strong>指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</p>
<p><strong>异步任务</strong>指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有主线程上的任务执行完了，才通知”任务队列”，任务队列中的任务才会进入主线程执行。</p>
<h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>当执行某个函数、用户点击一次鼠标，Ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生时就会进入任务队列中，等待主线程读取,遵循先进先出原则。</p>
<p>执行任务队列中的某个任务，这个被执行的任务就称为执行栈。</p>
<h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><p>要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个事件。</p>
<p>主线程循环：即主线程会不停的从执行栈中读取事件，会执行完所有栈中的同步代码。</p>
<p>当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。</p>
<p><strong>当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务</strong>。如果有，那么主线程会依次执行那些任务队列中的回调函数。</p>
<h2 id="JS-异步执行的运行机制"><a href="#JS-异步执行的运行机制" class="headerlink" title="JS 异步执行的运行机制"></a>JS 异步执行的运行机制</h2><ol>
<li>所有任务都在主线程上执行，形成一个执行栈。</li>
<li>主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>
<li>一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列。那些对应的异步任务，进入执行栈开始执行。</li>
<li>主线程不断重复上面的第三步。</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS对象分类</title>
    <url>/2021/09/17/37/</url>
    <content><![CDATA[<h2 id="一个小程序，输出各种形状的面积和周长"><a href="#一个小程序，输出各种形状的面积和周长" class="headerlink" title="一个小程序，输出各种形状的面积和周长"></a>一个小程序，输出各种形状的面积和周长</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正方形 边长、面积、周长</span></span><br><span class="line"><span class="keyword">let</span> square = &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.wdith * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二，生成12个正方形"><a href="#二，生成12个正方形" class="headerlink" title="二，生成12个正方形"></a>二，生成12个正方形</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">    squareList[i] = &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三，width-是-5-和-6相间"><a href="#三，width-是-5-和-6相间" class="headerlink" title="三，width 是 5 和 6相间"></a>三，width 是 5 和 6相间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = []</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">    squareList[i] = &#123;</span><br><span class="line">        <span class="attr">width</span>: widthList[i],</span><br><span class="line">        <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.widht * <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三，垃圾代码，浪费太多内存，画内存图"><a href="#三，垃圾代码，浪费太多内存，画内存图" class="headerlink" title="三，垃圾代码，浪费太多内存，画内存图"></a>三，垃圾代码，浪费太多内存，画内存图</h3><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/squareMemory.png" alt="squareMemory" "></center>



<h3 id="四，借助原型，将12个对象的共有属性放到原型里"><a href="#四，借助原型，将12个对象的共有属性放到原型里" class="headerlink" title="四，借助原型，将12个对象的共有属性放到原型里"></a>四，借助原型，将12个对象的共有属性放到原型里</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = []</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> squarePrototype = &#123;</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">    squareList[i] = <span class="built_in">Object</span>.create(squarePrototype);</span><br><span class="line">    squareList[i].width = widthList[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还是垃圾代码，创建 square 的代码太分散了</span></span><br></pre></td></tr></table></figure>



<h3 id="五，把代码抽离到一个函数里，然后调用函数"><a href="#五，把代码抽离到一个函数里，然后调用函数" class="headerlink" title="五，把代码抽离到一个函数里，然后调用函数"></a>五，把代码抽离到一个函数里，然后调用函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = []</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">width</span>)</span>&#123; <span class="comment">// 此函数为叫做构造函数</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(squarePrototype);</span><br><span class="line">    <span class="comment">// 以 squarePrototype 为原型创建空对象</span></span><br><span class="line">    obj.width = width;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> squarePrototype = &#123;</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">    squareList[i] = createSquare(widthList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六，函数和原型的结合"><a href="#六，函数和原型的结合" class="headerlink" title="六，函数和原型的结合"></a>六，函数和原型的结合</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这段代码 几乎完美</span></span><br><span class="line"><span class="keyword">let</span> squareList = []</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">width</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(createSquare.squarePrototype);</span><br><span class="line">    obj.width = width;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line">createSquare.squarePrototype = &#123; <span class="comment">//把原型放到函数上</span></span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">constructor</span>: createSquare <span class="comment">// 互相引用方便通过原型找到构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">    squareList[i] = createSquare(widthList[i]);</span><br><span class="line">    <span class="built_in">console</span>.log(squareList[i].constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="七，函数和原型（重写）"><a href="#七，函数和原型（重写）" class="headerlink" title="七，函数和原型（重写）"></a>七，函数和原型（重写）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = []</span><br><span class="line"><span class="keyword">let</span> widthList =  [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>)</span>&#123; <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getLength = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&gt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">    squareList[i] = <span class="keyword">new</span> Square(widthList[i]);</span><br><span class="line">    <span class="built_in">console</span>.log(squareList[i].constructor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完美</span></span><br></pre></td></tr></table></figure>

<p>代码六七对比</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-31_12-16-01.png" alt="Snipaste_2021-08-31_12-16-01"></center>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>new X()</strong><ul>
<li>自动创建空对象</li>
<li>自动为空对象关联原型，原型地址指定为 X.prototype</li>
<li>自动将空对象作为 this 关键字运行构造函数</li>
<li>自动 return this</li>
</ul>
</li>
<li><strong>构造函数 X</strong><ul>
<li>X 函数本身负责给对象本身添加属性</li>
<li>X.prototype 对想负责保存对象那个的公用属性</li>
</ul>
</li>
</ul>
<p>题外话 代码规范：</p>
<ul>
<li><p>大小写</p>
<ul>
<li> 所有构造函数（专门用于创建对象的函数）首字母大写</li>
<li> 所有被构造出来的对象，首字母小写</li>
</ul>
</li>
<li><p>词性</p>
<ul>
<li>new 后面的函数，使用名词形式</li>
<li>如 new Person()、new Object()</li>
<li>其他函数，一般使用动词开头</li>
<li>如 createSquare(5)、createElement(‘div’)</li>
<li>…</li>
</ul>
</li>
</ul>
<p>原型公式：**<font color='yellow'>对象._<em>proto</em>_  === 其构造函数.protorype</font>**</p>
<h3 id="Square-最终版（存疑）"><a href="#Square-最终版（存疑）" class="headerlink" title="Square 最终版（存疑）"></a>Square 最终版（存疑）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Square.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getLenth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> Square(<span class="number">5</span>);</span><br><span class="line">square.width;</span><br><span class="line">square.getArea();</span><br><span class="line">square.getLength();</span><br></pre></td></tr></table></figure>



<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆形</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line">Circle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.radius * <span class="number">2</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">&#125;</span><br><span class="line">Circle.prototype.getLength = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="built_in">this</span>.radius, <span class="number">2</span>) * <span class="built_in">Math</span>.PI;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1 = <span class="keyword">new</span> Circle(<span class="number">10</span>);</span><br><span class="line">c1.getArea();</span><br><span class="line">c1.getLength();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长方形</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rect</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="built_in">this</span>.height = height</span><br><span class="line">&#125;</span><br><span class="line">Rect.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height</span><br><span class="line">&#125;</span><br><span class="line">Rect.prototype.getLength = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">this</span>.width + <span class="built_in">this</span>.height) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">r1.getArea()</span><br><span class="line">r1.getLength()</span><br></pre></td></tr></table></figure>



<h2 id="对象分类"><a href="#对象分类" class="headerlink" title="对象分类"></a>对象分类</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>理由一<ul>
<li>有很多对象拥有一样的属性和行为</li>
<li>需要把他们分为同一类</li>
<li>如 square 和 square1</li>
<li>这样创建类似对象的时候就很方便</li>
</ul>
</li>
<li>理由二<ul>
<li>但是还有很多对象拥有其他的属性和行为</li>
<li>所以就需要不同的分类</li>
<li>比如 Square / Circle / Rect 就是不同的分类</li>
<li>Array / Function 也是不同的分类</li>
<li>而 Object 创建出来的对象，是最没有特点的对象</li>
</ul>
</li>
</ul>
<p><strong>类型和类</strong></p>
<p>类型</p>
<blockquote>
<p>类型 JS 数据的分类，有七种</p>
<p>四基两空一对象，String，number，bool，symbol，null，undefined，Object</p>
</blockquote>
<p>类</p>
<blockquote>
<p>类是针对对象的分类, 有无数种</p>
<p>常见的有 Array、Function、Date、RegExp 等</p>
</blockquote>
<h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><p>定义一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//元素为 1，2，3</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">//长度为3</span></span><br></pre></td></tr></table></figure>

<p>数组对象自身的属性</p>
<ul>
<li><p>‘0’ / ‘1’ / ‘2’ / ‘length’</p>
</li>
<li><p>注意，属性名没有数字，只有字符串</p>
</li>
</ul>
<p>数组对象的共用属性</p>
<p>‘push’ / ‘pop’ / ‘shift’ / ‘unshift’ / ‘join’  等</p>
<h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>定义一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>)</span>&#123;<span class="keyword">return</span> x + y;&#125;</span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;<span class="keyword">return</span> x + y&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x+y</span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;return x+y&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>函数对象自身属性</p>
<p>‘name’ / ‘length’</p>
<p>函数对象共用属性</p>
<p>‘call’ / ‘apply’ / ‘bind’ 等</p>
<h3 id="JS-终极一问"><a href="#JS-终极一问" class="headerlink" title="JS 终极一问"></a>JS 终极一问</h3><p>window 是谁构造的</p>
<blockquote>
<p>Window</p>
<p>可以通过 constructor 属性看出构造者</p>
<p>验证：window.constructor</p>
<p>window._<em>proto</em>_ === Windows.prototype</p>
</blockquote>
<p>window.Object 是谁构造的</p>
<blockquote>
<p>window.Funcion</p>
<p>因为所有函数都是 window.Function 构造的</p>
<p>验证：window.Object.constructor === window.Function</p>
</blockquote>
<p>window.Function 是谁构造的</p>
<blockquote>
<p>window.Function</p>
<p>因为所有函数都是 window.Function 构造的</p>
<p>自己构造的自己？不是这样的，这是『上帝』的安排</p>
<p>浏览器构造了 Function，然后指定它的构造者是自己</p>
<p>验证：window.Function.constructor === window.Function</p>
</blockquote>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>类是用于创建对象的模板。他们用代码封装数据以处理该数据。 ES6新语法</p>
<p>学习<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes">class</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#ECMAScript_6%E6%96%B0%E6%A0%87%E8%AE%B0">对象初始化</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a></p>
<p><code>constructor</code> 是一种用于创建和初始化 class 创建的对象的特殊方法. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">width</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>class 引入更多概念</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> x = <span class="number">1</span>; <span class="comment">// 静态</span></span><br><span class="line">	width = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">width</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">get</span> <span class="title">area2</span>()&#123; <span class="comment">// 只读属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>class 重写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重写 Circle</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="built_in">this</span>.radius,<span class="number">2</span>) * <span class="built_in">Math</span>.PI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.radius * <span class="number">2</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c2 = <span class="keyword">new</span> Circle(<span class="number">5</span>);</span><br><span class="line">c2.radius;</span><br><span class="line">c2.getArea();</span><br><span class="line">c2.getLength();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写 Rect</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">width, height</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.width + <span class="built_in">this</span>.height) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Rect(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">r2.width;</span><br><span class="line">r2.height;</span><br><span class="line">r2.getArea();</span><br><span class="line">r2.getLength();</span><br></pre></td></tr></table></figure>



<p><strong>class 中两种函数写法的区别</strong></p>
<p>这两种写法的意思完全不一样：</p>
<p>语法1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params">name</span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 等价于</span></span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;&#125; </span><br><span class="line">    <span class="comment">// 注意，一般我们不在这个语法里使用箭头函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>语法2：注意冒号变成了等于号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  sayHi = <span class="function">(<span class="params">name</span>)=&gt;</span>&#123;&#125; <span class="comment">// 注意，一般我们不在这个语法里使用普通函数，多用箭头函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.sayHi = <span class="function">(<span class="params">name</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>推荐阅读</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/35279244">方应杭：你可以不会 class，但是一定要学会 prototype</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23987456">方应杭：JS 的 new 到底是干什么的？</a></li>
<li><a href="https://www.zhihu.com/question/56770432/answer/315342130">方应杭：JS 中 <strong>proto</strong> 和 prototype 存在的意义是什么？</a></li>
<li><a href="http://frankfang.github.io/es-6-tutorials/">饥人谷整理的 ES6 所有新特性</a></li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS对象基本用法</title>
    <url>/2021/08/25/50/</url>
    <content><![CDATA[<h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>对象就是一组”键值对“（key-value）的集合，是一种<strong>无序</strong>的复合数据集合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">name</span>: frank, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>键名都是字符串</strong>，不是标识符，可以包含任意字符（必须加上引号）</li>
<li>引号可以省略，省略后键名必须符合标识符的规则</li>
<li>所有键名都会被自动转成字符串</li>
</ul>
<p>特殊键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="number">3.2</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="number">1e2</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="number">1e-2</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="number">.234</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="number">0xFF</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// 列出 obj 所有的 key</span></span><br><span class="line">=&gt; [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;255&quot;</span>, <span class="string">&quot;3.2&quot;</span>, <span class="string">&quot;0.01&quot;</span>, <span class="string">&quot;0.234&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>用变量做键名 用 <code>[ ]</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">p1</span>: <span class="string">&#x27;frank&#x27;</span> <span class="comment">// 键名为 &#x27;p1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [p1]: <span class="string">&#x27;frank&#x27;</span> <span class="comment">// 键名为 name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不加 [] 的键名会自动变成字符串</span></span><br><span class="line"><span class="comment">// 加了 [] 则会当作变量求值</span></span><br><span class="line"><span class="comment">// 值如果不是字符串，则会自动变成字符串</span></span><br><span class="line"><span class="keyword">var</span> obj &#123;</span><br><span class="line">    [<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>]: <span class="string">&#x27;shi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br></pre></td></tr></table></figure>

<hr>


<h4 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h4><blockquote>
<ul>
<li>JS中每一个对象都一个隐藏属性 _<em>proto</em>_</li>
<li>这个隐藏属性存储着<strong>共有属性组成的对象</strong>的地址</li>
<li>这个共<strong>有属性组成的对象</strong>叫做原型</li>
<li>也就是说，隐藏属性存储着原型的的地址</li>
</ul>
</blockquote>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐藏属性为 __proto__</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.soString() <span class="comment">// 不报错</span></span><br><span class="line">因为 obj 的隐藏属性 对应的对象 上有 toString() </span><br></pre></td></tr></table></figure>

<hr>


<h4 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h4><p><strong>delete obj.xxx 或 delete obj[‘xxx’]</strong></p>
<blockquote>
<p>可删除 obj 的 xxx 属性</p>
<p>区分 【属性值为 undefined】和【不含属性名】</p>
</blockquote>
<p><strong>不含属性名</strong></p>
<blockquote>
<p>‘xxx’ in obj === false</p>
</blockquote>
<p><strong>含有属性名，但是值为 undefined</strong></p>
<blockquote>
<p>‘xxx’ in obj &amp;&amp; obj.xxx === undefined </p>
</blockquote>
<p><strong>注意 obj.xxx === undefined</strong></p>
<blockquote>
<p>不能断定 ‘xxx‘ 是否为 obj 的属性</p>
</blockquote>
<hr>


<h4 id="读取属性"><a href="#读取属性" class="headerlink" title="读取属性"></a>读取属性</h4><p><strong>查看属性</strong></p>
<blockquote>
<p>obj[‘key’]   </p>
<p>obj[key]</p>
<p>obj.key</p>
<p><strong>obj.name 等价于 obj[‘name’] 不等价于 obj[name]</strong>  这里的 name 是字符串，不是变量 </p>
</blockquote>
<p><strong>查看自身所有属性</strong></p>
<blockquote>
<p>Object.keys(obj);</p>
</blockquote>
<p><strong>查看自身 + 共有属性</strong></p>
<blockquote>
<p>console.dir(obj)</p>
<p>或者依次用 Object.keys 打印出 obj._<em>proto</em>_</p>
</blockquote>
<p><strong>判断一个属性是自身的还是共有</strong></p>
<blockquote>
<p>obj.hasOwnProperty(‘toString’)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="built_in">Object</span>.values(obj);</span><br><span class="line"><span class="built_in">Object</span>.entries(obj);</span><br><span class="line"><span class="built_in">console</span>.dir(obj);</span><br></pre></td></tr></table></figure>

<p><strong>‘name’ in  obj 和 obj.hasOwnPrototy(‘name’) 区别</strong></p>
<blockquote>
<p>前者判断 obj 是否含有 name 属性名，但不会区分自身属性和共有属性</p>
<p>后者判断 obj 的属性 name 是自身的属性还是共有属性，返回 false，不是自身属性；发返回 ture，是自身属性。</p>
</blockquote>
<hr>
#### 原型

<p><strong>每个对象都有原型</strong></p>
<blockquote>
<p>原型里存着对象的共有属性</p>
<p>比如 obj 的原型就是一个对象</p>
<p>obj.__proto__存着这个对象的地址</p>
<p>这个对象里有 toString  / constructor / valueOf 等属性</p>
</blockquote>
<p><strong>对象的原型也是对象</strong></p>
<blockquote>
<p>所以对象的原型也有原型</p>
<p>obj = {} 的原型即为所有对象的原型</p>
<p>这个原型包含所有对象的共有属性，是<strong>对象的根</strong></p>
<p>这个原型也有原型，是 null。 console.log(_<em>proto</em><em>._<em>proto</em></em>)</p>
</blockquote>
<hr>

<h4 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h4><p><strong>直接赋值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>&#125; <span class="comment">// name 是字符串</span></span><br><span class="line">obj.name = <span class="string">&#x27;frank&#x27;</span> <span class="comment">// name 是字符串</span></span><br><span class="line">obj[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;frank&#x27;</span></span><br><span class="line">❌obj[name] = <span class="string">&#x27;frank&#x27;</span> <span class="comment">// 错，因 name 不确定</span></span><br><span class="line">obj[<span class="string">&#x27;na&#x27;</span> + <span class="string">&#x27;me&#x27;</span>] = <span class="string">&#x27;frank&#x27;</span></span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&#x27;name&#x27;</span>; obj[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;frank&#x27;</span></span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&#x27;name&#x27;</span>;  ❌ obj.key = <span class="string">&#x27;frank&#x27;</span> <span class="comment">// 错</span></span><br><span class="line">因为 obj.key 等价于 obj[<span class="string">&#x27;key&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>批量赋值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(obj.&#123;<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="修改或增加共有属性"><a href="#修改或增加共有属性" class="headerlink" title="修改或增加共有属性"></a>修改或增加共有属性</h4><p><strong>无法通过自身修改或增加共有属性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;，obj2 = &#123;&#125;  <span class="comment">// 共有toString</span></span><br><span class="line">obj.toString = <span class="string">&#x27;xxxx&#x27;</span> <span class="comment">// 只会改 obj1 自身的属性</span></span><br><span class="line">obj2.toString 还是在原型上</span><br></pre></td></tr></table></figure>

<p><strong>偏要修改共有属性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj1.__proto__.toString = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 不推荐使用__proto__Object.prototype.toString = &#x27;xxx&#x27;;一般不要修改原型</span></span><br></pre></td></tr></table></figure>

<h4 id="修改隐藏属性"><a href="#修改隐藏属性" class="headerlink" title="修改隐藏属性"></a>修改隐藏属性</h4><p><strong>不推荐使用_<em>proto</em></strong>_</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = &#123;<span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> common = &#123;<span class="attr">kind</span>: <span class="string">&#x27;human&#x27;</span>&#125;;</span><br><span class="line">obj.__proto__ = common;</span><br><span class="line">obj2.__proto__ = common;</span><br></pre></td></tr></table></figure>

<p><strong>强烈推荐使用 Object.create</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> persion = <span class="built_in">Object</span>.cteate(common); <span class="comment">// 以 common 为原型创建 persion 对象</span></span><br><span class="line">persion.name = <span class="string">&#x27;frank&#x27;</span>; <span class="comment">// 然后添加属性，或批量添加</span></span><br><span class="line"><span class="keyword">let</span> persion2 = <span class="built_in">Object</span>.create(common, &#123; <span class="comment">// </span></span><br><span class="line">    <span class="attr">name</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;jack&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本语法</title>
    <url>/2021/08/24/11/</url>
    <content><![CDATA[<h4 id="表达式与语句"><a href="#表达式与语句" class="headerlink" title="表达式与语句"></a>表达式与语句</h4><p>表达式（expression），指一个为了得到返回值的计算式。</p>
<blockquote>
<p>1 + 2 表达式的<strong>值</strong>为3</p>
<p>add(1 + 2) 表达式的值为函数的返回值</p>
<p>console.log 表达式的值为函数本身</p>
<p>console.log(3) 表达式的值为<strong>undefined</strong></p>
</blockquote>
<p>语句（statement），是为了完成某种任务而进行的操作，例如赋值语句<code>var a = 1 + 3;</code></p>
<blockquote>
<p>var a = 1 是一个语句</p>
<p>var a = 1 + 3 </p>
<p>var b = ‘abc’</p>
</blockquote>
<p>二者区别</p>
<blockquote>
<p>表达式一般都有值，语句可能有也可能没有</p>
<p>语句一般不会改变环境（声明、赋值）</p>
<p>以上并不绝对</p>
<p>语句主要为了进行某种操作，一般情况下不需要返回值；表达式则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p>
<p>表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。</p>
</blockquote>
<hr>

<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>指的是用来识别各种值的合法名称，最常见的标识符就是变量名，以及函数名。</p>
<p>JavaScript 语言的标识符对大小写敏感，所以<code>a</code>和<code>A</code>是两个不同的标识符。</p>
<p>命名规则：</p>
<ul>
<li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（<code>$</code>）和下划线（<code>_</code>）。</li>
<li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字<code>0-9</code>。</li>
</ul>
<blockquote>
<p>JavaScript  有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p>
</blockquote>
<hr>



<h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p><code>if</code>结构先判断一个表达式的布尔值（true or false），然后根据布尔值的真伪，执行不同的语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">  <span class="comment">// 语句</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (表达式)&#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (表达式)&#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>

<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>多个 <code>if ...else</code> 连在一起使用的时候，可以转为是使用 <code>switch</code> 结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;banana&quot;</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:<span class="string">&quot;nothing&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// switch 语句部分和 case 语句部分，都可以使用表达式。</span></span><br></pre></td></tr></table></figure>



<hr>

<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(条件) ？ 表达式<span class="number">1</span> : 表达式<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> even = (n % <span class="number">2</span> === <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 如果n可以被2整除，则even等于true，否则等于false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&#x27;数字&#x27;</span> + n + <span class="string">&#x27;是&#x27;</span> + (n % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">&#x27;偶数&#x27;</span> : <span class="string">&#x27;奇数&#x27;</span>);</span><br></pre></td></tr></table></figure>



<hr>

<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑与运算（&amp;&amp;）是 AND 布尔操作。只有两个操作数都为 true 时，才返回 true，否则返回 false。具体描述如表所示。</p>
<table>
<thead>
<tr>
<th>第一个操作数</th>
<th>第二个操作数</th>
<th>运算结果</th>
</tr>
</thead>
<tbody><tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody></table>
<p> 逻辑与是一种短路逻辑，如果左侧表达式为 false，则直接短路返回结果，不再运算右侧表达式。运算逻辑如下：</p>
<ul>
<li>第 1 步：计算第一个操作数（左侧表达式）的值。</li>
<li>第 2 步：检测第一个操作数的值。如果左侧表达式的值可转换为 false（如 null、undefined、NaN、0、””、false），那么就会结束运算，<strong>直接返回第一个操作数的值</strong>。</li>
<li>第 3 步：如果第一个操作数可以转换为 true，则计算第二个操作数（右侧表达式）的值。</li>
<li>第 4 步：返回第二个操作数的值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (&#123;&#125; &amp;&amp; <span class="literal">true</span>));  <span class="comment">//返回第二个操作数的值  true的类型：布尔型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="literal">true</span> &amp;&amp; &#123;&#125;));  <span class="comment">//返回第二个操作数的值  &#123;&#125;的类型：对象</span></span><br><span class="line"><span class="built_in">console</span> &amp;&amp; <span class="built_in">console</span>.log &amp;&amp; <span class="built_in">console</span>.log(hi) <span class="comment">// 返回 hi</span></span><br><span class="line">fn &amp;&amp; fn() <span class="comment">// 常见写法 如果fn存在调用fn()</span></span><br></pre></td></tr></table></figure>

<hr>
**辑或运**算`||`是布尔 OR 操作。如果两个操作数都为 true，或者其中一个为 true，就返回 true，否则就返回 false。


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = a || <span class="number">100</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    a = a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a = <span class="number">100</span> <span class="comment">// 保底值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>


<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p><code>While</code> 语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例 死循环</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">while</span> (a !== <span class="number">1</span>) &#123;</span><br><span class="line">    cconsole.log(a);</span><br><span class="line">    a = a + <span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为浮点数不精确</span></span><br></pre></td></tr></table></figure>



<hr>


<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 条件; 递增表达式) &#123;</span><br><span class="line">    语句</span><br><span class="line">&#125;</span><br><span class="line">先执行 初始化表达式</span><br><span class="line">然后判断 条件</span><br><span class="line">如果为 真，执行循环体，然后执行 递增表达式</span><br><span class="line">如果为 假，直接退出循环。</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i + <span class="string">&#x27;随机数：&#x27;</span> + <span class="built_in">Math</span>.random());</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;<span class="comment">// 输出5个5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/wl0804/p/11987833.html">参考</a></p>
<hr>


<h4 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h4><p>for/in 语句是 for 语句的一种特殊形式。<a href="http://c.biancheng.net/view/5527.html">参考</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( [<span class="keyword">var</span>] variable <span class="keyword">in</span> &lt;object | array)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* variable 表示一个变量，可以在其前面附加 var 语句，用来直接声明变量名。in 后面是一个对象或数组类型的表达式。在遍历对象或数组过程中，把或取的每一个值赋值给 variable。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后执行 statement 语句，其中可以访问 variable 来读取每个对象属性或数组元素的值。执行完毕，返回继续枚举下一个元素，以此类推知道所有元素都被枚举为止。</span></span><br><span class="line"><span class="comment">对于数组来说，值是数组元素的下标；对于对象来说，值是对象的属性名或方法名。*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 for/in 语句遍历数组，并枚举每个元素及其值。</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&quot;0&quot;</span>,[<span class="literal">false</span>],&#123;&#125;];  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> a) &#123;  </span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;a[&quot;</span>+n+<span class="string">&quot;] = &quot;</span> + a[n] + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>


<h4 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h4><p>break 语句能够结束当前 for、for/in、while、do/while 或者 switch语句的执行。</p>
<p>continue 语句用在循环结构内，用于跳过本次循环，继续执行下一次循环。</p>
<hr>


<h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><p>标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo: &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span> foo;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;本行不会输出&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// m 一个标签，内容为1</span></span><br><span class="line">&#123;<span class="attr">foo</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>参考自<a href="https://wangdoc.com/javascript/basic/grammar.html#%E8%AF%AD%E5%8F%A5">网道 JavaScript教程</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数组</title>
    <url>/2021/09/05/59/</url>
    <content><![CDATA[<h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><p><code>Array</code> 对象是用于构造数组的全局<strong>对象</strong>。</p>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// 长度</span></span><br></pre></td></tr></table></figure>

<h4 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="string">&#x27;1, 2, 3&#x27;</span></span><br><span class="line">arr1.split(<span class="string">&#x27;,&#x27;</span>) <span class="comment">// 将字符串用逗号隔开，转化为数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">arr2.split(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 或用空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="number">0</span>:<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;d&#x27;</span>,<span class="attr">length</span>:<span class="number">4</span>&#125;)</span><br><span class="line">[ <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span> ]</span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="number">0</span>:<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;d&#x27;</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;)</span><br><span class="line">[ <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪数组的原型链中没有数组的原型</span></span><br><span class="line">array1 = &#123;<span class="number">0</span>:<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>,<span class="attr">length</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取的数组是 伪数组</span></span><br><span class="line"><span class="keyword">let</span> divArray = <span class="built_in">Array</span>.from(divList)</span><br><span class="line"><span class="comment">// 转化为数组</span></span><br></pre></td></tr></table></figure>

<h4 id="续"><a href="#续" class="headerlink" title="续"></a>续</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 合并两个数组，得到新数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = arr1.concat(arr2)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 截取一个数组的一部分</span></span><br><span class="line">arr3.slice(<span class="number">1</span>) <span class="comment">// 从第二个元素开始</span></span><br><span class="line"><span class="keyword">let</span> arr4 = arr3.slice(<span class="number">2</span>)</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">arr5 = arr3.alice(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 相当于复制数组</span></span><br><span class="line"><span class="comment">// 注意 JS 只提供浅拷贝</span></span><br></pre></td></tr></table></figure>



<h3 id="删除数组"><a href="#删除数组" class="headerlink" title="删除数组"></a>删除数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>]</span><br><span class="line">arr <span class="comment">// [empty,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">// 长度没变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 length</span></span><br><span class="line">arr.length = <span class="number">1</span></span><br><span class="line">arr <span class="comment">//[&#x27;a&#x27;]</span></span><br><span class="line"><span class="comment">// 不要随便修改 length</span></span><br></pre></td></tr></table></figure>

<h4 id="删除头部元素"><a href="#删除头部元素" class="headerlink" title="删除头部元素"></a>删除头部元素</h4><p><code>arr.shift()</code> arr 被修改，并返回被删元素</p>
<h4 id="删除尾部元素"><a href="#删除尾部元素" class="headerlink" title="删除尾部元素"></a>删除尾部元素</h4><p><code>arr.pop()</code> arr 被修改，并返回被删元素</p>
<h4 id="删除中间元素"><a href="#删除中间元素" class="headerlink" title="删除中间元素"></a>删除中间元素</h4><p><code>arr.splice(index, 1)</code> 删除 index 的一个元素</p>
<p><code>arr.splice(index, 1, ’x’)</code> 并在删除位置添加 <code>‘x’</code></p>
<p><code>arr.splice(index, 1, ’x’, ’y’)</code> 并在删除位置添加 <code>‘x’, &#39;y&#39;</code></p>
<h3 id="查看所有元素"><a href="#查看所有元素" class="headerlink" title="查看所有元素"></a>查看所有元素</h3><h4 id="查看所有属性名"><a href="#查看所有属性名" class="headerlink" title="查看所有属性名"></a>查看所有属性名</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.x = <span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="built_in">Object</span>.keys(arr)</span><br><span class="line"><span class="built_in">Object</span>.values(arr)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;$&#123;keys&#125;: $&#123;arr[key]&#125;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看数字（字符串）属性名和值"><a href="#查看数字（字符串）属性名和值" class="headerlink" title="查看数字（字符串）属性名和值"></a>查看数字（字符串）属性名和值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span>: <span class="subst">$&#123;[i]&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>: <span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="forEach原理"><a href="#forEach原理" class="headerlink" title="forEach原理"></a><strong>forEach原理</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">array,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">    fn(array[i], i, array); </span><br><span class="line">    <span class="comment">// 获取数组每一项，把数值传到 fn</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forEach([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">x, y, z</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, z);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// forEach 用 for 访问 array 的每一项</span></span><br><span class="line"><span class="comment">// 对每一项调用 fn(array[i], i, array)</span></span><br></pre></td></tr></table></figure>



<h3 id="查看单个属性"><a href="#查看单个属性" class="headerlink" title="查看单个属性"></a>查看单个属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h4 id="索引越界"><a href="#索引越界" class="headerlink" title="索引越界"></a>索引越界</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr[arr.legnth] === undefinedarr[-<span class="number">1</span>] === <span class="literal">undefined</span><span class="comment">// 示例let arr = [1,2,3,4,5,6,7]for(let i = 0; i&lt;= arr.length; i++)&#123;    console.log(arr[i].toString());&#125;// 报错: Cannot read property &#x27;toString&#x27; of undefined// 意思是你读取了 undefined 的 toString 属性// 不是 toString 的 undefined// x.toString() 其中 x 如果是 undefined 就报这个错</span></span><br></pre></td></tr></table></figure>

<h4 id="查找某个元素是否在数组里-indexOf"><a href="#查找某个元素是否在数组里-indexOf" class="headerlink" title="查找某个元素是否在数组里 indexOf"></a>查找某个元素是否在数组里 indexOf</h4><p><code>arr.indexOf(item)</code> 存在换回索引,否则返回 -1</p>
<h4 id="使用条件查找元素-find"><a href="#使用条件查找元素-find" class="headerlink" title="使用条件查找元素 find"></a>使用条件查找元素 find</h4><p><code>arr.find(item =&gt; item % 2 === 0)</code> 找第一个偶数</p>
<h4 id="使用条件查找元素的索引-findIndex"><a href="#使用条件查找元素的索引-findIndex" class="headerlink" title="使用条件查找元素的索引 findIndex"></a>使用条件查找元素的索引 findIndex</h4><p><code>arr.findIndex(item =&gt; item % 2 === 0)</code> 找第一个偶数的索引</p>
<h3 id="增加数组中的元素"><a href="#增加数组中的元素" class="headerlink" title="增加数组中的元素"></a>增加数组中的元素</h3><h4 id="在尾部添加元素-push"><a href="#在尾部添加元素-push" class="headerlink" title="在尾部添加元素 push"></a>在尾部添加元素 push</h4><p><code>arr.push(newItem)</code> 修改数组，返回新长度</p>
<p><code>arr.push(item1, item2)</code> 修改数组，返回新长度</p>
<h4 id="在头部添加元素-unshitf"><a href="#在头部添加元素-unshitf" class="headerlink" title="在头部添加元素 unshitf"></a>在头部添加元素 unshitf</h4><p><code>arr.unshift(newItem)</code> 修改数组，返回新长度</p>
<p><code>arr.unshift(item1, item2)</code> 修改数组，返回新长度</p>
<h4 id="在中间添加元素-splice"><a href="#在中间添加元素-splice" class="headerlink" title="在中间添加元素 splice"></a>在中间添加元素 splice</h4><p><code>arr.splice(index, 0, ‘x’)</code> 在 index 出插入 <code>’x’</code></p>
<p><code>arr.splice(index. 0, ‘x’, ‘y’)</code> 插入 <code>‘X’,’y’</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototypr.splice() MDN</a></p>
<h3 id="修改数组中的元素"><a href="#修改数组中的元素" class="headerlink" title="修改数组中的元素"></a>修改数组中的元素</h3><h4 id="反转顺序-reverse"><a href="#反转顺序-reverse" class="headerlink" title="反转顺序 reverse"></a>反转顺序 reverse</h4><p><code>arr.reverse()</code>  修改原数组</p>
<h4 id="自定义顺序-sort"><a href="#自定义顺序-sort" class="headerlink" title="自定义顺序 sort"></a>自定义顺序 sort</h4><p><code>arr.sort((a, b)) =&gt; a-b)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例let arr = [1,4,2,3,5]arr.sort() // [1,2,3,4,5]arr.sort(function(a, b)&#123;    console.log(&#x27;a:&#x27;+ a)    console.log(&#x27;b:&#x27;+ b)    if(a&gt;b)&#123;        return 1    &#125;else if(a===b)&#123;        return 0    &#125;else&#123;        return -1    &#125;&#125;)// 等价于arr.sort((a, b) =&gt; a-b) </span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [    &#123;<span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">score</span>: <span class="number">99</span>&#125;,    &#123;<span class="attr">name</span>: <span class="string">&#x27;erik&#x27;</span>, <span class="attr">score</span>: <span class="number">96</span>&#125;,    &#123;<span class="attr">name</span>: <span class="string">&#x27;evan&#x27;</span>, <span class="attr">score</span>: <span class="number">100</span>&#125;]arr1.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;    <span class="keyword">if</span>(a.score &gt; b.score)&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;    <span class="keyword">else</span> <span class="keyword">if</span>(a.score === b.score)&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;    <span class="keyword">else</span>&#123;<span class="keyword">return</span> -<span class="number">1</span>&#125;&#125;)<span class="comment">// 等价于arr1.sort((a, b) =&gt; a-b)</span></span><br></pre></td></tr></table></figure>



<p>反转字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;abcdefg&#x27;</span>;s.plit(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="数组变换"><a href="#数组变换" class="headerlink" title="数组变换"></a>数组变换</h3><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-01_19-41-33.png" alt="Snipaste_2021-09-01_19-41-33" width="800px"></center>



<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map() MDN</a></p>
<p>map() 方法<strong>返回一个新数组</strong>，数组中的元素为原始数组元素调用函数处理后的值。</p>
<p>map() 方法按照原数组元素顺序依次处理元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]<span class="comment">// 将数组每个值平方arr1.map((item) =&gt; (item * item))// 等价于for(let i = 0; i &lt; arr1.length; i++)&#123;    arr1[i] = arr1[i] * arr1[i]&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter() MDN</a> </p>
<p>filter() 方法<strong>返回一个新的数组</strong>，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]<span class="comment">// 偶数arr1.filter(item =&gt; item % 2 === 0)// 返回数组元素长度大于6let words = [&#x27;spray&#x27;, &#x27;limit&#x27;, &#x27;elite&#x27;, &#x27;exuberant&#x27;, &#x27;destruction&#x27;, &#x27;present&#x27;];words.filter(word =&gt; word.length &gt; 6)</span></span><br></pre></td></tr></table></figure>



<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">Array.prototype.reduce.() MDN</a></p>
<p>reduce() 方法对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为<strong>单个返回值</strong>。</p>
<p>reduce() 可以作为一个高阶函数，用于函数的 compose。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]<span class="comment">// 累加let sum = 0;for(let i = 0; i &lt; arr.length; i++)&#123;    sum += arr[i]&#125; consloe.log(sum)// 等价于arr.reduce((sum, item) =&gt; sum + item, 0)// 从5开始：5 + 1 + 2 + 3 + 4 + 5 + 6 = 26arr.reduce((sum, item) =&gt; sum + item, 5)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let arr = [1, 2, 3, 4, 5, 6]// 平方 等价于 arr.map(item =&gt; Math.pow(item, 2))arr.reduce((result, item) =&gt; &#123;return result.concat(item * item)&#125;, [])</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item %<span class="number">2</span> === <span class="number">0</span>)<span class="comment">// 等价于arr.reduce((result, item) =&gt; &#123;    if(item % 2 === 0)&#123;        return result    &#125;else&#123;        return result.concat(item)    &#125;&#125;, [])arr.reduce((result, item) =&gt; item % 2 === 1 ? result : result.concat(item), [])arr.reduce((result, item) =&gt; item % 2 === 1 ? result.concat([]) : result.concat(item), [])arr.reduce((result, item) =&gt; result.concat(item % 2 ? [] : item), [])</span></span><br></pre></td></tr></table></figure>



<p><strong>面试题: 数据变换</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [    &#123;名称: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="literal">null</span>&#125;,    &#123;名称: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">parent</span>: <span class="number">1</span>&#125;,    &#123;名称: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">parent</span>: <span class="number">1</span>&#125;]<span class="comment">// 数组变成对象&#123;    id: 1, 名称: &#x27;动物&#x27;, children: [        &#123;id: 2, 名称: &#x27;狗&#x27;, children: null&#125;,        &#123;id: 3, 名称: &#x27;猫&#x27;, children: null&#125;    ]&#125;// 答案arr.reduce((result, item) =&gt; &#123;    if(item.parent === null)&#123;        result.id = item.id        result[&#x27;名称&#x27;] = item[&#x27;item&#x27;]    &#125;else&#123;        result.children.push(item)        delete item.parent        item.chrldren = null    &#125;    return result&#125;, &#123;id: null, children: []&#125;)</span></span><br></pre></td></tr></table></figure>



<p><video src="C:\Users\34172\Desktop\Works\饥人谷\notes\JS\videos\面试题【数据变换】.mp4"></video></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue/Typescript 装饰器</title>
    <url>/2021/11/12/45/</url>
    <content><![CDATA[<p>TS 要想使用 Vue 组件得用 class，配合装饰器使用。</p>
<p>需要引用 <a href="https://github.com/kaorun343/vue-property-decorator">vue-property-decorator</a></p>
<span id="more"></span>

<br />

<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h4 id="component"><a href="#component" class="headerlink" title="@component"></a><code>@component</code></h4><p><a href="https://class-component.vuejs.org/guide/class-component.html">官方文档</a></p>
<p><strong>js 代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;js&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Types&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      type: &#x27;-&#x27; // - 支出，+ 收入</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    selectType(type) &#123; // type 只能是 ‘-’ 或 ‘+’</span><br><span class="line">      if (type !== &#x27;-&#x27; &amp;&amp; type !== &#x27;+&#x27;) &#123;</span><br><span class="line">        throw new Error(&#x27;type is unknown&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      this.type = type</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>ts 代码：</strong></p>
<p>需要引入 <code>vue-property-decorator</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import &#123;Component&#125; from &#x27;vue-property-decorator&#x27;;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export default class Types extends Vue &#123;</span><br><span class="line">  type = &#x27;-&#x27;;</span><br><span class="line">  selectType(type: string): void &#123; // type 只能是 ‘-’ 或 ‘+’</span><br><span class="line">    if (type !== &#x27;-&#x27; &amp;&amp; type !== &#x27;+&#x27;) &#123;</span><br><span class="line">      throw new Error(&#x27;type is unknown&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Prop"><a href="#Prop" class="headerlink" title="@Prop"></a><code>@Prop</code></h4><p><a href="https://github.com/kaorun343/vue-property-decorator">官方文档</a></p>
<p> <code>@Prop(options: (PropOptions | Constructor[] | Constructor) = &#123;&#125;)</code> decorator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; Vue, Component, Prop &#125; from &#x27;vue-property-decorator&#x27;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export default class YourComponent extends Vue &#123;</span><br><span class="line">  @Prop(Number) readonly propA: number | undefined</span><br><span class="line">  @Prop(&#123; default: &#x27;default value&#x27; &#125;) readonly propB!: string</span><br><span class="line">  @Prop([String, Boolean]) readonly propC: string | boolean | undefined</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>is equivalent to</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&#x27;js&#x27;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    propA: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">    &#125;,</span><br><span class="line">    propB: &#123;</span><br><span class="line">      default: &#x27;default value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: [String, Boolean],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>demo：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import &#123;Component&#125; from &#x27;vue-property-decorator&#x27;;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export default class Types extends Vue &#123;</span><br><span class="line"></span><br><span class="line"> @Prop(Number) xxx: number | undefined;</span><br><span class="line">    // Prop 告诉 Vue，xxx 不是 data 而是 prop</span><br><span class="line">    // Number 告诉 Vue，xxx 运行时是个 number</span><br><span class="line">    // xxx 是属性名</span><br><span class="line">    // number | undefined 告诉 TS xxx 的编译时类型</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>demo2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import &#123;Component, Prop&#125; from &#x27;vue-property-decorator&#x27;;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export default class FormItem extends Vue &#123;</span><br><span class="line">  @Prop(&#123;default: &#x27;&#x27;&#125;) readonly value!: string;</span><br><span class="line">  @Prop(&#123;required: true&#125;) fieldName!: string;</span><br><span class="line">  @Prop() placeholder?: string;</span><br><span class="line"></span><br><span class="line">  onValueChange(value: string): void &#123;</span><br><span class="line">    this.$emit(&#x27;update:value&#x27;, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Vue-组件的三种方式（单文件组件）"><a href="#Vue-组件的三种方式（单文件组件）" class="headerlink" title="Vue 组件的三种方式（单文件组件）"></a>Vue 组件的三种方式（单文件组件）</h2><ol>
<li><p>用 JS 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123; data, props, methods, created, ...&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用 TS 类 <code>&lt;script lang=&quot;ts&quot;&gt;</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX</span> <span class="keyword">extends</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line">    <span class="attr">xxx</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="meta">@Prop</span>(<span class="built_in">Number</span>) xxx: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用 JS 类 <code>&lt;script lang=&quot;js&quot;&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX</span> <span class="keyword">extends</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line">    xxx = <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的诞生</title>
    <url>/2021/08/22/39/</url>
    <content><![CDATA[<h2 id="JavaScript的历史"><a href="#JavaScript的历史" class="headerlink" title="JavaScript的历史"></a>JavaScript的历史</h2><p>JavaScript（简称“JS”）  是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发 Web 页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p>
<p>1995年由于网景公司需要做出一款比 Java 还要简单的脚本语言，但是还要于Java相似。这时刚入职没多久的 <strong>Brendan Eich</strong> 就被安排了这项任务。</p>
<p><strong>1995年5月</strong>，<strong>Brendan Eich</strong>只用了10天，就设计完成了这种语言的第一版。</p>
<center><img src="https://ss2.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/baike/w%3D249/sign=5801118fad51f3dec3b2be60adeef0ec/838ba61ea8d3fd1f84237b7f324e251f95ca5f49.jpg"></center>

<p>1996年11月，网景正式向 ECMA（欧洲计算机制造商协会）提交语言标准。1997年6月，ECMA以JavaScript语言为基础制定了ECMAScript 标准规范ECMA-262。JavaScript成为了ECMAScript最著名的实现之一。除此之外，ActionScript 和 JScript 也都是ECMAScript 规范的实现语言。尽管JavaScript作为给非程序人员的脚本语言，而非作为给程序人员的脚本语言来推广和宣传，但是 JavaScript 具有非常丰富的特性。</p>
<h2 id="JavaScrip-特点"><a href="#JavaScrip-特点" class="headerlink" title="JavaScrip 特点"></a>JavaScrip 特点</h2><p>一般来说，完整的 JavaScript 包括以下几个部分:</p>
<ul>
<li>ECMAScript，描述了该语言的语法和基本对象</li>
<li>文档对象模型 DOM，描述处理<strong>网页内容</strong>的方法和接口</li>
<li>浏览器对象模型 BOM 浏览器对象模型，描述与<strong>浏览器</strong>进行交互的方法和接口</li>
</ul>
<p>JavaScript的基本特点如下:</p>
<ul>
<li>是一种解释性脚本语言（代码不进行预编译）。</li>
<li>主要用来向HTML页面添加<strong>交互行为</strong>。</li>
<li>可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。</li>
</ul>
<p>JavaScript常用来完成以下任务:</p>
<ul>
<li>嵌入动态文本于HTML页面</li>
<li>对浏览器事件作出响应</li>
<li>读写HTML元素</li>
<li>在数据被提交到服务器之前验证数据</li>
<li>检测访客的浏览器信息</li>
<li>控制 cookie，包括创建和修改等</li>
</ul>
<p>JavaScript 语法有多个来源：</p>
<ul>
<li>基本语法：借鉴 C语言和 Java 语言。</li>
<li>数据机构：借鉴 Java语言，包括将值分为原始值和对象两大类。</li>
<li>函数的用发：借鉴 Scheme语言 （Smalltalk的一种变种）。</li>
<li>正则表达式：借鉴 Perl语言。</li>
<li>字符串和数组处理：借鉴 Python语言。</li>
</ul>
<p>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来JavaScript的一个显著特点：对于其他语言，你需要学习语言的各种功能，而对于JavaScript，你常常需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript的编程风格是函数式编程和面向对象编程的一种混合体。</p>
<h2 id="JavaScript的缺陷"><a href="#JavaScript的缺陷" class="headerlink" title="JavaScript的缺陷"></a>JavaScript的缺陷</h2><ol>
<li><p><strong>不适合开发大型程序</strong></p>
<blockquote>
<p>Javascript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载。</p>
</blockquote>
</li>
<li><p><strong>非常小的标准库</strong></p>
<blockquote>
<p>Javascript提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。</p>
</blockquote>
</li>
<li><p><strong>null 和 undefined</strong></p>
<blockquote>
<p>null属于对象（object）的一种，意思是该对象为空；undefined则是一种数据类型，表示未定义。</p>
</blockquote>
</li>
<li><p><strong>全局变量难以控制</strong></p>
<blockquote>
<p>Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性。</p>
</blockquote>
</li>
<li><p><strong>自动插入行尾分号</strong></p>
<blockquote>
<p>Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。</p>
</blockquote>
</li>
<li><p><strong>加号运算符</strong></p>
<blockquote>
<p>+号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="number">1</span>+<span class="number">10</span>); <span class="comment">// 11</span></span><br><span class="line">alert(<span class="string">&quot;1&quot;</span>+<span class="string">&quot;10&quot;</span>); <span class="comment">// 110</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果一个操作项是字符，另一个是数字，则数字自动转化为字符</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="number">1</span>+<span class="string">&quot;10&quot;</span>) <span class="comment">// 110</span></span><br><span class="line">alert(<span class="string">&quot;10&quot;</span>+<span class="number">1</span>) <span class="comment">// 101</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>NaN</strong></p>
<blockquote>
<p>NaN是一种数字，表示超出了解释器的极限。</p>
</blockquote>
</li>
<li><p><strong>数组和对象的区分</strong></p>
<blockquote>
<p>由于Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组，相当麻烦</p>
</blockquote>
</li>
<li><p><strong>== 和 ===</strong></p>
<blockquote>
<p>==用来判断两个值是否相等。当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉。</p>
<p>推荐任何时候都是用 “===”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> == <span class="string">&quot;0&quot;</span>  <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&quot;&quot;</span>  <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&quot;0&quot;</span>  <span class="comment">// frue</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&quot;false&quot;</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot; \t\r\n&quot;</span> == <span class="number">0</span>  <span class="comment">// ture</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>基本类型的包装对象</strong></p>
<blockquote>
<p>Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象。</p>
</blockquote>
</li>
</ol>
<p>资料连接：</p>
<p><a href="https://zh.wikipedia.org/wiki/JavaScript#%E5%8E%86%E5%8F%B2">JavaScript 的历史</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">JavaScript 诞生记</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">JavaScript 的10个设计缺陷</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue模板</title>
    <url>/2021/10/20/01/</url>
    <content><![CDATA[<h2 id="模板写法"><a href="#模板写法" class="headerlink" title="模板写法"></a>模板写法</h2><h3 id="一、完整版，写在HTML里"><a href="#一、完整版，写在HTML里" class="headerlink" title="一、完整版，写在HTML里"></a>一、完整版，写在HTML里</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;xxx&#x27;</span>&gt;</span><br><span class="line">	&#123;&#123; n &#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span>&gt;+=<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">n</span>: <span class="number">5</span> &#125;, <span class="comment">// data 可以写成函数</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.n += <span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="二、完整版，写在选项里"><a href="#二、完整版，写在选项里" class="headerlink" title="二、完整版，写在选项里"></a>二、完整版，写在选项里</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;</span></span><br><span class="line"><span class="string">			&#123;&#123; n &#125;&#125;</span></span><br><span class="line"><span class="string">			&lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">		&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="attr">n</span>: <span class="number">5</span> &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123; <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123; <span class="built_in">this</span>.n += <span class="number">1</span>&#125; &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 和 el 相同</span></span><br></pre></td></tr></table></figure>



<h3 id="三、非完整版，配合-xxx-vue-单文件组件"><a href="#三、非完整版，配合-xxx-vue-单文件组件" class="headerlink" title="三、非完整版，配合 xxx.vue 单文件组件"></a>三、非完整版，配合 xxx.vue 单文件组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// xxx.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">// template里不是 HTML, 而是 XML</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &#123;&#123;n&#125;&#125;</span><br><span class="line">        &lt;button @click=&#x27;add&#x27;&gt; +1 &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123; // data 必须为函数</span><br><span class="line">            return &#123; n: 0 &#125; </span><br><span class="line">        &#125;，</span><br><span class="line">        method: &#123; add() &#123; this.n +=1 &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;...css&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Xxx <span class="keyword">from</span> <span class="string">&#x27;./xxx.vue&#x27;</span></span><br><span class="line"><span class="comment">// Xxx 是一个options 对象</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(Xxx)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="展示内容"><a href="#展示内容" class="headerlink" title="展示内容"></a>展示内容</h2><ul>
<li><p>表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; object.a &#125;&#125; <span class="comment">// 表达式</span></span><br><span class="line">&#123;&#123; n + <span class="number">1</span> &#125;&#125; <span class="comment">// 可以写任何运算</span></span><br><span class="line">&#123;&#123; fn(n) &#125;&#125; <span class="comment">// 可以调用函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果值 为 undefined 或 null 就不显示</span></span><br><span class="line"><span class="comment">另一种写法为 &lt;div v-text=&quot;表达式&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>HTML 内容</p>
<p>假设 <code>data.x</code> 值为 <code>&lt;strong&gt;hi&lt;/strong&gt;</code></p>
<p><code>&lt;div v-html=&#39;x&#39;&gt;&lt;/div&gt;</code> 即可显示粗体的 hi</p>
</li>
<li><p>展示 </p>
<p><code>&lt;div v-pre&gt;&#123;&#123; n &#125;&#125;&lt;/div&gt;</code></p>
<p><code>v-pre</code> 不会对模板进行编译</p>
</li>
</ul>
<h2 id="绑定属性-v-bind"><a href="#绑定属性-v-bind" class="headerlink" title="绑定属性 v-bind"></a>绑定属性 v-bind</h2><ul>
<li><p>绑定 src</p>
<p><code>&lt;img v-bind:src=&quot;x&quot; /&gt;</code></p>
</li>
<li><p>v-bind: 简写为：</p>
<p><code>&lt;img :src=&quot;x&quot; /&gt;</code></p>
</li>
<li><p>绑定对象</p>
<p><code>&lt;div :style=&quot;&#123;border: &#39;1px solid red, height: 100&#39;&#125;&quot;&gt;&lt;/div&gt;</code></p>
</li>
</ul>
<h2 id="绑定事件-v-on"><a href="#绑定事件-v-on" class="headerlink" title="绑定事件 v-on"></a>绑定事件 v-on</h2><ul>
<li><p>v-on : 事件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">点击之后，Vue 会运行 add()</span><br><span class="line"></span><br><span class="line">&lt;button v-on:click=&quot;xxx(1)&quot;&gt;xxx&lt;/button&gt;</span><br><span class="line">点击之后，Vue 会运行 xxx(1)</span><br><span class="line"></span><br><span class="line">&lt;button v-on:click=&quot;n+=1&quot;&gt;xxx&lt;/button&gt;</span><br><span class="line">点击之后，Vue 会运行 n += 1</span><br><span class="line"></span><br><span class="line">即发现 函数就加括号调用之，否咋就直接运行代码</span><br></pre></td></tr></table></figure></li>
<li><p>缩写</p>
<p><code>&lt;button @click&quot;add&quot;&gt;+ 1&lt;/button&gt;</code>, 正常人都用缩写🤗</p>
</li>
</ul>
<h2 id="条件判断-v-if-v-else-if-v-else"><a href="#条件判断-v-if-v-else-if-v-else" class="headerlink" title="条件判断 v-if v-else-if v-else"></a>条件判断 v-if v-else-if v-else</h2><p><code>if ... else</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不处于 DOM 树中</span><br><span class="line">&lt;div v-if=&#x27;x&gt;0&#x27;&gt;</span><br><span class="line">    x 大于 0</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&#x27;x===0&#x27;&gt;</span><br><span class="line">    x 为 0</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">    x 小于 0</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="循环-v-for"><a href="#循环-v-for" class="headerlink" title="循环 v-for"></a>循环 v-for</h2><p><code>for(value, key) in 对象 或 数组</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(u, index) in users&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    	索引：&#123;&#123;index&#125;&#125; 值：&#123;&#123;u.name&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">// :key=&quot;xxx&quot; 必需</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value, name) in obj&quot; :key=&quot;name&quot;&gt;</span><br><span class="line">    	属性名：&#123;&#123;name&#125;&#125; 属性值：&#123;&#123;name&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>



<h2 id="显示-隐藏-v-show"><a href="#显示-隐藏-v-show" class="headerlink" title="显示/隐藏 v-show"></a>显示/隐藏 v-show</h2><p><code>v-show</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-show=&quot;n % 2 === 0&quot;&gt;</span><br><span class="line">    n 是偶数</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">近似等于</span><br><span class="line">&lt;div :style=&quot;display: n % 2 === 0 ? &#x27;block&#x27; : &#x27;none&#x27;&quot;&gt;</span><br><span class="line">    n 是偶数</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h2 id="v-clock"><a href="#v-clock" class="headerlink" title="v-clock"></a><a href="https://www.jianshu.com/p/f56cde007210">v-clock</a></h2><p>HTML 绑定 Vue实例，在页面加载时会闪烁，在 css 中添加 <code>[v-clock]&#123; display: none; &#125;</code></p>
<p><a href="https://cn.vuejs.org/v2/api/#v-cloak">官方API</a></p>
<h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><a href="https://cn.vuejs.org/v2/api/#v-once">v-once</a></h2><p>v-once 这个指令不需要任何表达式，它的作用就是定义它的元素或组件只会渲染一次，包括元素或者组件的所有字节点。首次渲染后，不再随着数据的改变而重新渲染。也就是说使用 v-once，那么该块都将被视为静态内容。</p>
<p>如果显示的信息后续不需要再修改，使用 v-once，这样可以提高性能。</p>
<h2 id="指令-directive"><a href="#指令-directive" class="headerlink" title="指令 directive"></a>指令 directive</h2><h3 id="什么是指令？"><a href="#什么是指令？" class="headerlink" title="什么是指令？"></a>什么是指令？</h3><p><code>&lt;div v-text=&quot;x&quot;&gt;&lt;/div&gt;</code></p>
<p><code>&lt;div v-html=&quot;x&quot;&gt;&lt;/div&gt;</code></p>
<p>以 <strong>v-</strong> 开头的就是指令。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>v -指令名：参数 = 值，例：<code>v-on:click = add</code></p>
<p>如果<strong>值</strong>里没有特殊字符，则可以不加引号</p>
<p>有些指令没有参数和值，例：<code>v-pre</code></p>
<p>有些指令没有值，例：<code>v-on:click.prevent</code>阻止默认事件，<code>@click.prevent=&#39;x&#39;</code>阻止默认事件并执行 x 函数</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">修饰符</a></h2><p>有些指令支持修饰符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@click.stop = &quot;add&quot; 表示阻止事件传播/冒泡</span><br><span class="line">@click.prevent = &quot;add&quot; 表示阻止模拟动作</span><br><span class="line">@click.stop.prevent = &quot;add&quot; 表示以上两种意思</span><br><span class="line">@keypress.enter=&quot;xxx&quot; 表示键盘按下Enter 执行 xxx</span><br></pre></td></tr></table></figure>

<p>一共多少修饰符？</p>
<p><code>v-on</code> 支持的有</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.&#123;keycode | keyAlias&#125;</span><br><span class="line"></span><br><span class="line">.stop	.prevent	.capture	.self	.once	.passive	.native</span><br><span class="line"></span><br><span class="line">快捷键相关	.ctrl	.alt	.shift	.meta	.exact</span><br><span class="line"></span><br><span class="line">鼠标相关	.left	.right	.middle</span><br></pre></td></tr></table></figure>

<p><code>v-bind</code> 支持的有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.prop	.camel	.sync</span><br></pre></td></tr></table></figure>

<p><code>v-model</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.lazy	.number	.trim</span><br></pre></td></tr></table></figure>



<p><strong>重点记忆：</strong></p>
<p><code>.stop</code> <code>.prevent</code> <code>.sync</code></p>
<h2 id="sync-重点"><a href="#sync-重点" class="headerlink" title=".sync (重点)"></a><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6">.sync (重点)</a></h2><p>场景描述：爸爸给儿子钱，儿子要 花钱怎么办，<a href="https://codesandbox.io/s/small-leftpad-zzvpp">示例</a></p>
<p>答：儿子打电话（触发事件）向爸爸要钱。</p>
<p><strong>vue规则：</strong></p>
<ul>
<li>组件不能修改 props 外部数据</li>
<li><code>this.$emit</code> 可以触发事件，并传参</li>
<li><code>$event</code> 可以获取 <code>$emit</code> 的参数</li>
</ul>
<p><a href="https://codesandbox.io/s/small-leftpad-zzvpp">上述示例使用 .sync 后。</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">:money.sync=<span class="string">&quot;tota&quot;</span></span><br><span class="line">上下等价</span><br><span class="line">:money=<span class="string">&quot;total&quot;</span> v-on:update:money=<span class="string">&quot;total=$event&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>这样实现了父子组件的双向绑定</strong></p>
<p><a href="https://v3.vuejs.org/guide/migration/v-model.html#v-model-modifiers">Vue3 推荐使用 v-model 替代 sync</a></p>
<hr>
<p>子组件使用 $emit 向父组件发送事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;update:title&#x27;</span>, newTitle)</span><br></pre></td></tr></table></figure>

<p>父组件监听这个事件并更新数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure>

<p>为了方便这种写法，vue 提供了 <strong>.sync</strong> 修饰符，也就是一种简写方式语法糖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;text-document v-bind.sync=&quot;doc&quot;&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="http://www.jsphp.net/vue/show-25-291-1.html">vue.sync的用法</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>css基础</title>
    <url>/2021/07/09/53/</url>
    <content><![CDATA[<h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><ol>
<li>流动方向<ul>
<li>inline 从左到右，到达最右边才会换行</li>
<li>block 从上到下，每一个都另起一行</li>
<li>inline-block 从左到右</li>
</ul>
</li>
<li>宽度<ul>
<li>inline 宽度为内部 inline 元素的和，不能用 width 指定</li>
<li>block 默认自动计算宽度 auto ，可用 width 指定</li>
<li>inline-block 结合前两者特点，可用 width</li>
</ul>
</li>
<li>高度<ul>
<li>inline 高度由行高 line-height 间接确定，跟 height 无关</li>
<li>block 高度由文档流元素决定，可设 height</li>
<li>inline-block 跟 block 类似，可设置 height</li>
</ul>
</li>
</ol>
<h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>当内容大于容器</p>
<ul>
<li>等内容的款年度或高度大于容器的，会溢出</li>
<li>可用 overflow 来设置是否显示滚动条</li>
<li>auto 是灵活设置</li>
<li>scroll 是永远设置</li>
<li>hidden 是直接隐藏移除部分</li>
<li>visible 是直接显示溢出部分</li>
<li>overflow 可分为 overflow-x 和 overflow-y 很少用</li>
</ul>
<h2 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h2><p>block 高度由内部文档流元素决定，可以设 height，这句话的意思是不是说，有些元素可以不在文档流中</p>
<ul>
<li>position: absolute/fixed;</li>
<li>float</li>
</ul>
<hr>


<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><ol>
<li>content-box 内容就是盒子的边界<ul>
<li>content-box width = 内容宽度</li>
</ul>
</li>
<li>border-box 边框才是盒子的边界 （推荐使用）<ul>
<li>border-box width = 内容宽度 + padding + border</li>
</ul>
</li>
</ol>
<h2 id="margin-合并"><a href="#margin-合并" class="headerlink" title="margin 合并"></a>margin 合并</h2><ul>
<li>父子。兄弟之间会合并，只有上下合并</li>
<li>阻止合并：<ul>
<li>父子合并用 padding / border  挡住</li>
<li>父子合并用 overflow：hidden 挡住</li>
<li>父子合并用 display: flex</li>
<li>兄弟合并是符合预期的，可以用 display: inline-block 消除</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css总结</title>
    <url>/2021/07/10/31/</url>
    <content><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.群组选择器  如：<span class="selector-tag">p</span>, <span class="selector-tag">body</span>, <span class="selector-tag">img</span>, <span class="selector-tag">div</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.兄弟选择器  如：<span class="selector-tag">p</span> + <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>:<span class="number">#f00</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.属性选择器  如： <span class="selector-tag">p</span><span class="selector-attr">[title]</span> &#123; <span class="attribute">color</span>:<span class="number">#f00</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.包含（后代）选择器  如：<span class="selector-tag">body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.子元素选择器 如：<span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span><span class="selector-class">.ID</span>选择器  如：<span class="selector-id">#myDiv</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.类选择器  如：<span class="selector-class">.class1</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>.伪元素选择器  如：E<span class="selector-pseudo">:first</span>-line，E:before</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>.伪类选择器  如：E:first-child ，E:visited，E:focus，E:enabled</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>.标签选择器  如：p &#123; font-size:<span class="number">1em</span>; &#125;</span><br><span class="line"></span><br><span class="line">优先级： !important &gt; 行内样式 &gt; ID选择器 &gt; class选择器 &gt; 标签 &gt; 通配符 &gt; 继承 </span><br></pre></td></tr></table></figure>



<h2 id="定位（position）"><a href="#定位（position）" class="headerlink" title="定位（position）"></a>定位（position）</h2><ol>
<li>static，默认，待在文档流里</li>
<li>relative，相对定位，原位置不变，显示的位置偏移<ul>
<li>用于做位移（很少用）</li>
<li>用于给 absolute 元素做父元素</li>
<li>配合 z-index，z-index :auto 默认值，不创建新层叠上下文</li>
</ul>
</li>
<li>absolute，绝对定位，定位基准是祖先里的非static即相对于祖先元素中最近的一个定位元素<ul>
<li>脱离原来的位置，另起一层，<a href="http://js.jirengu.com/hosugodegi/3/edit">比如对话框的关闭按钮</a>，祖先元素得加 relative </li>
<li>某些浏览器不写 top / left 会位置错乱。善用 left: 100% left: 50% 加负 margin</li>
</ul>
</li>
<li>fixed，固定定位，定位基准是 viewport，视口代表当前可见的计算机图形区域，transform 有bug<ul>
<li>手机上尽量不要使用 fixed</li>
</ul>
</li>
<li>sticky，粘滞定位，兼容差</li>
</ol>
<p>Tips：</p>
<ul>
<li><p>如果写了 absolute，一般都得补一个 relative</p>
</li>
<li><p>如果写了 absolute 或 fixed，一定要补 top 和 left</p>
</li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">position MDN</a></p>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/20180324150509906.jpg" alt="20180324150509906" width="800px"></center>



<ol>
<li>content-box 内容就是盒子的边界<ul>
<li>content-box width = 内容宽度</li>
</ul>
</li>
<li>border-box 边框才是盒子的边界 （推荐使用）<ul>
<li>border-box width = 内容宽度 + padding + border</li>
</ul>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: border-box | content-box;</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">CSS 基础框盒模型介绍  MDN</a></p>
<h2 id="float-布局"><a href="#float-布局" class="headerlink" title="float 布局"></a>float 布局</h2><p>步骤：</p>
<ol>
<li>子元素加上 float: left 和 width</li>
<li>在父元素上加 .clearfix</li>
</ol>
<p>经验:</p>
<ul>
<li>有经验者会留一些空间或者最后有一个不设 width</li>
<li>不需要响应式，因为手机上没有 IE，而这个布局是专门为 IE准备的</li>
</ul>
<p>IE 6/7 存在双倍 margin bug, 两个解决办法（基本不用）：</p>
<ol>
<li>针对 IE 6/7 把 margin 减半</li>
<li>加一个 display: inline-block </li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    /* 清除浮动 */</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IE bug</span><br><span class="line"><span class="comment">/* margin 减半 &amp;&amp; inline-block */</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    _margin-<span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.php.cn/css-tutorial-412744.html">为什么要清除浮动</a></p>
<p><a href="http://js.jirengu.com/wiwuh/3/edit?html,css,output">float demo</a></p>
<p>Tips：</p>
<ul>
<li>border 有时候会干扰尺寸，可以改成 outline</li>
<li>用 float 做平均布局时，可以在布局中增加一个x图层，其多余的右边距可以用 <strong>负的 margin</strong> 来改善布局</li>
</ul>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_08-33-25.png" alt="Snipaste_2021-08-20_08-33-25" width="800px"></center>



<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><ul>
<li>根据 HTML 构建 HTML 树（DOM）</li>
<li>根据 CSS 构建 CSS 树 （CSS DOM）</li>
<li>将两棵树合并成一颗渲染树 （render tree）</li>
<li>Layout 布局（文档流、盒模型、计算大小和位置）</li>
<li>Paint 绘制 （把边框颜色、文字颜色、阴影等画出来）</li>
<li>Compose 合成（根据层叠关系展示画面）</li>
</ul>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/render-tree-construction.png" alt="render-tree-construction" width="800px"></center>

<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction">渲染树构建、布局及绘制</a></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><strong>transition</strong></p>
<p>css中的transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑的以动画效果改变css的属性值。</p>
<p>transition属性是个复合属性 <code>transition: property name | duration | timing function | delay;</code>，包括以下几个子属性：</p>
<ul>
<li>transition-property ：规定设置过渡效果的css属性名称<ul>
<li><code>transition-property: none |all |property</code></li>
</ul>
</li>
<li>transition-duration ：规定完成过渡效果需要多少秒或毫秒<ul>
<li><code>transition-duration: time</code></li>
</ul>
</li>
<li>transition-timing-function ：指定过渡函数，规定速度效果的速度曲线<ul>
<li><code>transition-timing-function：linear| ease| ease-in| ease-out| ease-in-out| cubic-bezier(n,n,n,n);</code></li>
</ul>
</li>
<li>transition-delay ：指定开始出现的延迟时间<ul>
<li><code>transition-delay: time</code></li>
</ul>
</li>
</ul>
<p><strong>animation</strong></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">animation</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名；</span><br><span class="line"></span><br><span class="line">方向：reverse | alternate | alternate—reverse</span><br><span class="line">填充模式：forwards | none | backwards | both</span><br><span class="line">暂停：paused | running</span><br></pre></td></tr></table></figure>



<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes">keyframes</a>语法格式</p>
<p><a href="https://stackoverflow.com/questions/12991164/maintaining-the-final-state-at-end-of-a-css3-animation/12991203#12991203">让动画停在最后一帧</a>  加forwards ，例 <code>animation: xxx 1.5s forwards</code>;</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>float布局</title>
    <url>/2021/07/07/39/</url>
    <content><![CDATA[<p>步骤：</p>
<ol>
<li>子元素加上 float: left 和 width</li>
<li>在父元素上加 .clearfix</li>
</ol>
<p>经验:</p>
<ul>
<li>有经验者会留一些空间或者最后有一个不设 width</li>
<li>不需要响应式，因为手机上没有 IE，而这个布局是专门为 IE准备的</li>
</ul>
<p><b>IE 6/7 存在双倍 margin bug</b>, 两个解决办法（基本不用）：</p>
<ol>
<li><p>针对 IE 6/7 把 margin 减半</p>
</li>
<li><p>加一个 display: inline-block </p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    /* 清除浮动 */</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IE bug</span><br><span class="line"><span class="comment">/* margin 减半 &amp;&amp; inline-block */</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    _margin-<span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.php.cn/css-tutorial-412744.html">为什么要清除浮动</a></p>
<p><a href="http://js.jirengu.com/wiwuh/3/edit?html,css,output">float demo</a></p>
<p>Tips：</p>
<ul>
<li>border 有时候会干扰尺寸，可以改成 outline</li>
<li>用 float 做平均布局时，可以在布局中增加一个x图层，其多余的右边距可以用 <strong>负的 margin</strong> 来改善布局</li>
</ul>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_08-33-25.png" alt="Snipaste_2021-08-20_08-33-25" width="800px"></center>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css定位与层叠上下文</title>
    <url>/2021/07/10/50/</url>
    <content><![CDATA[<h2 id="一个-div-的分层"><a href="#一个-div-的分层" class="headerlink" title="一个 div 的分层"></a>一个 div 的分层</h2><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-07-12_21-36-28.png" alt="Snipaste_2021-07-12_21-36-28" width="800px"></center>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-07-12_22-04-00.png" alt="Snipaste_2021-07-12_22-04-00" width="800px"></center>



<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><ol>
<li>static，默认，待在文档流里</li>
<li>relative，相对定位，原位置不变，显示的位置偏移<ul>
<li>用于做位移（很少用）</li>
<li>用于给 absolute 元素做父元素</li>
<li>配合 z-index，z-index :auto 默认值，不创建新层叠上下文</li>
</ul>
</li>
<li>absolute，绝对定位，定位基准是祖先里的非static即相对于祖先元素中最近的一个定位元素<ul>
<li>脱离原来的位置，另起一层，<a href="http://js.jirengu.com/hosugodegi/3/edit">比如对话框的关闭按钮</a>，祖先元素得加 relative </li>
<li>某些浏览器不写 top / left 会位置错乱。善用 left: 100% left: 50% 加负 margin</li>
</ul>
</li>
<li>fixed，固定定位，定位基准是 viewport，视口代表当前可见的计算机图形区域，transform 有bug<ul>
<li>手机上尽量不要使用 fixed</li>
</ul>
</li>
<li>sticky，粘滞定位，兼容差</li>
</ol>
<p>Tips：</p>
<p>如果写了 absolute，一般都得补一个 relative</p>
<p>如果写了 absolute 或 fixed，一定要补 top 和 left</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">position MDN</a></p>
<h2 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h2><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-07-13_21-47-35.png" alt="Snipaste_2021-07-13_21-47-35" width="800px"></center>

<p>比喻：</p>
<ul>
<li>每个层叠上下文既是一个小世界（作用域）</li>
<li>这个小世界里面的 z-index 跟外界无关</li>
<li>处在同一个小世界的 z-index 才能比较</li>
<li>负 z-index 逃不出小世界，<a href="http://js.jirengu.com/modez/1/edit?html,css,output">例</a></li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">那些属性可以创建，查mdn</a></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2021/07/08/39/</url>
    <content><![CDATA[<p>采用Flex布局的元素，称为Flex容器（fcontainer），简称”容器”。它的所有子元素自动成为容器成员，称为项目（item）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex | inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/item%E6%B5%81%E5%8A%A8%E6%96%B9%E5%90%91.png" width="600px">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">	<span class="attribute">flex-direction</span>: row / row-reverse / column /column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/%E6%94%B9%E5%8F%98%E6%8A%98%E8%A1%8C.png" width="600px">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">	<span class="attribute">flex</span>-warp: nowarp / wrap / wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-27_11-19-38.png" alt="Snipaste_2021-08-27_11-19-38" width="600px"></center>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start / flex-end/ space-between / sapce-around / space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/%E6%AC%A1%E8%BD%B4%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F.png" width="600px">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">	<span class="attribute">align-items</span>: flex-start / flex-end / center / stretch / baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><img src=https://cdn.jsdelivr.net/gh/Drwna/image//images/%E5%A4%9A%E8%A1%8C%E5%86%85%E5%AE%B9.png width="600px">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">	<span class="attribute">align-content</span>: flex-start / flex-end / center / stetch / space-between / space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="item属性"><a href="#item属性" class="headerlink" title="item属性"></a>item属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><img src=https://cdn.jsdelivr.net/gh/Drwna/image//images/item-order.png width=600px>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">	<span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">	<span class="attribute">order</span>: -<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/item-flex-grow.png" alt="item-flex-grow" width="600px">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">	<span class="attribute">flex-grow</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>控制如何变瘦，<strong>一般写<code>flex-shrink: 0;</code>防止变瘦</strong>，默认是1</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">	<span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="attribute">flex-shrink</span>: <span class="number">5</span>;</span><br><span class="line">	<span class="comment">/* 缩放程度更快 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">	<span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>控制基准宽度，默认是<code>auto</code>，就是宽度，不常用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">	<span class="attribute">flex-basis</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/item-align-self.png" alt="item-align-self" width="600px">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">	<span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 工作中基本只用这些 */</span></span><br><span class="line">dispaly: flex;</span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-direction</span>: row / column;</span><br><span class="line"><span class="comment">/* 流动方向，横或竖 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">flex-wrap</span>: warp / nowarp;</span><br><span class="line"><span class="comment">/* 是否换行 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">justify-content</span>: center / space-betten;</span><br><span class="line"><span class="comment">/* 主轴（横轴）方向 居中或分开对齐 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="comment">/* 次轴*（竖轴）方向，居中 */</span></span><br></pre></td></tr></table></figure>

<p><a href="https://flexboxfroggy.com/#zh-cn">flex小游戏</a></p>
<p>Tips:</p>
<p>不要把 width 和 height 写死，除非特殊说明</p>
<ul>
<li>写死 width：100px</li>
<li>不写死 width：50% / max-width：100px /  min-width：80% / width：30vw</li>
<li>特点：不使用 px，或者加 min max 前缀</li>
</ul>
<p><code>margin-xxx: auto</code>和<code>justify-content: space-between</code>实现相同的效果，推荐使用前者</p>
<p>参考自<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a></p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_08-33-25.png" alt="Snipaste_2021-08-20_08-33-25" width="800px"></center>

]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/03/01/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>grid布局</title>
    <url>/2021/07/09/28/</url>
    <content><![CDATA[<p>采用网格布局的区域，称为“容器（container）”。容器内部的采用网格定位的子元素称为“项目（item）”</p>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/* 指定一个容器为 */</span> </span><br><span class="line">   <span class="attribute">display</span>: grid | inline-grid;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="columns-row"><a href="#columns-row" class="headerlink" title="columns row"></a>columns row</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">    grid-template-rows: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-07-10_23-02-04.png" alt="Snipaste_2021-07-10_23-02-04" width="600px"></center>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>,<span class="number">1</span>fr); // 宽度平均分成四等份 </span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;   // 列宽这样是分成<span class="number">6</span>份各占 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> 份</span><br></pre></td></tr></table></figure>



<h2 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  grid-area: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  grid-area: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  grid-area: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-d</span> &#123;</span><br><span class="line">  grid-area: footer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  grid-template-rows: auto;</span><br><span class="line">  grid-template-areas: </span><br><span class="line">    <span class="string">&quot;header header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;main main . sidebar&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_12-33-29.png" alt="Snipaste_2021-08-20_12-33-29" width="600px"></center>



<h2 id="gap"><a href="#gap" class="headerlink" title="gap"></a>gap</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-rows: <span class="number">80px</span> auto <span class="number">80px</span>; </span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  row-gap: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_13-02-30.png" alt="Snipaste_2021-08-20_13-02-30" width="600px"></center>



<h2 id="item"><a href="#item" class="headerlink" title="item"></a>item</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">2</span>;</span><br><span class="line">  grid-column-end: five;</span><br><span class="line">  grid-row-start: row1-start;</span><br><span class="line">  grid-row-end: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_13-18-20.png" alt="Snipaste_2021-08-20_13-18-20" width="600px"></center>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">1</span>;</span><br><span class="line">  grid-column-end: span col4-start;</span><br><span class="line">  grid-row-start: <span class="number">2</span>;</span><br><span class="line">  grid-row-end: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_13-33-02.png" alt="Snipaste_2021-08-20_13-33-02" width="600px"></center>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  grid-column: <span class="number">3</span> / span <span class="number">2</span>;</span><br><span class="line">  grid-row: third-line / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-08-20_13-23-08.png" alt="Snipaste_2021-08-20_13-23-08" width="600px"></center>



<p><a href="https://cssgridgarden.com/#zh-cn">grid 游戏</a></p>
<p>参照 <a href="https://css-tricks.com/snippets/css/complete-guide-grid/#introduction">A Complete Guide to Grid</a></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>react 组件</title>
    <url>/2021/11/22/34/</url>
    <content><![CDATA[<h2 id="Element-V-S-Component"><a href="#Element-V-S-Component" class="headerlink" title="Element V.S. Component"></a>Element V.S. Component</h2><p>元素与组件</p>
<ul>
<li><code>const div = React.createElement(&#39;div&#39;,...)</code></li>
<li>这是一个 React <strong>元素</strong>（d 小写）</li>
<li><code>const Div = () =&gt; React.createElement(&#39;div&#39;,...)</code></li>
<li>这是一个 React <strong>组件</strong>（D 大写）</li>
</ul>
<br />

<span id="more"></span>

<h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法：<code>&lt;Weclome name=&quot;react&quot; /&gt;</code></p>
<h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法：<code>&lt;Welcom name=&quot;react&quot; /&gt;</code></p>
<h2 id="lt-Welcome-gt"><a href="#lt-Welcome-gt" class="headerlink" title="&lt;Welcome /&gt;"></a><code>&lt;Welcome /&gt;</code></h2><p><strong>会被翻译成什么</strong></p>
<ul>
<li><p><code>&lt;div /&gt;</code> 会被翻译为 <code>React.createElement(‘div’)</code></p>
</li>
<li><p><code>&lt;Welcome /&gt;</code> 会被翻译为 <code>React.createElement(Welcome)</code></p>
</li>
<li><p><a href="https://babeljs.io/en/repl#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=DwEwlgbgBAxgNgQwM5IHIILYFMC8AiAJyxDwD4oA7KYAenAlIChGAzAVwpgBcwB7KgOpY4MXtgAUASgDeAX2bAhIsVijYUCAOa48ACzBkAYgQQUA1rSWjs5IA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.7.7&externalPlugins=">演示</a></p>
<img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-11-21_15-51-23.png" alt="Snipaste_2021-11-21_15-51-23"></li>
</ul>
<p><strong><code>React.createElement </code>的逻辑</strong></p>
<ul>
<li>如果 传入一个 <strong>字符串</strong> ‘div’，则会创建一个 div（虚拟 DOM 对象）</li>
<li>如果 传入一个 <strong>函数 <strong>，则会调用该函数，</strong>获取其返回值</strong></li>
<li>如果 传入一个 <strong>类</strong>，则在类前面加一个 <strong>new</strong>（这会导致执行 <code>constructor</code>），获取一个组件<strong>对象</strong>，然后调用对象的 <strong><code>render()</code> 方法，获取其返回值</strong></li>
</ul>
<p><a href="https://codesandbox.io/s/react-component-sddsx?file=/src/index.js">demo</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      爸爸</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Son</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">n</span>: <span class="built_in">this</span>.state.n + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        儿子 n: &#123;this.state.n&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.add()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Grandson</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Grandson = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">/* 等价于</span></span><br><span class="line"><span class="comment">  const array = React.useState(0);</span></span><br><span class="line"><span class="comment">  const n = array[0];</span></span><br><span class="line"><span class="comment">  const setN = array[1];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Grandson&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      孙子： n: &#123;n&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n + 1)&#125;&gt;+1!!! <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure>

<br />

<h2 id="props-（外部数据）"><a href="#props-（外部数据）" class="headerlink" title="props （外部数据）"></a>props （外部数据）</h2><p><strong>类组件</strong> 直接读取 属性 <code>this.props.xxx</code></p>
<p><strong>函数组件</strong> 直接读取 参数 <code>props.xxx</code></p>
<p><a href="https://codesandbox.io/s/react-demo-props-84i08">demo</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      爸爸</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">messageForSon</span>=<span class="string">&quot;儿砸你好&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        我是儿子，我爸对我说「&#123;this.props.messageForSon&#125;」</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Grandson</span> <span class="attr">messageForGrandson</span>=<span class="string">&quot;孙贼你好&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Grandson = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Grandson&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      我是孙子，爷爷对我说「&#123;props.messageForGrandson&#125;」</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<br />

<h2 id="state-内部数据"><a href="#state-内部数据" class="headerlink" title="state (内部数据)"></a>state (内部数据)</h2><p><strong>类组件</strong> 用 <code>this.state</code> 读，<code>this.setState </code>(异步更新) 写</p>
<p><strong>函数组件</strong> 用<code>useState</code> 返回数组，第一项读，第二项写</p>
<p><a href="https://codesandbox.io/s/react-demo-state-iybvm">demo</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.setState(&#123; n: this.state.n + 1 &#125;);</span></span><br><span class="line">    <span class="comment">// 推荐使用 函数</span></span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// const n = state.n + 1</span></span><br><span class="line">        <span class="comment">// console.log(n)</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">n</span>: state.n + <span class="number">1</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        儿子 n: &#123;this.state.n&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.add()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Grandson</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Grandson = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">/* 等价于</span></span><br><span class="line"><span class="comment">  const array = React.useState(0);</span></span><br><span class="line"><span class="comment">  const n = array[0];</span></span><br><span class="line"><span class="comment">  const setN = array[1];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Grandson&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      孙子： n: &#123;n&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> setN(n + 1) &#125;&gt; +1!!! <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="类组件注意事项"><a href="#类组件注意事项" class="headerlink" title="类组件注意事项"></a>类组件注意事项</h2><h4 id="this-state-n-1-无效？"><a href="#this-state-n-1-无效？" class="headerlink" title="this.state.n += 1 无效？"></a><code>this.state.n += 1 </code>无效？</h4><ul>
<li>其实 n  已经改变了，只不过 UI 不会自动更新而已</li>
<li>调用 setState 才会触发 UI 更新（异步更新）</li>
<li>因为 React 没有像 Vue 监听 data 一样监听 state</li>
</ul>
<h4 id="setState-会异步更新-UI"><a href="#setState-会异步更新-UI" class="headerlink" title="setState 会异步更新 UI"></a>setState 会异步更新 UI</h4><ul>
<li>setState 之后，state 不会马上改变，立即 读取 state 会失败</li>
<li>推荐使用 setState(函数)</li>
</ul>
<h4 id="this-setState-this-state-不推荐"><a href="#this-setState-this-state-不推荐" class="headerlink" title="this.setState(this.state)不推荐"></a><code>this.setState(this.state)</code>不推荐</h4><ul>
<li>React 不希望我们修改 旧的 state （<strong>不可变数据</strong>）</li>
<li>常用代码：<code>setState(&#123;n: state.n + 1&#125;)</code>（用新的 state）</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这是一种理念（<strong>函数式</strong>）</p>
<br />



<h2 id="函数组件注意事项"><a href="#函数组件注意事项" class="headerlink" title="函数组件注意事项"></a>函数组件注意事项</h2><p>和类组件类似的地方：也要通过 setX(新值) 来更新 UI</p>
<p>不同点：<strong>没有 this</strong>，一律使用 参数 和 变量。</p>
<br />

<h2 id="复杂-state"><a href="#复杂-state" class="headerlink" title="复杂 state {}"></a>复杂 state {}</h2><p>state 里不止有一个 n : </p>
<h3 id="类组件里有-n-和-m"><a href="#类组件里有-n-和-m" class="headerlink" title="类组件里有 n 和 m"></a>类组件里有 n 和 m</h3><p><a href="https://codesandbox.io/s/react-demo-classstate-gjwsx">demo</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">n</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">m</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addN</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">n</span>: <span class="built_in">this</span>.state.n + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="comment">// m 会被覆盖为 undefined 吗？</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addM</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">m</span>: <span class="built_in">this</span>.state.m + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="comment">// n 会被覆盖为 undefined 吗？</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> (...);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="函数组件里有-n-和-m"><a href="#函数组件里有-n-和-m" class="headerlink" title="函数组件里有 n 和 m"></a>函数组件里有 n 和 m</h3><p>demo</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Grandson = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [m, setM] = React.useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Grandson&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      孙子 n:&#123;n&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n + 1)&#125;&gt;n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      m:&#123;m&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setM(m + 1)&#125;&gt;m+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Grandson = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = React.useState(&#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">m</span>: <span class="number">0</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Grandson&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      孙子 n:&#123;state.n&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setState(&#123;...state, n: state.n + 1&#125;)&#125;&gt;n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      m:&#123;state.m&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setState(&#123;...state, m: state.m + 1&#125;)&#125;&gt;m+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<br />

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h5 id="类组件的-setState-会自动合并第一层属性"><a href="#类组件的-setState-会自动合并第一层属性" class="headerlink" title="类组件的 setState 会自动合并第一层属性"></a>类组件的 setState 会自动合并第一层属性</h5><h5 id="但是并不会合并第二层属性-demo"><a href="#但是并不会合并第二层属性-demo" class="headerlink" title="但是并不会合并第二层属性 demo"></a>但是并不会合并第二层属性 <a href="https://codesandbox.io/s/restless-river-i8zes?file=/src/index.js">demo</a></h5><h5 id="使用-Object-assign-demo-或者-操作符-demo"><a href="#使用-Object-assign-demo-或者-操作符-demo" class="headerlink" title="使用 Object.assign demo 或者 ...操作符 demo"></a>使用 <code>Object.assign</code> <a href="https://codesandbox.io/s/zen-margulis-gjr7t">demo</a> 或者 <code>...操作符</code> <a href="https://codesandbox.io/s/dawn-sound-rwyxv">demo</a></h5><h5 id="函数组件的-setX-则完全不会合并，需操作符合并。"><a href="#函数组件的-setX-则完全不会合并，需操作符合并。" class="headerlink" title="函数组件的 setX 则完全不会合并，需操作符合并。"></a>函数组件的 setX 则完全不会合并，需操作符合并。</h5><br />

<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="类组件的事件绑定"><a href="#类组件的事件绑定" class="headerlink" title="类组件的事件绑定"></a>类组件的事件绑定</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123; <span class="function">()=&gt;</span><span class="built_in">this</span>.addN() &#125; &gt;n+<span class="number">1</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>传一个函数给 onClick 即可，C 大写。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123; <span class="built_in">this</span>.addN &#125; &gt;n+<span class="number">1</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>这样写有问题！会使得 this.addN 里的 this 变成 window。（原因：点击 button后 <code>button.onClick.call(null, event)</code>）</p>
<p>还有一种写法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.addN.bind(<span class="built_in">this</span>)&#125; &gt;n+<span class="number">1</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>这样写也是可以的，因为它返回一个<strong>绑定了当前 this</strong> 的新<strong>函数</strong></p>
<p>第一种写法，可用 <code>this._addN = () =&gt; this.addN()</code></p>
<p>给箭头函数取个名字，然后写成：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123; <span class="built_in">this</span>._addN &#125; &gt;n+<span class="number">1</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>再改写：需要写在 constructor 里</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>.addN = <span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123;<span class="attr">n</span>: <span class="built_in">this</span>.state.n + <span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.addN</span> &#125;&gt;</span>n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最终：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写在 constructor w</span></span><br><span class="line">addN = <span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123;<span class="attr">n</span>: <span class="built_in">this</span>.state.n + <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<br />

<h2 id="React-V-S-Vue"><a href="#React-V-S-Vue" class="headerlink" title="React V.S Vue"></a>React V.S Vue</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><p>都是对视图的封装，React 是用类和函数表示的一个组件，而 Vue 是通过构造选项构造一个组件。</p>
<p>都是提供的 <code>createElement</code> 的 XML 简写，React 提供的是 JSX 语法，而 Vue 是提供的模板语法（语法巨多）。</p>
<h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><p>React 是把 HTML 放在 JS 里写（HTML in JS），而 Vue 是把 JS 放在 HTML 里写（JS in HTML）。</p>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react hooks 详解</title>
    <url>/2021/12/11/14/</url>
    <content><![CDATA[<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-11-29_23-27-35.png" alt="Snipaste_2021-11-29_23-27-35" width="800px"></center>

<span id="more"></span>

<p><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html">官方文档</a></p>
<br />

<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><h5 id="使用状态："><a href="#使用状态：" class="headerlink" title="使用状态："></a>使用状态：</h5><ul>
<li><code>const[n, setN] = React.useState(0)</code></li>
<li><code>const[user, setUser] = React.useState(&#123;name:&#39;frank&#125;)</code></li>
</ul>
<h5 id="注意事项1：不可局部更新"><a href="#注意事项1：不可局部更新" class="headerlink" title="注意事项1：不可局部更新"></a>注意事项1：不可局部更新</h5><p>如果 state 是一个对象，能否只更新部分？</p>
<p>答案是不行，<a href="https://codesandbox.io/s/snowy-pine-7gdw2">示例代码</a></p>
<p>因为 setState 不会帮我们合并属性。</p>
<h5 id="注意事项2：对象地址要变"><a href="#注意事项2：对象地址要变" class="headerlink" title="注意事项2：对象地址要变"></a>注意事项2：对象地址要变</h5><p>setState (obj) 如果 obj 地址不变，即使数据变了，那么 React 认为 数据没有变化。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user,setUser] = useState(&#123;<span class="attr">name</span>:<span class="string">&#x27;Frank&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 这么修改没有用</span></span><br><span class="line">    user.name = <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    setUser(user)</span><br><span class="line">    <span class="comment">// 正确y</span></span><br><span class="line">    setUser(&#123;</span><br><span class="line">        ...user,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;user.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure>

<p>useState 接收函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = useState(<span class="function">()=&gt;</span>&#123;<span class="keyword">return</span> initialState&#125;)</span><br><span class="line">该函数返回初始 state, 且只执行一次</span><br></pre></td></tr></table></figure>

<p>setState 接收函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">setN(<span class="function"><span class="params">i</span> =&gt;</span> i + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>优先使用函数，<a href="https://codesandbox.io/s/suspicious-pond-le38m">demo</a></p>
<p><a href="https://drwna.github.io/2021/11/24/51/">自定义 useState</a></p>
<br />

<h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><h5 id="用来践行-Flux-Redux-的思想"><a href="#用来践行-Flux-Redux-的思想" class="headerlink" title="用来践行 Flux/Redux 的思想"></a>用来践行 Flux/Redux 的思想</h5><p>共四步：</p>
<ol>
<li>创建初始值 initialState</li>
<li>创建所有操作 reduce(state, actioin)</li>
<li>传给 useReducer, 得到读和写 API</li>
<li>调用<strong>写 ({type: ‘操作类型’})</strong></li>
</ol>
<p>总的来说 useReducer 是 useState 的复杂版。</p>
<p><a href="https://codesandbox.io/s/tender-golick-2qxut">demo</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建初始值</span></span><br><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建所有操作</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.n + action.number &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.type === <span class="string">&quot;multi&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.n * <span class="number">2</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;unknown type&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// useReducer</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initial);</span><br><span class="line">  <span class="keyword">const</span> &#123; n &#125; = state;</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 写 (&#123;type: ‘操作类型’&#125;) </span></span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">number</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> onClick2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">number</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>n: &#123;n&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick2&#125;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codesandbox.io/s/admiring-framework-4by2t">useReducer 表单例子</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initFormData = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">nationality</span>: <span class="string">&quot;汉族&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;patch&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, ...action.formData &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;reset&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> initFormData;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [formData, dispatch] = useReducer(reducer, initFormData);</span><br><span class="line">  <span class="keyword">const</span> onSubmit = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> onReset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;reset&quot;</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span> <span class="attr">onReset</span>=<span class="string">&#123;onReset&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          姓名</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">value</span>=<span class="string">&#123;formData.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span></span></span><br><span class="line"><span class="xml">              dispatch(&#123;</span></span><br><span class="line"><span class="xml">                type: &quot;patch&quot;,</span></span><br><span class="line"><span class="xml">                formData: &#123; name: e.target.value &#125;,</span></span><br><span class="line"><span class="xml">              &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          年龄</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">value</span>=<span class="string">&#123;formData.age&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span></span></span><br><span class="line"><span class="xml">              dispatch(&#123;</span></span><br><span class="line"><span class="xml">                type: &quot;reset&quot;,</span></span><br><span class="line"><span class="xml">                formData: &#123; age: e.target.name &#125;,</span></span><br><span class="line"><span class="xml">              &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          民族</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">value</span>=<span class="string">&#123;formData.nationality&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span></span></span><br><span class="line"><span class="xml">              dispatch(&#123;</span></span><br><span class="line"><span class="xml">                type: &quot;patch&quot;,</span></span><br><span class="line"><span class="xml">                formData: &#123; nationality: e.target.value &#125;,</span></span><br><span class="line"><span class="xml">              &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;JSON.stringify(formData)&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br />

<h5 id="如何代替-Redux"><a href="#如何代替-Redux" class="headerlink" title="如何代替 Redux"></a>如何代替 Redux</h5><p>步骤：</p>
<ol>
<li>将数据集中在一个 store 对象</li>
<li>将所有操作集中在 reducer</li>
<li>创建一个 Context</li>
<li>创建对数据的读写 API</li>
<li>将第四步的内容放到第三步的 Context</li>
<li>用 Context.Provider 将 Context 提供给所有组件</li>
<li>各个组件用 useContext 获取读写 API</li>
</ol>
<p><a href="https://codesandbox.io/s/interesting-volhard-lfxpm">demo</a> ，模块化后 <a href="https://codesandbox.io/s/priceless-jennings-gyls6">demo</a></p>
<br />

<h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><p>上下文</p>
<p>全局变量是全局的上下文</p>
<p>上下文是局部的全局变量</p>
<p>使用：</p>
<ol>
<li>使用 <code>C = createContext(initial)</code> 创建上下文</li>
<li>使用 <code>&lt;C.provider&gt;</code> 圈定作用域</li>
<li>在作用域内使用 <code>useContext(C)</code> 来使用上下文</li>
</ol>
<p><a href="https://codesandbox.io/s/elated-hill-9rkug">demo</a></p>
<p>注意：</p>
<p>useContext 不是响应式的。</p>
<p>在一个模块将 C 里的值改变，另一个模块不会感知到这个变化。</p>
<br />

<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>副作用</p>
<ul>
<li>对环境的改变即为副作用，如修改 document.title</li>
<li>但我们不一定非要把副作用放在 useEffect 里</li>
<li>实际上叫做 afterRender 更好，因为每次 render 后会执行</li>
</ul>
<p>用途：</p>
<ul>
<li>作为 componentDidMount 使用， [] 作第二个参数</li>
<li>作为 componentDidUpdate 使用，可指定依赖</li>
<li>作为 componentWillUnmount 使用，通过 return</li>
<li>以上三种用途可同时存在</li>
</ul>
<p>特点：如果同时存在多个 useEffect，会按照出现次序执行。</p>
<p><a href="https://codesandbox.io/s/black-butterfly-79g62?file=/src/index.js">demo</a></p>
<h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h3><p>布局副作用</p>
<p>useEffect 在浏览器渲染完成后执行，<a href="https://codesandbox.io/s/useeffect-flash-on-render-forked-d1poj?file=/src/index.js">demo</a></p>
<p>useLayoutEffect 在浏览器渲染前执行，<a href="https://codesandbox.io/s/charming-sammet-xcwkr">通过时间点来侧面证明</a></p>
<p>特点：</p>
<p>useLayoutEffect 总是比 useEffect 先执行，<a href="https://codesandbox.io/s/beautiful-hill-1or8e">demo</a></p>
<p>useLayoutEffect 里的任务最好影响了 Layout，不然没必要用 useLayoutEffect。</p>
<p>经验：</p>
<p>为了用户体验，优先使用 useEffect（优先渲染）</p>
<br />

<h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>要理解 React.useMemo，需要先了解 React.memo，React 默认有多余的 render，<a href="https://codesandbox.io/s/gracious-villani-k3ms0">demo</a>，代码中的 Child 用 React.memo(Child)代替，如果 props 不变，就不会再次执行函数组件。</p>
<p>useMemo 的作用就是提供了一个 memorize 值，在依赖项改变之后，该值才会改变才会被重新计算。<a href="https://codesandbox.io/s/bold-sunset-g9136">demo</a></p>
<p>特点：</p>
<ul>
<li><p>第一个参数是 <code>()=&gt;value</code></p>
</li>
<li><p>第二个参数是依赖 <code>[m, n]</code></p>
</li>
</ul>
<p>只有当依赖变化时，才会计算出新的 value，如果依赖不变，那么就重用之前的 value。类似于 vue2 的 computed。</p>
<p>注意：如果 value 是个函数，那么就要写成 <code>useMemo( ()=&gt; (x)=&gt;console.log(&#39;1&#39;) )</code>，这是一个返回函数的函数，</p>
<p>于是就有了 useCallback，<code>useCallback( (x)=&gt;console.log(&#39;1&#39;) )</code></p>
<br />

<h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>用法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useCallback(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x), [m])</span><br><span class="line">等价于</span><br><span class="line">useMemo( <span class="function">() =&gt;</span> <span class="function"><span class="params">x</span>=&gt;</span><span class="built_in">console</span>.log(x), [m])</span><br></pre></td></tr></table></figure>

<br />

<h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><p>目的：</p>
<p>如果你需要一个值，在组件不断 render 时<strong>保持不变</strong></p>
<p>初始化：<code>const count = useRef(0)</code>，<a href="https://github.com/Drwna/react-demo/blob/f254a704441469d57458d56a3367264d0165e96e/src/index.js#L6">code</a></p>
<p>读取：<code>count.current</code></p>
<p>为什么需要 current ?</p>
<p> 为了保证两次 useRef 是同一个值（只有引用能做到）</p>
<p>useRef 不会自动更新 UI。</p>
<p>拓展：</p>
<p><a href="https://v3.vuejs.org/api/refs-api.html#refs">vue3 的 ref，</a></p>
<p>初始化：<code>const count = ref(0)</code></p>
<p>读取：<code>count.value</code></p>
<p>不同点：Vue3 会自动 render。</p>
<h3 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h3><p><a href="https://codesandbox.io/s/snowy-dust-g9i0w">demo1</a>：props 无法传递 ref 属性</p>
<p><a href="https://codesandbox.io/s/crazy-matsumoto-6l6mh">demo2</a>：实现 ref 的传递</p>
<p><a href="https://codesandbox.io/s/amazing-snow-9f5g3">demo3</a>：两次 ref 传递得到 button 的引用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> buttonRef = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;buttonRef&quot;</span>, buttonRef);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>React.forwardRef<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Button3</span> <span class="attr">ref</span>=<span class="string">&#123;buttonRef&#125;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">Button3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Button2 = <span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(props);</span><br><span class="line">  <span class="built_in">console</span>.log(ref);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;red&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实现 ref 的传递</span></span><br><span class="line"><span class="keyword">const</span> Button3 = forwardRef(Button2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const Button4 = forwardRef((props, ref) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(props);</span></span><br><span class="line"><span class="comment">//   console.log(ref);</span></span><br><span class="line"><span class="comment">//   return &lt;button className=&quot;red&quot; ref=&#123;ref&#125; &#123;...props&#125; /&gt;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure>



<p>useRef：</p>
<ul>
<li>可以用来引用 DOM 对象</li>
<li>也可以用来引用 普通对象</li>
</ul>
<p>forwardRef：</p>
<ul>
<li>由于 props 不包含 ref，所以需要 forwardRef</li>
<li>为生命 props 不包含 ref ？以为大部分时候不需要。</li>
</ul>
<br />

<h2 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h2><p>用于自定义 ref 的属性。<a href="https://github.com/puxiao/react-hook-tutorial/blob/master/13%20useImperativeHandle%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md">推荐阅读</a></p>
<p><a href="https://codesandbox.io/s/awesome-goldwasser-v7vsp">demo1 使用 useImperativeHandle</a></p>
<p><a href="https://codesandbox.io/s/elegant-poitras-mxoym">demo2 不使用 useImperativeHandle</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> ChildComponent = forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>); <span class="comment">//子组件定义内部变量count</span></span><br><span class="line">  <span class="comment">//子组件定义内部函数 addCount</span></span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//子组件通过useImperativeHandle函数，将addCount函数添加到父组件中的ref.current中</span></span><br><span class="line">  useImperativeHandle(ref, <span class="function">() =&gt;</span> (&#123; addCount &#125;));</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;count&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addCount&#125;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Imperative</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> childRef = useRef(<span class="literal">null</span>); <span class="comment">//父组件定义一个对子组件的引用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    childRef.current.addCount(); <span class="comment">//父组件调用子组件内部 addCount函数</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* 父组件通过给子组件添加 ref 属性，将childRef传递给子组件，</span></span><br><span class="line"><span class="xml">            子组件获得该引用即可将内部函数添加到childRef中 */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">ref</span>=<span class="string">&#123;childRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickHandle&#125;</span>&gt;</span>child component do something<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Imperative</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p>封装数据操作</p>
<p>简单例子，贴心例子</p>
<p>还可以在自定义 Hook 里使用 Context</p>
<p>useState 只说了不能在 if 里，没说不能在函数里运行，只要这个函数在函数组件里运行即可。</p>
<h2 id="Stale-Closure"><a href="#Stale-Closure" class="headerlink" title="Stale Closure"></a>Stale Closure</h2><p>过时闭包</p>
<p>参考<a href="https://dmitripavlutin.com/react-hooks-stale-closures/">文章链接</a></p>
<br />



<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-11-29_23-27-35.png" alt="Snipaste_2021-11-29_23-27-35"></center>



















]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react函数组件</title>
    <url>/2021/11/24/51/</url>
    <content><![CDATA[<h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Hello = <span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Hello = <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<span id="more"></span>

<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setN(n + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;n&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<br />

<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><a href="https://zh-hans.reactjs.org/docs/hooks-effect.html">useEffect</a></h2><h3 id="模拟-componentDidMount"><a href="#模拟-componentDidMount" class="headerlink" title="模拟 componentDidMount:"></a>模拟 <code>componentDidMount</code>:</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect( <span class="function">()=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;第一次渲染&#x27;</span>)&#125;, [] )</span><br></pre></td></tr></table></figure>

<br />

<h3 id="模拟-componentDidUpdate"><a href="#模拟-componentDidUpdate" class="headerlink" title="模拟 componentDidUpdate:"></a>模拟 <code>componentDidUpdate</code>:</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect( <span class="function">()=&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;任意属性变更&#x27;</span>)&#125; )</span><br><span class="line">useEffect( <span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;n 变了&#x27;</span>)&#125;, [n])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;state 变了&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;n 变了&quot;</span>);</span><br><span class="line">  &#125;, [n]);</span><br></pre></td></tr></table></figure>

<br />

<h3 id="模拟-componentWillUnmount"><a href="#模拟-componentWillUnmount" class="headerlink" title="模拟 componentWillUnmount:"></a>模拟 <code>componentWillUnmount</code>:</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect( <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;第一次渲染&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;组件要死了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [childVisible, setChildVisible] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> show = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setChildVisible(<span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;childVisible ? (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setChildVisible(false)&#125;&gt;hide<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      ) : (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;show&#125;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      )&#125;</span></span><br><span class="line"><span class="xml">      &#123;childVisible ? <span class="tag">&lt;<span class="name">Child</span> /&gt;</span> : null&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;渲染或变化了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Child 销毁了&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<br />

<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>函数组件执行的时候，就相当于 constructor</p>
<br />

<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p><a href="https://zh-hans.reactjs.org/docs/react-api.html#reactmemo">React.memo</a></p>
<p>useMemo</p>
<br />

<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>函数组件的返回值 就是 render 的返回值。</p>
<br />

<h2 id="自定义-Hook-之-useUpdate"><a href="#自定义-Hook-之-useUpdate" class="headerlink" title="自定义 Hook 之 useUpdate"></a>自定义 Hook 之 useUpdate</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useUpdate = <span class="function">(<span class="params">fn, dep</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setCount(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line">    &#125;, [dep]);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [count, fn]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setN(n + <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 使用</span></span><br><span class="line">    useUpdate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;n变了&quot;</span>);</span><br><span class="line">    &#125;, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;n&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a href="https://codesandbox.io/s/flamboyant-elion-jvtl2">useRef demo</a></p>
<p><a href="https://codesandbox.io/s/wizardly-grothendieck-ek0i5">useContext demo</a></p>
<br />

<h2 id="能用函数组件就用函数组件"><a href="#能用函数组件就用函数组件" class="headerlink" title="能用函数组件就用函数组件"></a>能用函数组件就用函数组件</h2><p>因为简单。</p>
<br />

















]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>router-demo</title>
    <url>/2021/10/22/47/</url>
    <content><![CDATA[<p>路由是什么？</p>
<p>分发请求。</p>
<span id="more"></span>

<p>维基百科 路由：</p>
<blockquote>
<p><strong>路由</strong>（<strong>routing</strong>）就是通过互联的<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%AF%E7%B6%B2">网络</a>把<a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E6%81%AF">信息</a>从源地址传输到目的地址的活动。路由发生在<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B">OSI网络参考模型中</a>的第三层即<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%B1%82">网络层</a>。</p>
<p>路由引导<a href="https://zh.wikipedia.org/w/index.php?title=%E5%88%86%E7%BB%84%E8%BD%89%E9%80%81&action=edit&redlink=1">分组转送</a>，经过一些中间的<a href="https://zh.wikipedia.org/wiki/%E7%AF%80%E9%BB%9E">节点</a>后，到它们最后的目的地。作成硬件的话，则称为<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>。路由通常根据<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E8%A1%A8">路由表</a>——一个存储到各个目的地的最佳路径的表——来引导分组转送。因此为了有效率的转送分组，创建存储在路由器<a href="https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94">存储器</a>内的路由表是非常重要的。</p>
</blockquote>
<h3 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h3><p>任何情况下都能做前端路由</p>
<p>SEO 不友好，服务器收不到 hash</p>
<p>Google 有针对 hash 模式的优化</p>
<iframe src="https://codesandbox.io/embed/router-hash-xx9h7?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="router-hash"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>





<h3 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h3><p>后端将所有前端路由都渲染到同一个页面，不是 404 页面</p>
<p>IE 8 以下不支持</p>
<iframe src="https://codesandbox.io/embed/router-history-hhqub?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="router-history"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>



<h3 id="memory-模式"><a href="#memory-模式" class="headerlink" title="memory 模式"></a>memory 模式</h3><p>将路径存在 localstorage 中</p>
<p>缺点：路径是空的，单机版路由</p>
<iframe src="https://codesandbox.io/embed/router-memory-m2ep8?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="router-memory"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>







<p><a href="https://juejin.cn/post/6844903890278694919">【前端进阶】彻底弄懂前端路由</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>react类组件</title>
    <url>/2021/11/24/39/</url>
    <content><![CDATA[<h2 id="创建-Class-组件"><a href="#创建-Class-组件" class="headerlink" title="创建 Class 组件"></a>创建 Class 组件</h2><ol>
<li><p>ES6 方式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>ES5 方式（过时）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A = React.createClass(&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> A</span><br><span class="line"><span class="comment">// 由于 ES5 不支持 class，才会有这种方法</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><h3 id="传入-props-给-B-组件"><a href="#传入-props-给-B-组件" class="headerlink" title="传入 props 给 B 组件"></a>传入 props 给 B 组件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;<span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onClick = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">B</span> <span class="attr">name</span>=<span class="string">&#123;this.state.n&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onClick&#125;</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部数据被封装为一个对象</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;frank&#x27;, onClick:...,children: &#x27;hi&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<br />

<p>###初始化</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this.props 就是外部数据 对象的地址 了</span></span><br></pre></td></tr></table></figure>

<br />

<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;this.props.name&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.chrldren&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过 this.props.xxx 读取</span></span><br></pre></td></tr></table></figure>



<h3 id="props-的作用"><a href="#props-的作用" class="headerlink" title="props 的作用"></a>props 的作用</h3><p>接受外部数据</p>
<ul>
<li>只能读不能写</li>
<li>外部数据由父组件传递</li>
</ul>
<p>接受外部函数</p>
<ul>
<li>在恰当的时机，调用该函数</li>
<li>该函数一般是父组件的函数</li>
</ul>
<br />



<h2 id="state-amp-setState"><a href="#state-amp-setState" class="headerlink" title="state &amp; setState"></a>state &amp; setState</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">user</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br />

<h3 id="读写-State"><a href="#读写-State" class="headerlink" title="读写 State"></a>读写 State</h3><h4 id="读-this-state"><a href="#读-this-state" class="headerlink" title="读 this.state"></a>读 <code>this.state</code></h4><p><code>this.state.user.name</code></p>
<br />

<h4 id="写-this-setState-fn"><a href="#写-this-setState-fn" class="headerlink" title="写 this.setState(???,fn)"></a>写 <code>this.setState(???,fn)</code></h4><p><code>this.setState(newState, fn)</code></p>
<p>注意 setState 不会立刻改变 this.state，会在当前代码运行完后，再去更新 this.state，从而触发 UI 更新。（异步）</p>
<p><code>this.setState((state, props) =&gt; newState, fn)</code></p>
<p>这种方式的 state 更容易理解</p>
<p>fn 会在写入成功后执行。</p>
<p>shallow merge: setState 会自动将新的 state 与 旧的 state 进行一级合并。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">x</span>: <span class="built_in">this</span>.state.x + <span class="number">1</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onClick2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState( <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">x</span>: state.x + <span class="number">2</span> &#125;) );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="built_in">this</span>.state.x + <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// callback</span></span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123; <span class="attr">x</span>: <span class="built_in">this</span>.state.x + <span class="number">1</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>修改 this.state 的属性值，不推荐用！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.state.x += <span class="number">1</span></span><br><span class="line"><span class="built_in">this</span>.setState(<span class="built_in">this</span>.state)</span><br></pre></td></tr></table></figure>

<br />



<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><strong><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a></strong></p>
<br />

<h3 id="类比如下代码"><a href="#类比如下代码" class="headerlink" title="类比如下代码"></a>类比如下代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)这是 div 的 create / construct 过程div.textContent = <span class="string">&#x27;hi&#x27;</span>这是初始化 statedocument。body.appendChild(div)这是 div 的 mount 过程div.textContent = <span class="string">&#x27;hi2&#x27;</span>这是 div 的 update 过程div.remove()这是 div 的 unmount 过程</span><br></pre></td></tr></table></figure>

<br />

<h3 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h3><p><code>constructor()</code> </p>
<p><code>static getDerivedStateFromProps()</code></p>
<p><code>shouldComponentUpdate()</code></p>
<p><code>render()</code></p>
<p><code>getSnapshotBeforeUpdate()</code></p>
<p><code>componentDidMount()</code></p>
<p><code>componentDidUpdate()</code></p>
<p><code>componentWillUnmount()</code></p>
<p><code>static getDerivedStateFromError()</code></p>
<p><code>componentDidCatch()</code></p>
<br />



<h3 id="函数列表-必会"><a href="#函数列表-必会" class="headerlink" title="函数列表-必会"></a>函数列表-必会</h3><h4 id="constructor-在这里初始化-state"><a href="#constructor-在这里初始化-state" class="headerlink" title="constructor() - 在这里初始化 state"></a><code>constructor()</code> - 在这里初始化 state</h4><h4 id="shouldComponentUpdate-return-false-阻止更新"><a href="#shouldComponentUpdate-return-false-阻止更新" class="headerlink" title="shouldComponentUpdate() - return false 阻止更新"></a><code>shouldComponentUpdate()</code> - return false 阻止更新</h4><h4 id="render-创建虚拟-DOM"><a href="#render-创建虚拟-DOM" class="headerlink" title="render() - 创建虚拟 DOM"></a><code>render()</code> - 创建虚拟 DOM</h4><h4 id="componentDidMount-组件已出现在页面"><a href="#componentDidMount-组件已出现在页面" class="headerlink" title="componentDidMount() - 组件已出现在页面"></a><code>componentDidMount()</code> - 组件已出现在页面</h4><h4 id="componentDidUpdate-组件已更新"><a href="#componentDidUpdate-组件已更新" class="headerlink" title="componentDidUpdate() - 组件已更新"></a><code>componentDidUpdate()</code> - 组件已更新</h4><h4 id="componentWillUnmount-组件将死"><a href="#componentWillUnmount-组件将死" class="headerlink" title="componentWillUnmount() - 组件将死"></a><code>componentWillUnmount()</code> - 组件将死</h4><br />

<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>用途：</p>
<p>初始化 props</p>
<p>初始化 state，但此时不能调用 setState</p>
<p>用来写 bind this</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;    ...    <span class="built_in">this</span>.onClick = <span class="built_in">this</span>.onClick.bind(<span class="built_in">this</span>)&#125;</span><br></pre></td></tr></table></figure>

<p>可以用新语法代替</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;...&#125;onClick = <span class="function">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<br />

<h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><p>用途：</p>
<p>返回 true 表示不阻止 UI 更新</p>
<p>返回 false 表示阻止 UI 更新</p>
<p>面试常问：shouldComponentUpdate 有什么用？</p>
<p>答：它允许我们手动判断是否要进行组件更新，我们可以根据应用场景灵活地设置返回值，以避免不必要地更新。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;<span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;    <span class="built_in">super</span>(props);    <span class="built_in">this</span>.state = &#123;      <span class="attr">n</span>: <span class="number">1</span>,    &#125;;  &#125;  onClick = <span class="function">() =&gt;</span> &#123;    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">n</span>: state.n + <span class="number">1</span> &#125;));    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">n</span>: state.n - <span class="number">1</span> &#125;));  &#125;;	<span class="comment">// &#123;n:1&#125; 和 &#123;n:1&#125;  shouldComponentUpdate(nextProps, nextState) &#123;      // 阻止渲染    if (nextState.n === this.state.n) &#123;      return false;    &#125; else &#123;      return true;    &#125;  &#125;  render() &#123;    console.log(&quot;render了一次&quot;);    return (      &lt;div&gt;        App组件&lt;br /&gt;        &#123;this.state.n&#125;        &lt;button onClick=&#123;this.onClick&#125;&gt;+1&lt;/button&gt;      &lt;/div&gt;    );  &#125;&#125;export default App;</span></span><br></pre></td></tr></table></figure>



<p>可以使用 <code>React.PureComponent</code> 替代 <code>React.Component</code> 实现 shouldComponentUpdate()</p>
<p>PureComponent 会在 render 之前对比新 state 和旧 state 的每一个 key，以及新 props 和旧 props 的每一个 key。<br>如果所有 key 的值全都一样，就不会 render；如果有任何一个 key 的值不同，就会 render。</p>
<p><a href="https://zh-hans.reactjs.org/docs/react-api.html#reactpurecomponent">官方文档</a></p>
<blockquote>
<p>注意</p>
<p><code>React.PureComponent</code> 中的 <code>shouldComponentUpdate()</code> 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。</p>
<p>仅在你的 props 和 state 较为简单时，才使用 <code>React.PureComponent</code>。</p>
</blockquote>
<br />



<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>用途：</p>
<p>展示视图    <code>return (&lt;div&gt; ... &lt;/div&gt;)</code>，只能有一个根元素。</p>
<p>两个根元素，要用 <code>&lt;React.Fragment&gt;</code> 包起，可以缩写为 <code>&lt;&gt; &lt;/&gt;</code></p>
<p>技巧：</p>
<p>render 里面可以写 <code>if...else</code>、<code>?:</code>表达式</p>
<p>不能直接写 <code>for</code>循环，需要用数组</p>
<p>render 里面可以写 <code>aray.map</code>（循环）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;    <span class="built_in">super</span>(props);    <span class="built_in">this</span>.state = &#123;      <span class="attr">n</span>: <span class="number">1</span>,      <span class="attr">array</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    &#125;;  &#125;  onClick = <span class="function">() =&gt;</span> &#123;    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">n</span>: state.n + <span class="number">1</span> &#125;));  &#125;;<span class="comment">// if...else  render() &#123;   let message   if(this.state.n%2 === 0)&#123;     message = &lt;span&gt;偶数&lt;/span&gt;   &#125;else&#123;     message = &lt;span&gt;奇数&lt;/span&gt;   &#125;   return(     &lt;React.Fragment&gt;     &#123;message&#125;     &lt;button onClick=&#123;this.onClick&#125;&gt;+1&lt;/button&gt;     &lt;/React.Fragment&gt;   )  &#125;// ? :  render() &#123;    return (      &lt;&gt;        &#123;this.state.n % 2 === 0 ?        &lt;span&gt;偶数&lt;/span&gt; :        &lt;span&gt;奇数&lt;/span&gt;&#125;        &lt;button onClick=&#123;this.onClick&#125;&gt;+1&lt;/button&gt;      &lt;/&gt;    );  &#125;// for 循环  render() &#123;    let result = [];    for (let i = 0; i &lt; this.state.array.length; i++) &#123;      result.push(this.state.array[i]);    &#125;    return result;  &#125;// for 循环 map()render() &#123;    return this.state.array.map((n) =&gt; &lt;span key=&#123;n&#125;&gt;&#123;n&#125;&lt;/span&gt;);  &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<br />

<h2 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h2><p>用途：</p>
<p>在元素插入页面后执行代码，这些代码依赖 DOM</p>
<p>比如，想获取 div 的高度，最好在这里写。</p>
<p>此处可以发起<strong>加载数据</strong>的 Ajax 请求（官方推荐）</p>
<p>首次渲染 会执行此钩子</p>
<p><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidmount">官方文档</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 想获取 div 的高度...componentDidMount()&#123;  const div = document.querySelector(&#x27;#xxx&#x27;);  const &#123;width&#125; = div.getBoundingClientRect()  this.setState(&#123;width&#125;)&#125;render() &#123;  return(    &lt;div id=&#x27;xxx&#x27;&gt;hello, width, &#123;this.state.width&#125;px&lt;/div&gt;  )&#125;</span></span><br></pre></td></tr></table></figure>

<p>改用 ref</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;  divRef = <span class="literal">undefined</span>;  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;    <span class="built_in">super</span>(props);    <span class="built_in">this</span>.state = &#123;      <span class="attr">n</span>: <span class="number">1</span>,      <span class="attr">width</span>: <span class="literal">undefined</span>,    &#125;;    <span class="built_in">this</span>.divRef = React.createRef();  &#125;  onClick = <span class="function">() =&gt;</span> &#123;    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">n</span>: state.n + <span class="number">1</span> &#125;));  &#125;;  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;    <span class="keyword">const</span> div = <span class="built_in">this</span>.divRef.current;    <span class="keyword">const</span> &#123; width &#125; = div.getBoundingClientRect();    <span class="built_in">this</span>.setState(&#123; width &#125;);  &#125;  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.divRef&#125;</span>&gt;</span>hello, width: &#123;this.state.width&#125;px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">ref 官方文档</a></p>
<br />



<h2 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h2><p>用途：</p>
<p>在视图更新后执行。第一次渲染不执行。</p>
<p>此处也可以发起 Ajax 请求，用于<strong>更新数据</strong> （<a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate">文档</a>）。</p>
<p>首次渲染<strong>不会</strong> 执行此钩子。</p>
<p>在此处 setState 可能会引起无限循环，除非放在 if 里。</p>
<p>若 shouldComponentUpdate 返回 false，则不会触发此钩子。</p>
<br />



<h2 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h2><p>用途：</p>
<p>组件将要 <strong>被移出页面 然后被销毁</strong> 时执行代码</p>
<p>unmount 过的组件不会再次 mount</p>
<p>举例：</p>
<ul>
<li><p>如果你在 c…DidMount 里面监听了 window scroll</p>
<p>那么你就要在 c…WillUnmount 里面取消监听</p>
</li>
<li><p>如果你在 c…DidMount 里面创建了 Timer</p>
<p>那么你就要在 c…WillUnmout 里面取消 Timer</p>
</li>
<li><p>如果你在 c…DidMount 里面创建了 Ajax 请求</p>
<p>那么你就要在 c…WillUnmount 里面取消请求</p>
</li>
<li><p>否则你就是菜逼。</p>
</li>
</ul>
<p><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentwillunmount">官方文档</a></p>
<br />



<h2 id="生命周期回顾"><a href="#生命周期回顾" class="headerlink" title="生命周期回顾"></a>生命周期回顾</h2><ul>
<li><p><code>constructor()</code> - 在这里初始化 state</p>
</li>
<li><p><code>shouldComponentUpdate()</code> - return false 阻止更新</p>
</li>
<li><p><code>render()</code> - 创建虚拟 DOM</p>
</li>
<li><p><code>componentDidMount()</code> - 组件已出现在页面</p>
</li>
<li><p><code>componentDidUpdate()</code> - 组件已更新</p>
</li>
<li><p><code>componentWillUnmount()</code> - 组件将死</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>vue数据响应式的理解</title>
    <url>/2021/10/16/56/</url>
    <content><![CDATA[<h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><p><strong>数据响应式是指，在改变数据的时候，视图也会跟着更新</strong>。</p>
<p><strong>当数据改变后，Vue会通知到使用该数据的代码。视图渲染中使用了数据，数据改变后，视图也会自动更新。</strong></p>
<p>Vue的响应式原理依赖于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a>, 通过设置对象的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters">getter/setter</a> 方法来监听数据。</p>
<p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter.</p>
<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。</p>
<p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p>
<h3 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a><strong>对于对象</strong></h3><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></table></figure>

<p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.set(vm.someObject, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.someObject,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>有时你可能需要为已有对象赋值多个新 property，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></span><br><span class="line"><span class="built_in">this</span>.someObject = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.someObject, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a><strong>对于数组</strong></h3><p>通过 vue 数组的<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B">变更方法</a>来更新视图。</p>
<h3 id="官方-深入响应式原理"><a href="#官方-深入响应式原理" class="headerlink" title="官方 深入响应式原理"></a><a href="https://vuejs.bootcss.com/guide/reactivity.html">官方 深入响应式原理</a></h3>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack demo</title>
    <url>/2021/10/14/07/</url>
    <content><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><strong>webpack</strong></h2><p><a href="https://gitee.com/draganet/webpack-demo-1">webpack-demo</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn add webpack webpack-cli --dev</span><br><span class="line"></span><br><span class="line">npx webpack --version</span><br></pre></td></tr></table></figure>

<p>在 package.json 中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;rm -rf dist &amp;&amp; webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server --dev</span><br></pre></td></tr></table></figure>

<p>在 webpage.config.js 中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">devtool: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">devServer: &#123;</span><br><span class="line">  static: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add html-webpack-plugin --devex</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;index.[contenthash].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class="line">  	title: <span class="string">&#x27;My App&#x27;</span>,</span><br><span class="line">  	template: <span class="string">&#x27;src/assets/index.html&#x27;</span></span><br><span class="line">  &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add css-loader --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add style-loader --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">     <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].css&#x27;</span></span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h2 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add sass dart-sass --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>: /\.scss$/i,</span><br><span class="line">use: [</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">     loader: <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">     options: &#123; implementation: require(<span class="string">&quot;dart-sass&quot;</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>: /\.less$/i,</span><br><span class="line">use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="stylus-loader"><a href="#stylus-loader" class="headerlink" title="stylus-loader"></a>stylus-loader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add stylus stylus-loader --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>: /\.styl$/i,</span><br><span class="line">use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add file-loader --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>: /\.(png|svg|jpg|gif)$/,</span><br><span class="line">      use: [<span class="string">&quot;file-loader&quot;</span>]</span><br></pre></td></tr></table></figure>





<p><a href="https://blog.csdn.net/xiaolinlife/article/details/106533080?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">path.resolve和__dirname</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>大屏可视化项目实战</title>
    <url>/2022/02/05/08/</url>
    <content><![CDATA[<p><a href="https://draganet.gitee.io/bigscreen-website/#/">预览链接</a></p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2022-02-06_00-16-58.png" alt="Snipaste_2022-02-06_00-16-58" width="800px"></center>

<span id="more"></span>



<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>技术栈：React + ReactRouter + Echart + Typescript </p>
<p>这个项目是我在学习适配大屏与 Echart 时，仿的开源项目做的。</p>
<p>页面布局使用了 Grid 和 Flex 布局，使用 rem 动态记算适配不同尺寸的屏幕。</p>
<p>项目中包含的图例有柱形图、折线图、饼图、地图和表格等。</p>
<p>通过这个项目，我掌握了大屏可视化项目的制作技巧。</p>
<h2 id="适配屏幕"><a href="#适配屏幕" class="headerlink" title="适配屏幕"></a>适配屏幕</h2><p>市面上大部分的显示器几乎都是<code>16：9</code>的尺寸，也就是<code>1920 * 1080</code>的分辨率。</p>
<p><strong>理想中的效果：</strong></p>
<ul>
<li><p>当屏幕的尺寸比例刚好是16：9时，页面能刚好全屏展示，内容占满显示器</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/abxl1-8g4hn.png" alt="abxl1-8g4hn" width="400px"></center></li>
</ul>
<ul>
<li><p>当屏幕的尺寸比例小于16：9时，页面上下留白，左右占满并上下居中，显示比例保持16：9</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/aw0qr-ewt2l.png" alt="aw0qr-ewt2l" width="400px"></center></li>
</ul>
<ul>
<li><p>当屏幕尺寸比例大于16：9时，页面左右留白，上下占满并居中，显示比例保持16：9</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/ajxvu-1zcut.png" alt="ajxvu-1zcut" width="400px"></center></li>
</ul>
<blockquote>
<p>当屏幕大小改变时，动态计算中间内容的显示比例大小，保证内容一直保持16：9</p>
</blockquote>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/2022-2-5-dfa54%20(1).gif" alt="2022-2-5-dfa54 (1)" width="800px"></center>





<h3 id="解决方案：-rem"><a href="#解决方案：-rem" class="headerlink" title="解决方案： rem"></a>解决方案： rem</h3><p><code>rem(font size of the root element)</code></p>
<p>是 css3 中新增的一个大小单位，即相对于根元素 font-size 值的大小。</p>
<p>思路就是动态的计算出页面的 fontsize 从而改变 rem 的大小。</p>
<h3 id="rem-计算公式"><a href="#rem-计算公式" class="headerlink" title="rem 计算公式"></a>rem 计算公式</h3><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/%E5%9B%BE%E7%89%871-2022.png" alt="图片1-2022" width="400px"></center>

<p><strong>W<sub>p</sub> 为页面有效宽度，H<sub>p</sub> 为页面有效宽度</strong></p>
<p><strong>页面左右居中，上下居中，四周留白即可</strong></p>
<p><strong>然后在 head 里用 JS　设置　１rem = W<sub>p</sub> / 100</strong></p>
<h3 id="element-用-rem"><a href="#element-用-rem" class="headerlink" title="element 用 rem"></a>element 用 rem</h3><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/%E5%9B%BE%E7%89%87-2022-2-2.png" alt="图片-2022-2-2" width="800px"></center>

<p>假设某 div 在设计稿中长 100px，设计稿宽度 1920px</p>
<p>那么该 div 在页面中长为 100/1920 * 100rem</p>
<p>最后可以写一个 px() 函数来计算 100px 对应的 rem</p>
<p><strong>写个 scss 函数</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> px(<span class="variable">$n</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$n</span> /  <span class="number">2420</span> * <span class="number">100rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>大屏可视化项目<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> clientHeight = <span class="built_in">document</span>.documentElement.clientHeight</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.pageWidth = clientWidth / clientHeight &gt; <span class="number">16</span> / <span class="number">9</span> ? clientHeight * (<span class="number">16</span> / <span class="number">9</span>) : clientWidth</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> pageHeight = pageWidth / (<span class="number">16</span> / <span class="number">9</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置一个 rem</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> string = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;style&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">     html&#123;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      font-size: <span class="subst">$&#123;pageWidth / <span class="number">100</span>&#125;</span>px</span></span></span><br><span class="line"><span class="string"><span class="javascript">     &#125;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/style&gt;`</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(string)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// root.style.width = pageWidth + &#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">    root.style.height = pageHeight + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">    root.style.marginTop = (clientHeight - pageHeight) / <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.tsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="使用-grid-布局"><a href="#使用-grid-布局" class="headerlink" title="使用 grid 布局"></a>使用 grid 布局</h2><p><a href="https://drwna.github.io/2021/07/09/28/?highlight=grid#grid-template-areas">grid-template-areas</a></p>
<p>效果图</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2022-02-06_00-03-20.png" alt="Snipaste_2022-02-06_00-03-20" width="800px"></center>

<p>主要代码：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">  &gt; <span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template:</span><br><span class="line">    <span class="string">&#x27;box1 box2 box4 box5&#x27;</span> <span class="number">755</span>fr</span><br><span class="line">    <span class="string">&#x27;box3 box3 box4 box5&#x27;</span> <span class="number">363</span>fr / <span class="number">366</span>fr <span class="number">361</span>fr <span class="number">811</span>fr <span class="number">747</span>fr;</span><br><span class="line">    &gt; <span class="selector-class">.section1</span> &#123;</span><br><span class="line">      grid-area: box1;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.section2</span> &#123;</span><br><span class="line">      grid-area: box2;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.section3</span> &#123;</span><br><span class="line">      grid-area: box3;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.section4</span> &#123;</span><br><span class="line">      grid-area: box4;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.section5</span> &#123;</span><br><span class="line">      grid-area: box5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用-Echart"><a href="#使用-Echart" class="headerlink" title="使用 Echart"></a>使用 Echart</h2><p>安装 <code>yarn add -D echarts</code></p>
<p>引入 <code>import * as echarts from &#39;echarts&#39;;</code></p>
<p>chart1 效果图：</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2022-02-06_00-33-07.png" alt="Snipaste_2022-02-06_00-33-07" width="500px"></center>

<p>chart1 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useEffect, useRef&#125; from &#x27;react&#x27;;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line"></span><br><span class="line">const Chart1 = () =&gt; &#123;</span><br><span class="line">  const px = (n) =&gt; n / 2420 * (window as any).pageWidth;</span><br><span class="line">  const divRef = useRef(null);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const myChart = echarts.init(divRef.current);</span><br><span class="line">      </span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      title: &#123;show: false&#125;,</span><br><span class="line">      legend: &#123;show: false&#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: [&#x27;城关区&#x27;, &#x27;七里河区&#x27;, &#x27;西固区&#x27;, &#x27;安宁区&#x27;, &#x27;红古区&#x27;, &#x27;永登区&#x27;, &#x27;皋兰区&#x27;, &#x27;榆中区&#x27;, &#x27;兰州新区&#x27;],</span><br><span class="line">        axisTick: &#123;show: false&#125;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          fontSize: px(12),</span><br><span class="line">          interval: 0,</span><br><span class="line">          formatter(val) &#123;</span><br><span class="line">            if (val.length &gt; 2) &#123;</span><br><span class="line">              const array = val.split(&#x27;&#x27;);</span><br><span class="line">              array.splice(2, 0, &#x27;\n&#x27;);</span><br><span class="line">              return array.join(&#x27;&#x27;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              return val;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;</span><br><span class="line">        splitLine: &#123;show: false&#125;,</span><br><span class="line">        axisLine: &#123;lineStyle: &#123;color: &#x27;#686a75&#x27;&#125;&#125;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          fontSize: px(12)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      grid: &#123;</span><br><span class="line">        x: px(40),</span><br><span class="line">        y: px(40),</span><br><span class="line">        x2: px(40),</span><br><span class="line">        y2: px(40)</span><br><span class="line">      &#125;,</span><br><span class="line">      series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;人数&#x27;,</span><br><span class="line">          type: &#x27;bar&#x27;,</span><br><span class="line">          data: [5, 20, 24, 10, 10, 32, 8, 12, 19, 6],</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;bordered 管辖统计&quot;&gt;</span><br><span class="line">      &lt;h2&gt;案发派出所管辖统计&lt;/h2&gt;</span><br><span class="line">      &lt;div ref=&#123;divRef&#125; className=&quot;chart&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">export &#123;Chart1&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="画地图"><a href="#画地图" class="headerlink" title="画地图"></a>画地图</h2><p>需要引入 <a href="https://github.com/yezongyang/china-geojson">china.json</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import china from &#x27;../geo/china.json&#x27;;</span><br></pre></td></tr></table></figure>

<p>echart 中注册一个地图：</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2022-02-06_00-43-56.png" alt="Snipaste_2022-02-06_00-43-56" width="600px"></center>



<blockquote>
<p>参考 <a href="https://juejin.cn/post/6972416642600927246">https://juejin.cn/post/6972416642600927246</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>rem</tag>
      </tags>
  </entry>
  <entry>
    <title>异步与Promise</title>
    <url>/2021/09/07/36/</url>
    <content><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul>
<li><p><strong>如果能直接拿到将结果</strong></p>
<p>那就是同步</p>
<p>比如你在医院挂号，你拿到号才会离开窗口</p>
<p>同步任务可能消耗 10 毫秒，也可能需要 3 秒</p>
<p>总之不拿到结果你是不会离开的，这就是同步</p>
</li>
<li><p><strong>如果不能直接拿到结果</strong></p>
<p>那就异步</p>
<p>比如你在餐厅门口等位，你拿到号后可以去干别的事比如逛街</p>
<p>你可以每 10 分钟取餐厅问一下排到自己了没（轮询）</p>
<p>也可以扫码用微信接受通知（回调）</p>
</li>
</ul>
<h2 id="异步举例"><a href="#异步举例" class="headerlink" title="异步举例"></a>异步举例</h2><ul>
<li><p><strong>以 AJAX 为例</strong></p>
<p><code>request.send()</code> 之后，并不能直接得到 response</p>
<p>用 <code>console.log(request.response)</code> 试试</p>
<p>必须等到 readyState 变为 4 后，浏览器才会<strong>回头调用</strong> <code>request.onreadystatechange</code> 函数</p>
<p>我们才能得到 <code>request.response</code></p>
<p>这就跟餐厅给你发微信提醒的过程类似</p>
</li>
<li><p><strong>回调 callback</strong></p>
<p>你写给自己用的函数，不是回调</p>
<p>你写给别人用的函数，就是回调</p>
<p><code>request.onreadystatechange</code> 就是写个浏览器调用的</p>
<p>意思是你（浏览器）回头调用一下这个函数</p>
</li>
<li><p>简单来理解就是：同步按你的代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJSON.onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/5.json&#x27;</span>);</span><br><span class="line">    request.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; request.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> object = <span class="built_in">JSON</span>.parse(request.response);</span><br><span class="line">            myName.textContent = object.name;</span><br><span class="line">	        <span class="built_in">console</span>.log(request.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send();</span><br><span class="line">    <span class="comment">// console.log(request.resopne)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.response);</span><br><span class="line">        <span class="comment">// 或者将 放在 request.onreadystatechange 函数中</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// request.send()执行完，再执行 request.onreadystatechange 函数</span></span><br><span class="line"><span class="comment">// 执行顺序为 response.open() =&gt; respone.send() =&gt; request.onreadystatechange</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/kis_wuyan/article/details/116231729">onreadystatechange 执行两次</a></p>
<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>写了却不调用，给别人调用的函数，就是回调。需自行意会</p>
<p>函数例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<ol>
<li>我调用 f1 没有？</li>
<li>我把 f1 传给 f2 （别人）了没有？</li>
<li>f2 调用 f1 了没有？</li>
</ol>
<p>答：1. 调用了。2.穿了。3.f2 调用了 f1。</p>
<p>那么，f1 是不是我写给 f2 调用的函数？ 是。</p>
<p>所以，f1 是回调。</p>
<hr>


<p>例子2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    fn(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<p>fn(‘hello’) 中的 fn 就是 f1 。</p>
<p>fn(’hello‘) 中的 ’hello’ 会被赋值给参数 x 。</p>
<p>所以 x 就是 ‘hello’。</p>
<h2 id="异步和回调的关系"><a href="#异步和回调的关系" class="headerlink" title="异步和回调的关系"></a>异步和回调的关系</h2><ul>
<li><p><strong>关联</strong></p>
<p>异步任务需要再得到结果时通知 JS 来拿结果</p>
<p>怎么通知？</p>
<p>可以让 JS 留一个函数地址给浏览器（电话号码）</p>
<p>异步任务完成时浏览器调用该函数即可（拨打电话）</p>
<p>同时把任务作为参数传给该函数（通知）</p>
<p>这个函数是我写给浏览器调用的，所以是回调函数</p>
</li>
<li><p><strong>区别</strong></p>
<p>异步任务需要用到回调函数来通知结果</p>
<p>但回调函数不一定只用在异步任务里</p>
<p>回调可以用到同步任务里</p>
<p><code>array.forEach(n=&gt;console.log(n))</code> 就是同步回调</p>
</li>
</ul>
<h2 id="判断同步异步"><a href="#判断同步异步" class="headerlink" title="判断同步异步"></a>判断同步异步</h2><p>如果一个函数的返回值处于</p>
<ul>
<li>setTimeout</li>
<li>AJAX（即 XMLHttpRequest）</li>
<li>AddEventListener</li>
</ul>
<p>这三个东西内部中，那么这个函数就是异步函数</p>
<p>还有其他 API 是异步的，遇到再说。</p>
<p>举例说明：</p>
<p>摇骰子, 随机打印出1-6 中的一个数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇骰子(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123; <span class="comment">// 箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// return undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<p><code> 摇骰子（）</code> 里没有写 return，那就是 return undefined</p>
<p>箭头函数里有 return，返回真正结果</p>
<p>所以这是一个异步函数/异步任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = 摇骰子();</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br></pre></td></tr></table></figure>

<p>如何拿到异步结果？</p>
<p>用回调，写个函数，然后把函数地址给他</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后要求 摇骰子函数 得到结果后 把结果作为参数 传给f1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 摇骰子(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span>) + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">摇骰子(f1); <span class="comment">// 结果</span></span><br></pre></td></tr></table></figure>

<p>简化为箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">摇骰子(f1);</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line">摇骰子(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 再简化为</span></span><br><span class="line">摇骰子(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// 如果参数个数不一致就不能这样简化，有个相关面试题</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 面试题</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"><span class="comment">// 结果为 [1, NaN, NaN]</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;1&#x27;, 0, arr) =&gt; 1</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;2&#x27;, 1, arr) =&gt; NaN</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;3&#x27;, 2, arr) =&gt; NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;3&#x27;</span>].map(<span class="function">(<span class="params">item, i , arr</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">parseInt</span>(item)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br><span class="line"><span class="comment">// 正确结果 [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写 永远使用箭头函数</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">parseInt</span>(item));</span><br></pre></td></tr></table></figure>



<h2 id="异步总结"><a href="#异步总结" class="headerlink" title="异步总结"></a>异步总结</h2><ul>
<li>异步任务不能拿到结果</li>
<li>于是我们传一个回调给异步任务</li>
<li>异步任务完成时调用回调</li>
<li>调用的时候把结果作为参数</li>
</ul>
<h2 id="异步任务两个结果，成功或失败"><a href="#异步任务两个结果，成功或失败" class="headerlink" title="异步任务两个结果，成功或失败"></a>异步任务两个结果，成功或失败</h2><h3 id="两个方法解决"><a href="#两个方法解决" class="headerlink" title="两个方法解决"></a>两个方法解决</h3><p><strong>方法一：回调接受两个参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;    <span class="keyword">if</span>(error)&#123;        <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>); <span class="keyword">return</span>;    &#125;    <span class="built_in">console</span>.log(data.toString()) <span class="comment">// 成功&#125;)</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二：两个回调</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/1.json&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;<span class="comment">/*成功回调*/</span>&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="comment">/*失败回调*/</span>&#125;)ajax(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/1.json&#x27;</span>,&#123;    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;&#125;,    <span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;&#125;&#125;)<span class="comment">// 接受一个对象，对象有两个 key 表示成功和失败</span></span><br></pre></td></tr></table></figure>



<h3 id="这些方法的不足"><a href="#这些方法的不足" class="headerlink" title="这些方法的不足"></a>这些方法的不足</h3><p>不管方法一还是方法二，都有问题</p>
<ol>
<li>不规范，名称五花八门，有人用 success + error，有人用 success + fail，done + fail</li>
<li>容易出现==回调地狱== ，代码变得看不懂</li>
<li>很难进行错无处理</li>
</ol>
<p><strong>回调地狱举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getUser( <span class="function"><span class="params">user</span> =&gt;</span> &#123;    getGroups(user, <span class="function">(<span class="params">groups</span>) =&gt;</span> &#123;        groups.forEach( <span class="function">(<span class="params">g</span>) =&gt;</span> &#123;            g.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.ownerId === user.id)            .forEach(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x))        &#125;)    &#125;)&#125;)<span class="comment">// 仅示例，这只是四层，二十层呢，代码会很难读</span></span><br></pre></td></tr></table></figure>

<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-25_22-12-10.png" alt="Snipaste_2021-09-25_22-12-10" width="800px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline"> 吐槽回调地狱 来源网络</center> 



<h3 id="如何解决回调问题，用-Promise"><a href="#如何解决回调问题，用-Promise" class="headerlink" title="如何解决回调问题，用 Promise"></a>如何解决回调问题，用 Promise</h3><p>有什么办法能解决这三个问题：</p>
<ul>
<li>会犯回调的名字或顺序</li>
<li>拒绝回调地狱，让代码可读性更强</li>
<li>很方便地捕获错误</li>
</ul>
<blockquote>
<p>1976年，Daniel P.Friedman 和 David Wis 俩人提出 Promise 思想</p>
<p>后人基于此发明了 Future、Delay、Deferred等</p>
<p>前端结合 Promise 和 JS，制定了 <a href="https://www.ituring.com.cn/article/66566">Promise/A+规范</a></p>
<p>该规范详细描述了 Promise 的原理和使用方法。</p>
</blockquote>
<h2 id="以-AJAX-的封装为例，来解释-Promise"><a href="#以-AJAX-的封装为例，来解释-Promise" class="headerlink" title="以 AJAX 的封装为例，来解释 Promise"></a>以 AJAX 的封装为例，来解释 Promise</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise MDN</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例ajax = (method, url, options) =&gt; &#123;    const &#123;success, fail&#125; = option; // 析构赋值    // const succes = option.success;    // const fail = option.fail;    const request = new XMLHttpRequest();    request.open(method, url);    request.onreadystatechange = () =&gt; &#123;        if (request.readyState === 4) &#123;            // 成功就调用 success，失败 fail            if (request.status &lt; 400) &#123;                success.call(null, request.response);            &#125;else if (request.status &gt;= 400) &#123;                fail.call(null, request, request.status);            &#125;        &#125;    &#125;    request.rend();&#125;ajax(&#x27;get&#x27;, &#x27;/xxx&#x27;, &#123;    success(response)&#123;&#125;, // function 缩写    // success: function(response)&#123;&#125;    fail: (request, status) =&gt; &#123;&#125;&#125;)</span></span><br></pre></td></tr></table></figure>



<p>Promise 写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先改一下调用姿势ajax(&#x27;get&#x27;, &#x27;/xxx&#x27;, &#123;    success(response)&#123;&#125;,    fail: (request, status) =&gt; &#123;&#125;&#125;)// 上面用到了两个回调，还使用了 success 和 fail// 改成 Promise 写法ajax(&#x27;get&#x27;, &#x27;/xxx&#x27;)    .then((response)=&gt;&#123;&#125;, (request, status)=&gt;&#123;&#125; )// 虽然也是回调// 但是不需要经济 success 和 fail 了// then 的第一个参数就是 success// then 的第二个参数就是 fail</span></span><br></pre></td></tr></table></figure>

<p>请问 ajax() 返回了个啥 ？</p>
<p>返回了一个含有 .then() 方法的对象呗。</p>
<p>那么再请问如何得到这个含有 .then() 的对象呢 ？</p>
<p>那就要改造 ajax 的源码了。</p>
<p><code>return new Promise((resolve, reject) =&gt; &#123;&#125;)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 ajaxajax = (method, url, option) =&gt; &#123;    return new Promise((resolve, reject) =&gt; &#123;        const &#123;success, fail&#125; = option;        const request = new XMLHttpRequest();        request.open(methon, url);        request.onreadystatechange = () =&gt; &#123;            if(request.readyState === 4) &#123;                if(request.status &lt; 400) &#123;                    // 成功                    resolve.call(null, request.response);                &#125;else if(request.status &gt;= 400) &#123;                    // s                    reject.call(null, request);                &#125;            &#125;        &#125;        request.send();    &#125;);&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>小结</strong></p>
<p>第一步：</p>
<ul>
<li><code>retrun new Promise((resolve, reject) =&gt; &#123;...&#125;)</code></li>
<li>任务成功则调用 <code>resolve(result)</code></li>
<li>任务失败则调用 <code>reject(error)</code></li>
<li>resolve 和 reject 会再去调用成功和失败函数</li>
</ul>
<p>第二步：</p>
<ul>
<li>使用 <code>.then(success, fail)</code>传入成功函数和失败函数</li>
</ul>
<hr>
<p>我们自己封装的 ajax 的缺点:</p>
<p>post 无法上传数据。request.send(这里可以上传数据)</p>
<p>不能设置请求头。request.setRequestHeader(key, value)</p>
<p>使用：</p>
<p> <a href="https://www.jquery123.com/jQuery.ajax/">Jquery.ajax</a></p>
<p><a href="http://www.axios-js.com/zh-cn/docs/">axios</a>(推荐)</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析MVC</title>
    <url>/2021/09/19/48/</url>
    <content><![CDATA[<h2 id="MVC是什么"><a href="#MVC是什么" class="headerlink" title="MVC是什么"></a>MVC是什么</h2><p>MVC 是一种设计模式，他将应用分为三个部分：</p>
<p>M 是 Model，数据模型，负责数据相关的任务</p>
<p>V 是 View，视图，负责用户界面</p>
<p>C 是 Controller，控制器，负责监听用户事件，然后调用 M 和 V 更新数据和视图</p>
<h2 id="伪代码实现-MVC"><a href="#伪代码实现-MVC" class="headerlink" title="伪代码实现 MVC"></a>伪代码实现 MVC</h2><p>M</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">M = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123; 程序需要操作的数据或信息 &#125;，</span><br><span class="line">    <span class="attr">create</span>: &#123; 增数据 &#125;,</span><br><span class="line">    <span class="attr">delete</span>: &#123; 删数据 &#125;,</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params">data</span>)</span> &#123; </span><br><span class="line">       <span class="built_in">Object</span>.assign(m.data, data) <span class="comment">// 使用新数据替换旧数据</span></span><br><span class="line">       eventBus.trigger(<span class="string">&#x27;m:upate&#x27;</span>) <span class="comment">// eventBus 触发&#x27;m:update&#x27;信息, 通知 View 刷新 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>:&#123; 获取数据 &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>V</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">V = &#123;</span><br><span class="line">    <span class="attr">el</span>: 需要刷新的元素,</span><br><span class="line">    <span class="attr">html</span>: <span class="string">`显示在页面上的内容`</span></span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        v.el: 需要刷新的元素</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123; 刷新页面 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">C = &#123;</span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        v.init() <span class="comment">//初始化 V</span></span><br><span class="line">        v.render() <span class="comment">// 第一次渲染页面</span></span><br><span class="line">        c.autoBindEvents() <span class="comment">// 自动的事件绑定</span></span><br><span class="line">        eventBus.on(<span class="string">&#x27;m:update&#x27;</span>,<span class="function">()=&gt;</span>&#123;v.render()&#125; <span class="comment">// 当 enentsBus 触发 &#x27;m:update&#x27; 时 V 刷新</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">events</span>:&#123;事件以哈希表的方式记录存储&#125;,</span><br><span class="line">    <span class="function"><span class="title">method</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        data = 新数据</span><br><span class="line">        m.update(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">autoBindEvents</span>(<span class="params"></span>)</span>&#123;自动绑定事件&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Drwna/MVC-demo">mvc-demo</a></p>
<h2 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h2><p>EventBus 又称为事件总线,可以用来进行组件之间的监听和通信。</p>
<p>比如说当 Model 模块中的数据发生更新，触发了 EventBus 上的某个事件，而 Controller 恰好在监听这个事件，当这个事件触发时，Controller 就知道 Model 中的数据发生了更新了，从而做出一些反应</p>
<p>常用 API</p>
<ul>
<li>EventBus.on() 监听事件</li>
<li>EventBus.trigger() 触发事件</li>
<li>EventBus.off() 解绑事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._eventBus = $(<span class="built_in">window</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">eventName, fn</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._eventBus.on(eventName, fn)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">trigger</span>(<span class="params">eventName, data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._eventBus.trigger(eventName, data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">off</span>(<span class="params">eventName, fn</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._eventBus.off(eventName, fn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="表驱动编程"><a href="#表驱动编程" class="headerlink" title="表驱动编程"></a>表驱动编程</h2><p>《代码大全》对表驱动编程的描述：</p>
<blockquote>
<p>表驱动方法是一种使你可以在表中查找信息，而不必用逻辑语句（if 或 case）来把他们找出来的方法。事实上，任何信息都可以通过表来挑选。在简单的情况下，逻辑语句往往更简单而且更直接。但随着逻辑链的复杂，表就变得越来越富于吸引力了。</p>
</blockquote>
<p>表驱动编程的意义在于<strong>逻辑与数据的分离</strong>（类似于事件委托）</p>
<p>例如：if else</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (term === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;一&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (term === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;二&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (term === <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;三&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;？？？&#x27;</span>  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想添加一个新的名词翻译，需要再添加一个if-else逻辑，例如：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (term === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;一&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (term === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;二&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (term === <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;三&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (term === <span class="string">&#x27;4&#x27;</span>) &#123;   </span><br><span class="line">        <span class="comment">// 此处添加了一个新的名词翻译</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;四&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;？？？&#x27;</span>  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>改为表驱动</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> terms = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;一&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;二&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> terms[term];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想添加一个新的名词翻译，只需要在 terms 中添加一个新的表项，不需要修改整个逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> terms = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;一&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;二&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;四&#x27;</span>   <span class="comment">// 添加一个新的名词翻译</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> terms[term];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例二</span></span><br><span class="line">c = &#123;</span><br><span class="line">     <span class="attr">events</span>:&#123;</span><br><span class="line">         <span class="string">&#x27;click #add1&#x27;</span>:<span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;click #minus1&#x27;</span>:<span class="string">&#x27;minus&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;click #mul2&#x27;</span>:<span class="string">&#x27;mul&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;click #divide2&#x27;</span>:<span class="string">&#x27;div&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="title">autoBindEvents</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> c.events)&#123;</span><br><span class="line">             <span class="keyword">const</span> value = c[c.events[key]]</span><br><span class="line">             <span class="keyword">const</span> spaceIndex = key.indexOf(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">             <span class="keyword">const</span> part1 = key.slice(<span class="number">0</span>, spaceIndex)</span><br><span class="line">             <span class="keyword">const</span> part2 = key.slice(spaceIndex + <span class="number">1</span>)</span><br><span class="line">             v.el.on(part1,part2,value)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>转自<a href="https://zhuanlan.zhihu.com/p/259806449">表驱动编程</a></p>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">JavaScript modules 模块 MDN</a></p>
<p>模块就是实现特定功能的一组方法,而模块化是将模块的代码创造自己的作用域，只向外部暴露公开的方法和变量，而这些方法之间高度解耦。</p>
<p>一个应用的不同的功能分离成几个模块，需要什么功能就加载相应的模块。</p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>js排序</title>
    <url>/2021/09/20/54/</url>
    <content><![CDATA[<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> minIndex = <span class="function">(<span class="params">numbers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers[i] &lt; numbers[index]) &#123;</span><br><span class="line">      index = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">array, i, j</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = array[i]</span><br><span class="line">  array[i] = array[j]</span><br><span class="line">  array[j] = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sort = <span class="function">(<span class="params">numbers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`----`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`i: <span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">let</span> index = minIndex(numbers.slice(i)) + i</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`index: <span class="subst">$&#123;index&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`min: <span class="subst">$&#123;numbers[index]&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span> (index !== i) &#123;</span><br><span class="line">      swap(numbers, index, i)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`swap <span class="subst">$&#123;index&#125;</span>: <span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(numbers)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> numbers</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort([<span class="number">2</span>, <span class="number">55</span>, <span class="number">78</span>, <span class="number">99</span>, <span class="number">88</span>, <span class="number">654</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> left = [],</span><br><span class="line">    right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quickSort([<span class="number">24</span>, <span class="number">946</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">6</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSort = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> left = arr.slice(<span class="number">0</span>, <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>))</span><br><span class="line">  <span class="keyword">let</span> right = arr.slice(<span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>))</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length === <span class="number">0</span>) <span class="keyword">return</span> b</span><br><span class="line">  <span class="keyword">if</span> (b.length === <span class="number">0</span>) <span class="keyword">return</span> a</span><br><span class="line">  <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>] ? [b[<span class="number">0</span>]].concat(merge(a, b.slice(<span class="number">1</span>))) : [a[<span class="number">0</span>]].concat(merge(a.slice(<span class="number">1</span>), b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mergeSort([<span class="number">23</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">99</span>, <span class="number">12</span>])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countingSort = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> hashTable = &#123;&#125;,</span><br><span class="line">    max = <span class="number">0</span>,</span><br><span class="line">    result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(arr[i] <span class="keyword">in</span> hashTable)) &#123;</span><br><span class="line">      hashTable[arr[i]] = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashTable[arr[i]] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">      max = arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= max; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j <span class="keyword">in</span> hashTable) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hashTable[j]; i++) &#123;</span><br><span class="line">        result.push(j)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">countingSort([<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="时间复杂度对比"><a href="#时间复杂度对比" class="headerlink" title="时间复杂度对比"></a>时间复杂度对比</h2><p>选择排序    O(n^2)</p>
<p>快速排序    O(n * log2 n)</p>
<p>归并排序    O(n * log2 n)</p>
<p>计数排序    O(n + max)</p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue构造选项</title>
    <url>/2021/10/18/31/</url>
    <content><![CDATA[<h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(option)</span><br></pre></td></tr></table></figure>

<p><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">options 的五类属性</a></p>
<p>数据：data、props、propsData、computed、methods、watch</p>
<p>DOM：el、template、render、renderError</p>
<p>生命周期钩子 ：beforeCreate、created、before Mount、mounted、beforeUpdate、updated、activated、deactivated、beforeDestroy、destroyed、errorCaptured</p>
<p>资源：directives、filters、components</p>
<p>组合：parent、mixins、extends、provide、inject</p>
<p>其他：暂且不表</p>
<h2 id="入门属性"><a href="#入门属性" class="headerlink" title="入门属性"></a>入门属性</h2><ul>
<li>el - 挂载点：与 $mount 有替换关系</li>
<li>data - 内部数据：支持对象和函数，优先用函数</li>
<li>methods - 方法： 事件处理函数或者是普通函数</li>
<li>components :  使用 Vue 组件，注意大小写</li>
<li>四个钩子<ul>
<li>created - 实力出现在内存中</li>
<li>mounted - 实力出现在页面中</li>
<li>updated - 示例更新了</li>
<li>destroyed - 实例消亡了</li>
</ul>
</li>
<li>props - 外部属性</li>
</ul>
<h3 id="components-三种引入方式"><a href="#components-三种引入方式" class="headerlink" title="components 三种引入方式"></a>components 三种引入方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 优先使用</span></span><br><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">&quot;./Demo.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	<span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">Frank1</span>: Demo</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;</span></span><br><span class="line"><span class="string">			...</span></span><br><span class="line"><span class="string">			&lt;Frank/&gt;</span></span><br><span class="line"><span class="string">			...	</span></span><br><span class="line"><span class="string">		&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Frank2&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;demo022&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;</span></span><br><span class="line"><span class="string">			...</span></span><br><span class="line"><span class="string">			&lt;Frank2/&gt;</span></span><br><span class="line"><span class="string">			...	</span></span><br><span class="line"><span class="string">		&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">const</span> x = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;demo333&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	<span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">Frank3</span>: x</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;</span></span><br><span class="line"><span class="string">			...</span></span><br><span class="line"><span class="string">			&lt;Frank3/&gt;</span></span><br><span class="line"><span class="string">			...	</span></span><br><span class="line"><span class="string">		&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="四个钩子"><a href="#四个钩子" class="headerlink" title="四个钩子"></a>四个钩子</h3><p><a href="https://github.com/Drwna/vue-demo-1/commit/15f8c17930d82109031b7989cc1ea3b3331f55b8#diff-96123f97c22061907b1e0fb96cd06f9bea16682eb3df0bfbfa3192036e0a08c9R18">demo</a></p>
<p>created - 实例出现在内存中</p>
<p>mounted - 实例出现在页面中</p>
<p>updated - 实例更新了</p>
<p>destroyed - 实例从页面和内存中消亡了</p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a><a href="https://cn.vuejs.org/v2/api/#props">props</a></h3><p>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">message=<span class="string">&quot;n&quot;</span>  <span class="comment">// 传入字符串</span></span><br><span class="line">:message=<span class="string">&quot;n&quot;</span> <span class="comment">// 传入 this.n</span></span><br><span class="line">:fn=<span class="string">&quot;add&quot;</span> <span class="comment">// 传入 this.add 函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Demo.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    ”这是 demo 的内部“,</span><br><span class="line">    n = &#123;&#123; message &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;fn&quot;&gt;call back&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;message&#x27;, &#x27;fn&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">&#x27;./Demo.vue&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;Demo&#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">n</span>: <span class="number">5</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; n &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;Demo :message=&quot;n&quot; :fn=&quot;add&quot;/&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.n += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app2&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="进阶属性"><a href="#进阶属性" class="headerlink" title="进阶属性"></a>进阶属性</h2><h3 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed - 计算属性"></a>computed - <a href="https://cn.vuejs.org/v2/api/#computed">计算属性</a></h3><p>被计算出来的属性就是<strong>计算属性</strong>。</p>
<ul>
<li>当其依赖的属性的值发生变化的时，计算属性会重新计算。</li>
<li>如果依赖的属性没有变化，就不会重新计算，使用<strong>缓存</strong>中的属性值。</li>
</ul>
<p>computed 比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化。</p>
<h4 id="例1-getter-setter-demo"><a href="#例1-getter-setter-demo" class="headerlink" title="例1. getter / setter -demo"></a>例1. getter / setter -demo</h4><p><a href="https://codesandbox.io/s/compassionate-lake-xyjkw">用户名展示</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需引用完整版 vue</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&quot;fangyinghang@qq.com&quot;</span>,</span><br><span class="line">      <span class="attr">nickname</span>: <span class="string">&quot;方方&quot;</span>,</span><br><span class="line">      <span class="attr">phone</span>: <span class="string">&quot;13812312312&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">displayName</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="built_in">this</span>.user;</span><br><span class="line">        <span class="keyword">return</span> user.nickname || user.email || user.phone;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">        <span class="built_in">this</span>.user.nickname = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;displayName&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;displayName&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;add&quot;&gt;set&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.displayName = <span class="string">&quot;圆圆&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="例2-使用-computed-demo"><a href="#例2-使用-computed-demo" class="headerlink" title="例2 使用 computed - demo"></a>例2 使用 computed - demo</h4><p><a href="https://codesandbox.io/s/little-breeze-hdx44">用 computed 筛选男女</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> createUser = <span class="function">(<span class="params">name, gender</span>) =&gt;</span> &#123;</span><br><span class="line">  id += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: name, <span class="attr">gender</span>: gender &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">users</span>: [</span><br><span class="line">        createUser(<span class="string">&quot;方方&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        createUser(<span class="string">&quot;圆圆&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">        createUser(<span class="string">&quot;小新&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        createUser(<span class="string">&quot;小葵&quot;</span>, <span class="string">&quot;女&quot;</span>)</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">displayUsers</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.displayUsers = <span class="built_in">this</span>.users;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">showMale</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.displayUsers = <span class="built_in">this</span>.users.filter(<span class="function"><span class="params">u</span> =&gt;</span> u.gender === <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">showFemale</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.displayUsers = <span class="built_in">this</span>.users.filter(<span class="function"><span class="params">u</span> =&gt;</span> u.gender === <span class="string">&quot;女&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">showAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.displayUsers = <span class="built_in">this</span>.users;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showAll&quot;&gt;全部&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showMale&quot;&gt;男&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;showFemale&quot;&gt;女&lt;/button&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li v-for=&quot;(u,index) in displayUsers&quot; :key=&quot;index&quot;&gt;&#123;&#123;u.name&#125;&#125; - &#123;&#123;u.gender&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="例2-1不使用-computed-demo"><a href="#例2-1不使用-computed-demo" class="headerlink" title="例2.1不使用 computed - demo"></a>例2.1不使用 computed - demo</h4><p><a href="https://codesandbox.io/s/modest-matsumoto-pd03w">不用 computed 筛选男女</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> createUser = <span class="function">(<span class="params">name, gender</span>) =&gt;</span> &#123;</span><br><span class="line">  id += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: id,</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">gender</span>: gender,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">users</span>: [</span><br><span class="line">        createUser(<span class="string">&quot;方方&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        createUser(<span class="string">&quot;圆圆&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">        createUser(<span class="string">&quot;小新&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        createUser(<span class="string">&quot;小葵&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">gender</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">displayUsers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hash = &#123;</span><br><span class="line">        <span class="attr">male</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="attr">female</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> &#123; users, gender &#125; = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (gender === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> gender === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> users.filter(<span class="function">(<span class="params">u</span>) =&gt;</span> u.gender === hash[gender]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;gender 的值是意外的值&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">setGender</span>(<span class="params">string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.gender = string;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;setGender(&#x27;&#x27;) &quot;&gt;全部&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;setGender(&#x27;male&#x27;)&quot;&gt;男&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;setGender(&#x27;female&#x27;)&quot;&gt;女&lt;/button&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li v-for=&quot;(u,index) in displayUsers&quot; :key=&quot;index&quot;&gt;&#123;&#123;u.name&#125;&#125; - &#123;&#123;u.gender&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p><a href="https://v3.cn.vuejs.org/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8">官方 计算属性和侦听器</a></p>
<h3 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch - 侦听器"></a>watch - <a href="https://cn.vuejs.org/v2/api/#watch">侦听器</a></h3><ul>
<li>使用watch来响应数据的变化，也就是当数据变化时，执行一个函数。</li>
<li>一般用于异步或者开销较大的操作</li>
<li>watch 中的属性 一定是 data 中 已经存在的数据 </li>
<li><strong>当需要监听一个对象的改变时，普通的 watch 方法无法监听到对象内部属性的改变，只有 data 中的数据才能够监听到变化，此时就需要 deep 属性对对象进行深度监听</strong></li>
</ul>
<h4 id="选项：deep"><a href="#选项：deep" class="headerlink" title="选项：deep"></a>选项：deep</h4><p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code>。注意监听数组的变更不需要这么做。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;someObject&#x27;</span>, callback, &#123;</span><br><span class="line">  <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.someObject.nestedValue = <span class="number">123</span></span><br><span class="line"><span class="comment">// callback is fired</span></span><br></pre></td></tr></table></figure>

<h4 id="选项：immediate"><a href="#选项：immediate" class="headerlink" title="选项：immediate"></a>选项：immediate</h4><p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>, callback, &#123;</span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 立即以 `a` 的当前值触发回调</span></span><br></pre></td></tr></table></figure>

<p>注意在带有 <code>immediate</code> 选项时，你不能在第一次回调时取消侦听给定的 property。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这会导致报错</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomething()</span><br><span class="line">    unwatch()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomething()</span><br><span class="line">    <span class="keyword">if</span> (unwatch) &#123;</span><br><span class="line">      unwatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a><a href="https://cn.vuejs.org/v2/api/#vm-watch">vm.$watch</a></h4><h4 id="例1-撤销-demo"><a href="#例1-撤销-demo" class="headerlink" title="例1. 撤销-demo"></a>例1. 撤销-demo</h4><p><a href="https://codesandbox.io/s/lucid-shamir-cpcw3">https://codesandbox.io/s/lucid-shamir-cpcw3</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">history</span>: [],</span><br><span class="line">    <span class="attr">inUndoMode</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.inUndoMode);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.inUndoMode) &#123;</span><br><span class="line">        <span class="built_in">this</span>.history.push(&#123; <span class="attr">from</span>: oldValue, <span class="attr">to</span>: newValue &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 不如用 computed 来计算 displayName</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;n&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;hr /&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;add1&quot;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;add2&quot;&gt;+2&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;minus1&quot;&gt;-1&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;minus2&quot;&gt;-2&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;hr/&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;undo&quot;&gt;撤销&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;hr/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#123;&#123;history&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">add1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">add2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">minus1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">minus2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n -= <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">undo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> last = <span class="built_in">this</span>.history.pop();</span><br><span class="line">      <span class="built_in">this</span>.inUndoMode = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;ha&quot;</span> + <span class="built_in">this</span>.inUndoMode);</span><br><span class="line">      <span class="keyword">const</span> old = last.from;</span><br><span class="line">      <span class="built_in">this</span>.n = old; <span class="comment">// watch n 的函数会异步调用</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inUndoMode = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="例2-模拟-computed-demo"><a href="#例2-模拟-computed-demo" class="headerlink" title="例2. 模拟 computed-demo"></a>例2. <a href="https://codesandbox.io/s/objective-star-vu2h3">模拟 computed-demo</a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用完整版 Vue，方便讲解</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue/dist/vue.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&quot;fangfang@qq.com&quot;</span>,</span><br><span class="line">      <span class="attr">nickname</span>: <span class="string">&quot;方方&quot;</span>,</span><br><span class="line">      <span class="attr">phone</span>: <span class="string">&quot;13812312312&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">displayName</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&quot;user.email&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="string">&quot;changed&quot;</span>,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 第一次渲染是也触发 watch</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;user.nickname&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="string">&quot;changed&quot;</span>,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 第一次渲染是也触发 watch</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;user.phone&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="string">&quot;changed&quot;</span>,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 第一次渲染是也触发 watch</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 不如用 computed 来计算 displayName</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">       &#123;&#123;displayName&#125;&#125;</span></span><br><span class="line"><span class="string">       &lt;button @click=&quot;user.nickname=undefined&quot;&gt;remove nickname&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">changed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">const</span> user = <span class="built_in">this</span>.user;</span><br><span class="line">      <span class="built_in">this</span>.displayName = user.nickname || user.email || user.phone;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="directives-指令"><a href="#directives-指令" class="headerlink" title="directives - 指令"></a>directives - 指令</h3><ul>
<li>内置指令 v-if / v-for / v-bind / v-on</li>
<li>自定义指令</li>
<li>指令是为了减少重复的 dom 操作</li>
</ul>
<h3 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin - 混入"></a>mixin - 混入</h3><ul>
<li>重复三次之后的出路</li>
<li>混入 V.S. 全局混入</li>
<li>选项自动合并</li>
<li>混入就是为了减少重复的构造选项</li>
</ul>
<p>还是使用上一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyVue = Vue.extend(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">time</span>: <span class="literal">undefined</span>&#125; &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.name)&#123; <span class="built_in">console</span>.erroe(<span class="string">&#x27;no name!&#x27;</span>) &#125;</span><br><span class="line">        <span class="built_in">this</span>.time = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> duration = (<span class="keyword">new</span> <span class="built_in">Date</span>()) - <span class="built_in">this</span>.time</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.time&#125;</span> 存活时间 <span class="subst">$&#123;duration&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>









<h3 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends - 继承"></a>extends - 继承</h3><ul>
<li>先了解一下 Vue.extend</li>
<li>你觉得用了 mixin 还是重复</li>
<li>于是你自己写了一个 View, 他继承 Vue</li>
<li>你还可以预先定义其他构造选项</li>
<li>继承就是为了减少重复的构造选项</li>
<li>那为什么不用 ES6 的extends 呢？</li>
</ul>
<h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h3><ul>
<li>爷爷想和孙子讲话怎么办</li>
<li>祖宗想跟他的所有后代讲话怎么办</li>
<li>答案是全局变量，但是全局变量太 low</li>
<li>所以我们需要 局部的全局变量</li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析jQuery设计思想</title>
    <url>/2021/09/12/01/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>jQuery 是目前使用最广泛的 JavaScript 函数库</p>
<p>对于网页开发者来说，学会 jQuery 是必要的。因为它让你了解业界最通用的技术，为将来学习更高级的库打下基础，并且确实可以很轻松地做出许多复杂的效果。</p>
<p>jQuery 是一个高效、精简并且功能丰富的 JavaScript 工具库。它提供的 API 易于使用且兼容众多浏览器，这让诸如 HTML 文档遍历和操作、事件处理、动画和 Ajax 操作更加简单。</p>
<p>jQuery 的基本设计思想就是，<strong>选择某个网页元素，然后对其进行某种操作</strong></p>
<p>jQuery 的实质就是一个<strong>封装的 DOM 库</strong>。</p>
<blockquote>
<p>仿 jQuery 手写了一些简单的 api，有兴趣可以参考一下 <a href="https://github.com/Drwna/dom-2">简易jQuery</a></p>
</blockquote>
<h3 id="选择网页元素"><a href="#选择网页元素" class="headerlink" title="选择网页元素"></a>选择网页元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jQuery中:jQuery() = $()</span></span><br><span class="line"><span class="comment">//将一个选择表达式，放进构造函数$()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择表达式可以是CSS选择器</span></span><br><span class="line">$(<span class="built_in">document</span>) <span class="comment">//选择整个文档对象</span></span><br><span class="line">$(<span class="string">&#x27;#myId&#x27;</span>) <span class="comment">//选择ID为myId的网页元素</span></span><br><span class="line">$(<span class="string">&#x27;div.myClass&#x27;</span>) <span class="comment">// 选择class为myClass的div元素</span></span><br><span class="line">$(<span class="string">&#x27;input[name=first]&#x27;</span>) <span class="comment">// 选择name属性等于first的input元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以是jQuery特有的表达式</span></span><br><span class="line">$(<span class="string">&#x27;a:first&#x27;</span>) <span class="comment">//选择网页中第一个a元素</span></span><br><span class="line">$(<span class="string">&#x27;tr:odd&#x27;</span>) <span class="comment">//选择表格的奇数行</span></span><br><span class="line">$(<span class="string">&#x27;#myForm :input&#x27;</span>) <span class="comment">// 选择表单中的input元素</span></span><br><span class="line">$(<span class="string">&#x27;div:visible&#x27;</span>) <span class="comment">//选择可见的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div:gt(2)&#x27;</span>) <span class="comment">// 选择所有的div元素，除了前三个</span></span><br><span class="line">$(<span class="string">&#x27;div:animated&#x27;</span>) <span class="comment">// 选择当前处于动画状态的div元素</span></span><br></pre></td></tr></table></figure>



<h3 id="精确选择范围"><a href="#精确选择范围" class="headerlink" title="精确选择范围"></a>精确选择范围</h3><p>思想：提供各种强大的过滤器，对结果集进行筛选，缩小选择结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).has(<span class="string">&#x27;p&#x27;</span>); <span class="comment">// 选择包含p元素的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).not(<span class="string">&#x27;.myClass&#x27;</span>); <span class="comment">//选择class不等于myClass的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).filter(<span class="string">&#x27;.myClass&#x27;</span>); <span class="comment">//选择class等于myClass的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).first(); <span class="comment">//选择第1个div元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以从当前元素出发，移动到附近的相关元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).next(<span class="string">&#x27;p&#x27;</span>); <span class="comment">//选择div元素后面的第一个p元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).parent(); <span class="comment">//选择div元素的父元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).closest(<span class="string">&#x27;form&#x27;</span>); <span class="comment">//选择离div最近的那个form父元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).children(); <span class="comment">//选择div的所有子元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).siblings(); <span class="comment">//选择div的同级元素</span></span><br></pre></td></tr></table></figure>



<h3 id="复制、删除、创建元素"><a href="#复制、删除、创建元素" class="headerlink" title="复制、删除、创建元素"></a>复制、删除、创建元素</h3><ul>
<li>复制元素使用 <code>.clone()</code></li>
<li>删除元素使用 <code>.remove()</code> 和 <code>.detach()</code></li>
</ul>
<blockquote>
<p>两者区别：前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用</p>
</blockquote>
<ul>
<li>清空元素内容（但是不删除该元素）使用 <code>.empty()</code></li>
<li>创建元素只要把新元素直接传入jQuery的构造函数就行了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;&lt;p&gt;Hello&lt;/p&gt;&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;&lt;li class=&quot;new&quot;&gt;new list item&lt;/li&gt;&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).append(<span class="string">&#x27;&lt;li&gt;list item&lt;/li&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><p>思想：最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来</p>
<p>这样以点连起来的连续调用就称为链式调用，它的设计原理是<strong>把jQuery中的函数返回为这个对象，然后这个对象又包含jQuery的所有方法，这样就可以实现链式调用，十分方便</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).find(<span class="string">&#x27;h3&#x27;</span>).eq(<span class="number">2</span>).html(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分解开，可以这么理解</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>) <span class="comment">//找到div元素</span></span><br><span class="line">　　　.find(<span class="string">&#x27;h3&#x27;</span>) <span class="comment">//选择其中的h3元素</span></span><br><span class="line">　　　.eq(<span class="number">2</span>) <span class="comment">//选择第3个h3元素</span></span><br><span class="line">　　　.html(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">//将它的内容改为Hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery还提供了.end()方法，使得结果可以后退一步</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">　　　.find(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">　　　.eq(<span class="number">2</span>)</span><br><span class="line">　　　.html(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">　　　.end() <span class="comment">//退回到选中所有的h3元素的那一步</span></span><br><span class="line">　　　.eq(<span class="number">0</span>) <span class="comment">//选中第一个h3元素</span></span><br><span class="line">　　　.html(<span class="string">&#x27;World&#x27;</span>); <span class="comment">//将它的内容改为World</span></span><br></pre></td></tr></table></figure>



<h3 id="移动元素"><a href="#移动元素" class="headerlink" title="移动元素"></a>移动元素</h3><p>思想：jQuery提供两组方法，来操作元素在网页中的位置移动。一组方法是直接移动该元素，另一组方法是移动其他元素，使得目标元素达到我们想要的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方法是使用.insertAfter()</span></span><br><span class="line"><span class="comment">//把div元素移动p元素后面</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).insertAfter($(<span class="string">&#x27;p&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法是使用.after()</span></span><br><span class="line"><span class="comment">//把p元素加到div元素前面</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).after($(<span class="string">&#x27;div&#x27;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>二者区别：返回的元素不一样。第一种方法返回div元素，第二种方法返回p元素。</p>
</blockquote>
<p>类似操作方法共4对</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　.insertAfter()和.after() <span class="comment">//在现存元素的外部，从后面插入元素</span></span><br><span class="line">　.insertBefore()和.before() <span class="comment">//在现存元素的外部，从前面插入元素</span></span><br><span class="line">　.appendTo()和.append() <span class="comment">//在现存元素的内部，从后面插入元素</span></span><br><span class="line">　.prependTo()和.prepend() <span class="comment">//在现存元素的内部，从前面插入元素</span></span><br></pre></td></tr></table></figure>



<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>jQuery中，构造函数$()<strong>支持多种参数</strong></p>
<ul>
<li>.attr(name，value)和.attr(name)：两个参数是设置属性，一个参数是获取属性值</li>
<li>.text()和.text(string)：无参数是获取文本，一个参数是写入文本</li>
<li>.html()和.html(string)：无参数是获取html元素，一个参数是写入html元素</li>
</ul>
<p>结合下面这段代码，参数可以是选择器、数组或一段代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selectorOrArrayOrTemplate</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> elements</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> selectorOrArrayOrTemplate === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(selectorOrArrayOrTemplate[<span class="number">0</span>] === <span class="string">&#x27;&lt;&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// 创建 div</span></span><br><span class="line">      elements=[createElement(selectorOrArrayOrTemplate)]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 查找 div</span></span><br><span class="line">      elements = <span class="built_in">document</span>.querySelectorAll(selectorOrArrayOrTemplate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(selectorOrArrayOrTemplate <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">    elements = selectorOrArrayOrTemplate</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//举例</span></span><br><span class="line">  $(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  $(<span class="string">&#x27;&lt;div&gt;hello&lt;/div&gt;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter/setter"></a>getter/setter</h3><p>思想：使用同一个函数，来完成取值（getter）和赋值（setter），到底是取值还是赋值，由函数的参数决定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).html(); <span class="comment">//html()没有参数，表示取出h1的值</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).html(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">//html()有参数Hello，表示对h1进行赋值</span></span><br></pre></td></tr></table></figure>

<p>常见的取值和赋值函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.html() 取出或设置html内容</span><br><span class="line">.text() 取出或设置text内容</span><br><span class="line">.attr() 取出或设置某个属性的值</span><br><span class="line">.width() 取出或设置某个元素的宽度</span><br><span class="line">.height() 取出或设置某个元素的高度</span><br><span class="line">.val() 取出某个表单元素的值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值。<br>取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）</p>
</blockquote>
<h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p>jQuery针对不同浏览器使用不同代码，也就是兼容各个浏览器。</p>
<h3 id="用闭包隐藏细节"><a href="#用闭包隐藏细节" class="headerlink" title="用闭包隐藏细节"></a>用闭包隐藏细节</h3><p>思想：浏览器必须通过内部的函数来操作外部参数，如用get()或find()来操作elements，可以隐藏细节。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selectorOrArrayOrTemplate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> elements;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> selectorOrArrayOrTemplate === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (selectorOrArrayOrTemplate[<span class="number">0</span>] === <span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 创建 div</span></span><br><span class="line">      elements = [createElement(selectorOrArrayOrTemplate)];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 查找 div</span></span><br><span class="line">      elements = <span class="built_in">document</span>.querySelectorAll(selectorOrArrayOrTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectorOrArrayOrTemplate <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    elements = selectorOrArrayOrTemplate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">&quot;template&quot;</span>);</span><br><span class="line">    container.innerHTML = string.trim();</span><br><span class="line">    <span class="keyword">return</span> container.content.firstChild;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: jQuery,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.elements[index];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">find</span>(<span class="params">selector</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> array = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.elements.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> elements2 = <span class="built_in">Array</span>.from(<span class="built_in">this</span>.elements[i].querySelectorAll(selector));</span><br><span class="line">        array = array.concat(<span class="built_in">this</span>.elements2);</span><br><span class="line">      &#125;</span><br><span class="line">      array.oldApi = <span class="built_in">this</span>; <span class="comment">// this 就是 旧 api</span></span><br><span class="line">      <span class="keyword">return</span> jQuery(array);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考自：</p>
<p><a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html">jQuery设计思想</a></p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析URL</title>
    <url>/2021/07/10/41/</url>
    <content><![CDATA[<p>万维网（World Wide Web）包含三个部分分别是：</p>
<p><strong>WWW=URL（Uniform）+HTTP（HyperText Transfer Protocol）+HTML（HyperText Markup Language）</strong></p>
<p>URL= 协议+域名或IP+端口号+路径+查询字符串+锚点</p>
<p><strong><a href="https://link.zhihu.com/?target=http://www.baidu.com/s?wd=hi&rsv_spt=1%235">http://www.baidu.com/s?wd=hi&amp;rsv_spt=1#5</a></strong></p>
<blockquote>
<p><strong>协议 —— <a href="https://link.zhihu.com/?target=http://zhi/">http://</a></strong><br><strong>域名 —— <a href="https://link.zhihu.com/?target=http://www.baidu.com/s?wd=hi&rsv_spt=1%235">www.baidu.com</a></strong><br><strong>路径 —— <a href="https://link.zhihu.com/?target=http://www.baidu.com/s?wd=hi&rsv_spt=1%235">/s</a></strong><br><strong>查询参数 —— <a href="https://link.zhihu.com/?target=http://www.baidu.com/s?wd=hi&rsv_spt=1%235">?wd=hi&amp;rsv_spt=1</a></strong><br><strong>锚点 —— <a href="https://link.zhihu.com/?target=http://www.baidu.com/s?wd=hi&rsv_spt=1%235">#5</a></strong></p>
</blockquote>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a><strong>协议</strong></h2><p>服务器使用的协议一般有两种：</p>
<blockquote>
<p>一种为<strong>HTTP（</strong>HyperText Transfer Protocol,超文本传输协议)<br>一种为<strong>HTTPS（</strong>Hyper Text Transfer Protocol over SecureSocket Layer,超文本传输安全协议）</p>
</blockquote>
<hr>
<h2 id="IP（Internet-Protocol）"><a href="#IP（Internet-Protocol）" class="headerlink" title="IP（Internet Protocol）"></a>IP（Internet Protocol）</h2><p><strong>作用</strong></p>
<blockquote>
<p> 一、如何定位一台设备（手机、电脑、路由器…）<br> 二、如何封装数据报文，以跟其他设备交流</p>
</blockquote>
<p>换句话说，只要你在互联网中，你就至少会有一个独立的IP</p>
<p> <strong>IP分为内网和外网</strong></p>
<h2 id="外网IP"><a href="#外网IP" class="headerlink" title="外网IP"></a><strong>外网IP</strong></h2><p><strong>如何获取外网的IP（过程）</strong></p>
<p>第一步：从电信租用带宽</p>
<p>第二步：光猫（调制解调器）</p>
<blockquote>
<p>作用：拨号上网</p>
</blockquote>
<p>第三步：路由器</p>
<blockquote>
<p>作用：起到分配的作用</p>
</blockquote>
<p>把电脑和手机分别连接由路由器广播出来的无线WIFI</p>
<p>只要路由器通过“光猫”连接上外面（电信）的服务器时，路由器就会有一个「外网IP」，比如「147.17.32.211」就是一个外网IP，这个IP地址就是在互联网中的地址（所有的通过路由器连接设备都是同一个外网IP地址）</p>
<p>但是如果重启路由器，那么很有可能被重新分配一个「外网IP」，换句话说你的路由器没有「固定的外网IP」</p>
<p>拓展：<a href="https://www.ip138.com/">查询自己的外网IP</a></p>
<h2 id="内网IP"><a href="#内网IP" class="headerlink" title="内网IP"></a>内网IP</h2><p>路由器会在家里（区域）创建一个内网，内网中的设备使用时内网IP，一般来说内网IP格式为「<a href="https://link.zhihu.com/?target=http://192.168.xxx.xxx">http://192.168.xxx.xxx</a>」</p>
<p>一般路由器会给自己分配一个好记的内网IP：192.168.1.1（一般会让出一个位置留给光猫）</p>
<p>然后路由器会给每一个内网中的设备分配一个不同的内网IP，如电脑是192.168.1.2，手机是192.168.1.3，以此类推。</p>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器有两个IP：一个外网IP和一个内网IP</p>
<p>内网中的设备可以互相访问，但是不能直接访问外网</p>
<p>内网设备想要访问外网，就必须经过路由器中转</p>
<p>外网中的设备可以互相访问，但无法直接访问内网设备</p>
<p>外网设备想要把内容送到内网，也必须通过路由器</p>
<p>换句换说内网和外网就像两个隔绝的空间无法互通，唯一的联通点就是路由器</p>
<p>所以路由器有时候也被叫做网关</p>
<h2 id="特殊IP"><a href="#特殊IP" class="headerlink" title="特殊IP"></a><strong>特殊IP</strong></h2><blockquote>
<p>127.0.0.1 本地</p>
<p>localhost 本地</p>
<p>0.0.0.0（不表示任何设备）</p>
</blockquote>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a><strong>域名</strong></h2><blockquote>
<p> 域名就是IP的别称</p>
</blockquote>
<p><strong>知识：</strong></p>
<ul>
<li><strong>一个域名可以对应不同的IP</strong></li>
<li><strong>这个叫做均衡负载，防止一台机器扛不住</strong></li>
</ul>
<blockquote>
<p>终端输入ping <a href="https://link.zhihu.com/?target=http://baidu.com/">baidu.com</a> 会生成几个IP地址来对应不同的服务器，这些服务器分别对应各个地区（华中、华南、华北..），进行使用</p>
</blockquote>
<ul>
<li><strong>一个IP可以对应不同域名</strong></li>
<li><strong>这个叫做共享主机</strong></li>
</ul>
<blockquote>
<p>公司太小公用服务器或者一个公司有两个网站，公用一个IP地址</p>
</blockquote>
<p><strong>疑问 ️：<a href="https://link.zhihu.com/?target=http://www.baidu/">www.</a>xiedaimala.com与xiedaimala.com是同一个域名吗？</strong></p>
<blockquote>
<p>答案：不是同一个域名</p>
</blockquote>
<p><strong>拓展：</strong></p>
<blockquote>
<p>com（company，公司）<strong>是顶级域名</strong><br><a href="https://link.zhihu.com/?target=http://xiedaimala.com">http://xiedaimala.com</a>是<strong>二级域名（俗称一级域名）</strong><br><a href="https://link.zhihu.com/?target=http://www.xiedaimala.com">http://www.xiedaimala.com</a>是<strong>三级域名（俗称二级域名）</strong></p>
</blockquote>
<p> <strong>他们是父子关系（越长越小）</strong> </p>
<blockquote>
<p><a href="https://link.zhihu.com/?target=http://github.io/">github.io</a> 把子域名xxx.github.io免费给用户使用 xx.com与<a href="http://www.xx.com可以是同一家公司,也可以不是同一家公司(只是公用父域名)/">www.xx.com可以是同一家公司，也可以不是同一家公司（只是公用父域名）</a> www是非常多余的！</p>
</blockquote>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><strong>什么是端口</strong></p>
<blockquote>
<p>我们知道URL的作用是定位服务器比如定位百度服务器），我们可以通过上面的IP/域名来定位服务器，但是我们定位服务器的根本目的是需要为服务的（不然我们定位服务器干啥！！ ）<br>所有现在接下来的事情就是定位服务，而<strong>端口</strong>就是为了对应不同服务的</p>
</blockquote>
<p><strong>端口号</strong></p>
<blockquote>
<p>一台服务器（设备）可以提供很多服务，每个服务都有对应号码，这个号码被称为<strong>端口号</strong></p>
</blockquote>
<p>很多服务</p>
<p>要提供HTTP（超文本传输协议）服务最好使用80端口</p>
<p>要提供HTTPS（超文本传输安全协议）服务最好使用443端口</p>
<p>要提供FTP（文件传输协议）服务最好使用443端口</p>
<p>一共有65535个端口，基本够用</p>
<p>我们怎么知道什么服务对应（提供）什么端口</p>
<hr>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a><strong>路径</strong></h2><blockquote>
<p>在一个服务器（设备）上，如何请求不同的页面 通过路径可以做到</p>
</blockquote>
<blockquote>
<p>例：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/css">https://developer.mozilla.org/zh-CN/docs/Web/css</a></p>
</blockquote>
<h2 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a><strong>查询参数</strong></h2><p>同一页面，不同内容</p>
<p><a href="https://www.baidu.com/s?wd=hi&amp;pn=10">https://www.baidu.com/s?wd=hi&amp;pn=10</a></p>
<p><a href="https://www.baidu.com/s?wd=hello">https://www.baidu.com/s?wd=hello</a></p>
<blockquote>
<p><strong>/s：搜索页面</strong><br><strong>?wd=：查询参数 word（单词/词语）</strong><br><strong>wd：word（单词/词语）</strong></p>
</blockquote>
<h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a><strong>锚点</strong></h2><blockquote>
<p>在一个内容上，如何请求不同位置 通过锚点可以做到</p>
</blockquote>
<p>举 ：</p>
<blockquote>
<p><a href="https://link.zhihu.com/?target=https://develop.mozilla.org/zh-CN/docs/web/HTML">https://develop.mozilla.org/zh-CN/docs/web/HTML</a><strong>#参考书</strong> <a href="https://link.zhihu.com/?target=https://develop.mozilla.org/zh-CN/docs/web/CSS">https://develop.mozilla.org/zh-CN/docs/web/CSS</a><strong>#教程</strong></p>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<p>锚点看起来有中文，实际不支持中文 <strong>#参考书</strong>传输到服务器会变成一堆乱码 锚点无法在Network面板看到 因为锚点不会传給服务器</p>
</blockquote>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><blockquote>
<p><strong>DNS全称为Domain Name System，域名系统</strong></p>
</blockquote>
<blockquote>
<p>DNS 的作用就是对域名和IP进行相互对应的</p>
</blockquote>
<p><strong>验证下：当我们输入<a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>回车后，域名是如何与IP进行相互对应的？</strong></p>
<ul>
<li>在Chrome浏览器下输入<a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>后，先经过<strong>路由器</strong>向外网的<strong>（电信/联通提供的DNS服务器）</strong>发出询问，询问内容就是<a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>所对应的IP地址</li>
<li><strong>电信/联通提供的DNS服务器</strong>收到请求后，就会回答一个IP地址</li>
<li>然后Chrome浏览器把回答的IP地址和以及IP对应的端口（80/443端口）再次通过路由器向对应的服务器发送请求</li>
<li>请求内容：查看<a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>的页面</li>
<li>服务器通过路由器再传回给浏览器（HTML、CSS、JS等）</li>
<li>最终我们就可以看到<a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>的页面了</li>
</ul>
<p><strong>通过nslookup 命令查看域名下所有提供服务的服务器</strong></p>
<blockquote>
<p>语法：nslookup 网站域名</p>
</blockquote>
<p><strong>拓展：</strong>ping与nslookup区别：</p>
<blockquote>
<p>ping：查看域名<strong>对应</strong>本地区的服务器，更为准确 nslookup：查看域名对应<strong>所有</strong>提供服务的服务器</p>
</blockquote>
<h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p>用 curl 可以发 HTTP 请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v http://baidu.com</span><br><span class="line">curl -s -v -- https://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>理解：</p>
<blockquote>
<p>url 会被 curl 工具重写，先请求 DNS 获得 IP</p>
<p>先进行 TCP 连接，TCP 连接成功后，开始发送 HTTP　请求</p>
<p>请求内容看一眼</p>
<p>响应内容看一眼</p>
<p>响应结束后，关闭 TCP 连接（看不出来）</p>
<p>真正结束</p>
</blockquote>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染原理</title>
    <url>/2021/07/10/08/</url>
    <content><![CDATA[<p><strong>浏览器渲染原理</strong></p>
<p>步骤：</p>
<ul>
<li>根据 HTML 构建 HTML 树（DOM）</li>
<li>根据 CSS 构建 CSS 树 （CSS DOM）</li>
<li>将两棵树合并成一颗渲染树 （render tree）</li>
<li>Layout 布局（文档流、盒模型、计算大小和位置）</li>
<li>Paint 绘制 （把边框颜色、文字颜色、阴影等画出来）</li>
<li>Compose 合成（根据层叠关系展示画面）</li>
</ul>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/render-tree-construction.png" alt="render-tree-construction" width="800px"></center>



<p><strong>JS三种更新样式方式</strong></p>
<ol>
<li><p>JS/CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成</p>
<img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/frame-full.jpg" alt="frame-full" width="800px">

<p>如果修改元素的“layout”属性，也就是改变了元素的几何属性（例如宽度、高度、左侧或顶部位置等），那么浏览器将必须检查所有其他元素，然后“自动重排”页面。任何受影响的部分都需要重新绘制，而且最终绘制的元素需进行合成。</p>
</li>
<li><p>JS/CSS &gt; 样式 &gt; 绘制 &gt; 合成</p>
<img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/frame-no-layout.jpg" alt="frame-no-layout" width="800px">

<p>如果修改“paint only”属性（例如背景图片、文字颜色或阴影等），即不会影响页面布局的属性，则浏览器会跳过布局，但仍将执行绘制。</p>
</li>
<li><p>JS/CSS &gt; 样式 &gt; 合成</p>
<img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/frame-no-layout-paint.jpg" alt="frame-no-layout-paint" width="800px">

<p>如果更改一个既不要布局也不要绘制的属性，则浏览器将跳到只执行合成。</p>
<p>对于应用程序生命周期中的高压点（例如动画或滚动），此最终版本是开销最小和最理想的。</p>
<p>This final version is the cheapest and most desirable for high pressure points in an app’s lifecycle, like animations or scrolling.</p>
</li>
</ol>
<p>例：勾选 Paint flashing查看</p>
<ol>
<li><a href="http://js.jirengu.com/jagel/1/edit?html,css,js,output">div.remove()</a> 会触发当前消失，其他元素 relayout ，再 repaint + composte</li>
<li><a href="http://js.jirengu.com/jidam/1/edit?html,css,js,output">change bg color</a> 直接 repaint + composite</li>
<li><a href="http://js.jirengu.com/wusew/1">change transform</a> 只需 composite</li>
</ol>
<p>查看css属性变更时触发的改变 <a href="https://csstriggers.com/">CSSTrigers</a></p>
<blockquote>
<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction">渲染树构建、布局及绘制</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/">渲染性能</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count">使用 transform 实现动画</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析vue版本</title>
    <url>/2021/10/15/12/</url>
    <content><![CDATA[<p>##vue 版本</p>
<table>
<thead>
<tr>
<th></th>
<th>Vue 完整版</th>
<th>Vue 非完整版</th>
<th>评价</th>
</tr>
</thead>
<tbody><tr>
<td>特点</td>
<td>有 compiler</td>
<td>无 compiler</td>
<td>compiler 占 30% 体积</td>
</tr>
<tr>
<td>视图</td>
<td>写在 HTML 里或者写在 template 中</td>
<td>写在 render 函数里 用 h 来创建把标签</td>
<td>h 是尤雨溪写好穿给 render 的</td>
</tr>
<tr>
<td>cdn 引入</td>
<td>vue.js</td>
<td>vue.runtime.js</td>
<td>文件名不同，生成文件后缀为 .min.js</td>
</tr>
<tr>
<td>webpack 引入</td>
<td>需要配置 alias</td>
<td>默认使用此版</td>
<td>尤雨溪配置的</td>
</tr>
<tr>
<td>@vue/cli 引入</td>
<td>需要额外配置</td>
<td>默认使用此版</td>
<td>尤雨溪、蒋豪群配置的</td>
</tr>
</tbody></table>
<p><strong>最佳实践：</strong> 总是使用非完整版，然后配合 vue-loader 和 vue 文件</p>
<ol>
<li> 保证用户体验，用户下载的 JS 文件体积更小，但<strong>只支持 h 函数</strong></li>
<li> 保证开发体验，开发者可直接在 vue 文件里写 HTML 标签，而<strong>不写 h 函数</strong></li>
<li> 让 loader 去做，vue-loader 会把 vue 文件中的 HTML <strong>转为 h 函数</strong>，这样既保证了用户体验，也顾及到了开发体验。</li>
</ol>
<p><a href="https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6">官方文档</a></p>
<h2 id="template-render"><a href="#template-render" class="headerlink" title="template render"></a>template render</h2><h3 id="完整版-template"><a href="#完整版-template" class="headerlink" title="完整版 template"></a>完整版 template</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">	&#123;&#123;n&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span>&gt;+ <span class="number">1</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> 	<span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">n</span>: <span class="number">9</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.n += <span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">template : <span class="string">`</span></span><br><span class="line"><span class="string">	&lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">		&#123;&#123;n&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">	&lt;/div&gt;`</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;#app&quot;</span>&gt;</span>      </span></span><br><span class="line"><span class="xml">        &#123;&#123;n&#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="非完整版-render"><a href="#非完整版-render" class="headerlink" title="非完整版 render"></a>非完整版 render</h3><center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-10-18_00-50-35-1.png" alt="Snipaste_2021-10-18_00-50-35-1" width="800px"></center>



<h2 id="使用-codesandbox-io-创建-vue项目"><a href="#使用-codesandbox-io-创建-vue项目" class="headerlink" title="使用 codesandbox.io 创建 vue项目"></a>使用 codesandbox.io 创建 vue项目</h2><ol>
<li>打开 <a href="https://codesandbox.io/">codesandbox</a> </li>
<li>创建 vue 项目</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-10-17_20-20-10.png" alt="Snipaste_2021-10-17_20-20-10" width="400px" float="right"><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-10-17_20-20-51.png" alt="Snipaste_2021-10-17_20-20-51" width="500px" float="left"></p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-10-17_20-21-58.png" alt="Snipaste_2021-10-17_20-21-58" width="800px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">创建成功</center> 

<p><strong>导出到本地：</strong></p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-10-17_20-22-26.png" alt="Snipaste_2021-10-17_20-22-26" width="600px"></center>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2021/09/08/14/</url>
    <content><![CDATA[<p>跨域关键知识：</p>
<ul>
<li>同源策略。浏览器故意设计的一个功能限制</li>
<li>CORS。突破浏览器限制的一个方法</li>
<li>JSONP。IE 时代的妥协</li>
</ul>
<h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><p>源 = 协议 + 域名 + 端口号</p>
<p><code>window.origin</code> 或 <code>location.origin</code> 可以得到当前源。</p>
<p>如果两个 url 的<strong>协议、域名、端口号完全一致</strong>，那么这两个 url 就是同源。</p>
<p>例：<code>https://qq.com</code> 和 <code>https://www.baidu.com</code>     不同源</p>
<p><code>https://baidu.com</code> 和 <code>https:www.baidu.com</code>     同源</p>
<p>完全一致才算同源</p>
<p>下表给出了与 URL <code>http://store.company.com/dir/page.html</code> 的源进行对比的示例:</p>
<table>
<thead>
<tr>
<th align="left">URL</th>
<th align="left">结果</th>
<th align="left">原因</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>http://store.company.com/dir2/other.html</code></td>
<td align="left">同源</td>
<td align="left">只有路径不同</td>
</tr>
<tr>
<td align="left"><code>http://store.company.com/dir/inner/another.html</code></td>
<td align="left">同源</td>
<td align="left">只有路径不同</td>
</tr>
<tr>
<td align="left"><code>https://store.company.com/secure.html</code></td>
<td align="left">失败</td>
<td align="left">协议不同</td>
</tr>
<tr>
<td align="left"><code>http://store.company.com:81/dir/etc.html</code></td>
<td align="left">失败</td>
<td align="left">端口不同 ( <code>http://</code> 默认端口是80)</td>
</tr>
<tr>
<td align="left"><code>http://news.company.com/dir/other.html</code></td>
<td align="left">失败</td>
<td align="left">主机不同</td>
</tr>
</tbody></table>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>Ajax 最大的限制是同源策略（Same-origin policy），它限制了不同源之间的交互，一个源的文档或脚本不能与另一个源的资源进行交互。<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">浏览器的同源策略 MDN</a></p>
<ul>
<li><p>浏览器规定</p>
<p>如果 JS 运行在源 A 里，那么就只能获取源 A 的数据</p>
<p>不能获取源 B 的数据，即==不允许跨域==</p>
</li>
<li><p>例如（省略 http 协议）</p>
<p>假设 frank.com/index.html 引用了 cdn.com/1.js</p>
<p>那么就说 1.js 运行在源 frank.com 里</p>
<p>注意 这跟 cdn.com 没有关系，虽然 1.js 从它哪下载</p>
<p>所以 1.js 就只能获取 frank.com 的数据</p>
<p>不能获取 1.frank.com 或者 qq.com 的数据</p>
</li>
<li><p>这是浏览器的功能</p>
<p>浏览器故意要这样设计的</p>
<p>目的：==保护用户隐私==</p>
</li>
</ul>
<h2 id="如果没有同源策略"><a href="#如果没有同源策略" class="headerlink" title="如果没有同源策略"></a>如果没有同源策略</h2><p>以 qq 空间为例</p>
<p>源为 <code>https://user.qzone.qq.com</code>，假设，当前用户已登录（cookie），假设 AJAX 请求 /friends.json 可获取到用户好友列表。</p>
<p>黑客来了，假设有人给你分享 <code>https://qzone-qq.com </code> 给你，实际上是个钓鱼网站，你点开后，这个网页会请求你的好友列表 <code>https://user.qzone.qq.com/friends.json</code>。这样好友列表就能被黑客访问到。</p>
<p><strong>问题根源：</strong></p>
<ul>
<li><p>无法区分发送者</p>
<p>qq 空间页面的 JS 和黑客网页里的 JS 发送的请求几乎没有区别（referrer 有区别）</p>
<p>如果后台开发者没有检查 referrer，那么就完全没有区别</p>
<p>所以，没有同源策略，任何页面都能偷 qq 空间的数据</p>
</li>
<li><p>那检查 referrer 不就好了</p>
<p>安全原则：安全链条的强度取决于最弱的一环</p>
<p>万一这个网站的后端开发工程师就是没有检查 referrer</p>
<p>所以浏览器应该主动预防这种偷数据的行为</p>
<p>总之，浏览器为了用户隐私，设置了严格的同源策略</p>
</li>
</ul>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol>
<li><p>创建目录</p>
<p>qq-com 里新建 server.js，用来模拟 qq空间</p>
<p>frank-com 里新建 server.js，用来模拟黑客网站</p>
</li>
<li><p>qq-com</p>
<p>public 目录下新建 index.html 首页</p>
<p>qq.js 是 JS 脚本文件</p>
<p>friends.json 是模拟的好友数据</p>
<p>端口监听为 8888，访问 <code>http://127.0.0.1:8888</code></p>
</li>
<li><p>hacker-com</p>
<p>public 目录下新建 index.html 首页</p>
<p>frank.js 是 JS 脚本文件</p>
<p>端口监听为 9999，范问 <code>http://127.0.0.1:9999</code></p>
</li>
</ol>
<p>跨域 AJAX</p>
<ul>
<li><p>正常使用 AJAX</p>
<p>在 qq.com:8888 里运行的 JS 可以访问 /friends.json</p>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-27_01-44-31.png" alt="Snipaste_2021-09-27_01-44-31" width="800px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">能够访问</center> </li>
<li><p>黑客偷数据</p>
<p>在 hacker.com:9999 里运行的 JS不能访问</p>
<p>浏览器需要==CORS==</p>
</li>
</ul>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-27_01-44-56.png" alt="Snipaste_2021-09-27_01-44-56" width="800px"></center><center style="font-size:14px;color:#C0C0C0;text-decoration:underline">不能访问</center> 

<ul>
<li><p>提问</p>
<p>黑客的请求成功了没：</p>
<p>答：成功了，因为 qq.com 后台有 log。</p>
<p>黑客拿到响应了没与？</p>
<p>答：没有，因为浏览器不给数据。</p>
</li>
</ul>
<center><img src="https://cdn.jsdelivr.net/gh/Drwna/image//images/Snipaste_2021-09-27_01-53-35.png" alt="Snipaste_2021-09-27_01-53-35" width="800px"></center>



<h2 id="如何跨域"><a href="#如何跨域" class="headerlink" title="如何跨域"></a>如何跨域</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<ul>
<li><p>问题根源</p>
<p>浏览器默认不同源之间不能互相访问数据</p>
<p>但是 qq.com 和 hacker.com 都是自己的网站，需要互相访问</p>
</li>
<li><p>用 CORS</p>
<p>浏览器说，如果要共享数据，需要提前声明！</p>
<p>qq.com 在响应头里写 hacker.com 可以访问</p>
<p>语法：<code>Access-Control-Allow-Origin: http://hacker.com:9999</code></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">MDN 文档</a></p>
</li>
</ul>
<p>CORS 不兼容 ie 6789</p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p><strong>什么是 JSONP？</strong></p>
<p>跨域时，由于当前浏览器不支持 CORS 或因为某些条件不支持 CORS，我们必须使用另外一种方式来跨域。</p>
<p>于是，请求一个 JS 文件，这个 JS 文件会执行事先定义好的回调，这个回调里就有我们需要的数据。</p>
<p><strong>优点：</strong></p>
<ul>
<li>支持 IE </li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>由于是 script 标签，获取不到响应状态</li>
<li>不支持 POST</li>
</ul>
<hr>
<p>演示：hacker.com 访问 qq.com</p>
<ul>
<li>qq.com 将数据写到 /friends.js</li>
<li>frank.com 用 script 标签引用 /friends.js</li>
<li>hacker.com 执行 事先定义好的 window.xxx 函数</li>
<li>/friends.js 执行 window.xxx({friend: […]})</li>
<li>然后 hacker.com 就通过 window.xxx 获取到数据了</li>
<li>window.xxx 就是一个回调！！</li>
</ul>
<p>JSONP 的实现原理演示：</p>
<p>hacker-com 里的 hacker.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.xxx = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.src = <span class="string">&#x27;http://qq.com:8888/friends.js&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure>

<p>qq-com public目录下新建 friends.js 内容为 <code>window.xxx ( &#123;&#123; data &#125;&#125; )</code></p>
<p>qq-com 的 server.js 添加如下路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/friends.js&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.headers[<span class="string">&#x27;referer&#x27;</span>].indexOf(<span class="string">&#x27;http://hacker.com:9999&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            response.statusCode = <span class="number">200</span></span><br><span class="line">            response.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript;charset=utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> string = fs.readFileSync(<span class="string">&#x27;./public/friends.js&#x27;</span>).toString()</span><br><span class="line">            <span class="keyword">const</span> data = fs.readFileSync(<span class="string">&#x27;./public/friends.json&#x27;</span>).toString()</span><br><span class="line">            response.write(string.replace(<span class="string">&#x27;&#123;&#123; data &#125;&#125;&#x27;</span>, data))</span><br><span class="line">            response.end()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.statusCode = <span class="number">404</span>;</span><br><span class="line">            response.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 控制台 window.xxx</span></span><br><span class="line"><span class="comment">// hacker 拿到了 friends.js 的数据</span></span><br></pre></td></tr></table></figure>



<p>优化：</p>
<p>window.xxx 能不能改其他名字？</p>
<p>其实名字不重要，只要 hacker.com 定义的函数名和 qq.com/friends.js 执行的函数名是同一个即可。</p>
<p>将名字穿给 /friends.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hacker.js</span></span><br><span class="line"><span class="keyword">const</span> random = <span class="string">`hackerJSONPCallback`</span> + <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="built_in">console</span>.log(random);</span><br><span class="line"><span class="built_in">window</span>[random] = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.src = <span class="string">`http://qq.com:8888/friends.js?functionName=<span class="subst">$&#123;random&#125;</span>`</span>;</span><br><span class="line">script.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    script.remove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/friends.js&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.headers[<span class="string">&#x27;referer&#x27;</span>].indexOf(<span class="string">&#x27;http://hacker.com:9999&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            response.statusCode = <span class="number">200</span></span><br><span class="line">            <span class="built_in">console</span>.log(query.functionName);</span><br><span class="line">            response.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript;charset=utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> string = fs.readFileSync(<span class="string">&#x27;./public/friends.js&#x27;</span>).toString()</span><br><span class="line">            <span class="keyword">const</span> data = fs.readFileSync(<span class="string">&#x27;./public/friends.json&#x27;</span>).toString()</span><br><span class="line">            response.write(string.replace(<span class="string">&#x27;&#123;&#123; data &#125;&#125;&#x27;</span>, data).replace(<span class="string">`&#123;&#123; xxx &#125;&#125;`</span>, query.functionName))</span><br><span class="line">            response.end()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.statusCode = <span class="number">404</span>;</span><br><span class="line">            response.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// friends.js</span></span><br><span class="line"><span class="built_in">window</span>[<span class="string">`&#123;&#123; xxx &#125;&#125;`</span>]( &#123;&#123; data &#125;&#125; )</span><br></pre></td></tr></table></figure>



<p>进一步优化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hacker.js</span></span><br><span class="line"><span class="comment">// 封装 JSONP</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> random = <span class="string">`hackerJSONPCallback`</span> + <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="built_in">console</span>.log(random);</span><br><span class="line">        <span class="built_in">window</span>[random] = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">        script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?callback=<span class="subst">$&#123;random&#125;</span>`</span>;</span><br><span class="line">        script.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            script.remove();</span><br><span class="line">        &#125;;</span><br><span class="line">        script.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            reject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonp(<span class="string">&#x27;http://qq.com:8888/friends.js&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/friends.js&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.headers[<span class="string">&#x27;referer&#x27;</span>].indexOf(<span class="string">&#x27;http://hacker.com:9999&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            response.statusCode = <span class="number">200</span></span><br><span class="line">            <span class="built_in">console</span>.log(query.functionName);</span><br><span class="line">            response.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript;charset=utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> string = <span class="string">`window[&#x27;&#123;&#123; xxx &#125;&#125;&#x27;]( &#123;&#123; data &#125;&#125; )`</span></span><br><span class="line">            <span class="keyword">const</span> data = fs.readFileSync(<span class="string">&#x27;./public/friends.json&#x27;</span>).toString()</span><br><span class="line">            response.write(string.replace(<span class="string">&#x27;&#123;&#123; data &#125;&#125;&#x27;</span>, data).replace(<span class="string">`&#123;&#123; xxx &#125;&#125;`</span>, query.callback))</span><br><span class="line">            response.end()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.statusCode = <span class="number">404</span>;</span><br><span class="line">            response.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>JSONP 的本质是前后端的协作，即前端把想要的资源以及后续的处理都告诉后台，后台封装好返回给前端执行。</p>
<p>优质博客：</p>
<p><a href="https://segmentfault.com/a/1190000015597029">不要再问我跨域的问题了</a></p>
<p><a href="https://segmentfault.com/a/1190000009624849#comment-area">同源策略于JS跨域（JSONP，CORD）</a></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
